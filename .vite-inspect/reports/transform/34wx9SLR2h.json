{"resolvedId":"D:/Web/gms_forntend/node_modules/.vite/deps/vue-i18n.js?v=50f27fae","transforms":[{"name":"vite:optimized-deps","result":"import {\n  setupDevtoolsPlugin\n} from \"./chunk-XYHHE7SP.js\";\nimport {\n  Fragment,\n  Text,\n  computed,\n  createVNode,\n  effectScope,\n  getCurrentInstance,\n  h,\n  inject,\n  isRef,\n  onBeforeMount,\n  onMounted,\n  onUnmounted,\n  ref,\n  shallowRef,\n  watch\n} from \"./chunk-2ST5CNOS.js\";\nimport \"./chunk-TWLJ45QX.js\";\n\n// node_modules/.pnpm/@intlify+shared@9.2.2/node_modules/@intlify/shared/dist/shared.esm-bundler.js\nvar inBrowser = typeof window !== \"undefined\";\nvar mark;\nvar measure;\nif (true) {\n  const perf = inBrowser && window.performance;\n  if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {\n    mark = (tag) => perf.mark(tag);\n    measure = (name, startTag, endTag) => {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n    };\n  }\n}\nvar RE_ARGS = /\\{([0-9a-zA-Z]+)\\}/g;\nfunction format(message, ...args) {\n  if (args.length === 1 && isObject(args[0])) {\n    args = args[0];\n  }\n  if (!args || !args.hasOwnProperty) {\n    args = {};\n  }\n  return message.replace(RE_ARGS, (match, identifier) => {\n    return args.hasOwnProperty(identifier) ? args[identifier] : \"\";\n  });\n}\nvar hasSymbol = typeof Symbol === \"function\" && typeof Symbol.toStringTag === \"symbol\";\nvar makeSymbol = (name) => hasSymbol ? Symbol(name) : name;\nvar generateFormatCacheKey = (locale, key, source) => friendlyJSONstringify({ l: locale, k: key, s: source });\nvar friendlyJSONstringify = (json) => JSON.stringify(json).replace(/\\u2028/g, \"\\\\u2028\").replace(/\\u2029/g, \"\\\\u2029\").replace(/\\u0027/g, \"\\\\u0027\");\nvar isNumber = (val) => typeof val === \"number\" && isFinite(val);\nvar isDate = (val) => toTypeString(val) === \"[object Date]\";\nvar isRegExp = (val) => toTypeString(val) === \"[object RegExp]\";\nvar isEmptyObject = (val) => isPlainObject(val) && Object.keys(val).length === 0;\nfunction warn(msg, err) {\n  if (typeof console !== \"undefined\") {\n    console.warn(`[intlify] ` + msg);\n    if (err) {\n      console.warn(err.stack);\n    }\n  }\n}\nvar assign = Object.assign;\nvar _globalThis;\nvar getGlobalThis = () => {\n  return _globalThis || (_globalThis = typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : {});\n};\nfunction escapeHtml(rawText) {\n  return rawText.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&apos;\");\n}\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\nvar isArray = Array.isArray;\nvar isFunction = (val) => typeof val === \"function\";\nvar isString = (val) => typeof val === \"string\";\nvar isBoolean = (val) => typeof val === \"boolean\";\nvar isObject = (val) => val !== null && typeof val === \"object\";\nvar objectToString = Object.prototype.toString;\nvar toTypeString = (value) => objectToString.call(value);\nvar isPlainObject = (val) => toTypeString(val) === \"[object Object]\";\nvar toDisplayString = (val) => {\n  return val == null ? \"\" : isArray(val) || isPlainObject(val) && val.toString === objectToString ? JSON.stringify(val, null, 2) : String(val);\n};\nvar RANGE = 2;\nfunction generateCodeFrame(source, start = 0, end = source.length) {\n  const lines = source.split(/\\r?\\n/);\n  let count = 0;\n  const res = [];\n  for (let i = 0; i < lines.length; i++) {\n    count += lines[i].length + 1;\n    if (count >= start) {\n      for (let j = i - RANGE; j <= i + RANGE || end > count; j++) {\n        if (j < 0 || j >= lines.length)\n          continue;\n        const line = j + 1;\n        res.push(`${line}${\" \".repeat(3 - String(line).length)}|  ${lines[j]}`);\n        const lineLength = lines[j].length;\n        if (j === i) {\n          const pad = start - (count - lineLength) + 1;\n          const length = Math.max(1, end > count ? lineLength - pad : end - start);\n          res.push(`   |  ` + \" \".repeat(pad) + \"^\".repeat(length));\n        } else if (j > i) {\n          if (end > count) {\n            const length = Math.max(Math.min(end - count, lineLength), 1);\n            res.push(`   |  ` + \"^\".repeat(length));\n          }\n          count += lineLength + 1;\n        }\n      }\n      break;\n    }\n  }\n  return res.join(\"\\n\");\n}\nfunction createEmitter() {\n  const events = /* @__PURE__ */ new Map();\n  const emitter = {\n    events,\n    on(event, handler) {\n      const handlers = events.get(event);\n      const added = handlers && handlers.push(handler);\n      if (!added) {\n        events.set(event, [handler]);\n      }\n    },\n    off(event, handler) {\n      const handlers = events.get(event);\n      if (handlers) {\n        handlers.splice(handlers.indexOf(handler) >>> 0, 1);\n      }\n    },\n    emit(event, payload) {\n      (events.get(event) || []).slice().map((handler) => handler(payload));\n      (events.get(\"*\") || []).slice().map((handler) => handler(event, payload));\n    }\n  };\n  return emitter;\n}\n\n// node_modules/.pnpm/@intlify+message-compiler@9.2.2/node_modules/@intlify/message-compiler/dist/message-compiler.esm-bundler.js\nvar CompileErrorCodes = {\n  EXPECTED_TOKEN: 1,\n  INVALID_TOKEN_IN_PLACEHOLDER: 2,\n  UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER: 3,\n  UNKNOWN_ESCAPE_SEQUENCE: 4,\n  INVALID_UNICODE_ESCAPE_SEQUENCE: 5,\n  UNBALANCED_CLOSING_BRACE: 6,\n  UNTERMINATED_CLOSING_BRACE: 7,\n  EMPTY_PLACEHOLDER: 8,\n  NOT_ALLOW_NEST_PLACEHOLDER: 9,\n  INVALID_LINKED_FORMAT: 10,\n  MUST_HAVE_MESSAGES_IN_PLURAL: 11,\n  UNEXPECTED_EMPTY_LINKED_MODIFIER: 12,\n  UNEXPECTED_EMPTY_LINKED_KEY: 13,\n  UNEXPECTED_LEXICAL_ANALYSIS: 14,\n  __EXTEND_POINT__: 15\n};\nvar errorMessages = {\n  [CompileErrorCodes.EXPECTED_TOKEN]: `Expected token: '{0}'`,\n  [CompileErrorCodes.INVALID_TOKEN_IN_PLACEHOLDER]: `Invalid token in placeholder: '{0}'`,\n  [CompileErrorCodes.UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER]: `Unterminated single quote in placeholder`,\n  [CompileErrorCodes.UNKNOWN_ESCAPE_SEQUENCE]: `Unknown escape sequence: \\\\{0}`,\n  [CompileErrorCodes.INVALID_UNICODE_ESCAPE_SEQUENCE]: `Invalid unicode escape sequence: {0}`,\n  [CompileErrorCodes.UNBALANCED_CLOSING_BRACE]: `Unbalanced closing brace`,\n  [CompileErrorCodes.UNTERMINATED_CLOSING_BRACE]: `Unterminated closing brace`,\n  [CompileErrorCodes.EMPTY_PLACEHOLDER]: `Empty placeholder`,\n  [CompileErrorCodes.NOT_ALLOW_NEST_PLACEHOLDER]: `Not allowed nest placeholder`,\n  [CompileErrorCodes.INVALID_LINKED_FORMAT]: `Invalid linked format`,\n  [CompileErrorCodes.MUST_HAVE_MESSAGES_IN_PLURAL]: `Plural must have messages`,\n  [CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_MODIFIER]: `Unexpected empty linked modifier`,\n  [CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_KEY]: `Unexpected empty linked key`,\n  [CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS]: `Unexpected lexical analysis in token: '{0}'`\n};\nfunction createCompileError(code3, loc, options = {}) {\n  const { domain, messages, args } = options;\n  const msg = true ? format((messages || errorMessages)[code3] || \"\", ...args || []) : code3;\n  const error = new SyntaxError(String(msg));\n  error.code = code3;\n  if (loc) {\n    error.location = loc;\n  }\n  error.domain = domain;\n  return error;\n}\nfunction defaultOnError(error) {\n  throw error;\n}\nfunction createPosition(line, column, offset) {\n  return { line, column, offset };\n}\nfunction createLocation(start, end, source) {\n  const loc = { start, end };\n  if (source != null) {\n    loc.source = source;\n  }\n  return loc;\n}\nvar CHAR_SP = \" \";\nvar CHAR_CR = \"\\r\";\nvar CHAR_LF = \"\\n\";\nvar CHAR_LS = String.fromCharCode(8232);\nvar CHAR_PS = String.fromCharCode(8233);\nfunction createScanner(str) {\n  const _buf = str;\n  let _index = 0;\n  let _line = 1;\n  let _column = 1;\n  let _peekOffset = 0;\n  const isCRLF = (index2) => _buf[index2] === CHAR_CR && _buf[index2 + 1] === CHAR_LF;\n  const isLF = (index2) => _buf[index2] === CHAR_LF;\n  const isPS = (index2) => _buf[index2] === CHAR_PS;\n  const isLS = (index2) => _buf[index2] === CHAR_LS;\n  const isLineEnd = (index2) => isCRLF(index2) || isLF(index2) || isPS(index2) || isLS(index2);\n  const index = () => _index;\n  const line = () => _line;\n  const column = () => _column;\n  const peekOffset = () => _peekOffset;\n  const charAt = (offset) => isCRLF(offset) || isPS(offset) || isLS(offset) ? CHAR_LF : _buf[offset];\n  const currentChar = () => charAt(_index);\n  const currentPeek = () => charAt(_index + _peekOffset);\n  function next() {\n    _peekOffset = 0;\n    if (isLineEnd(_index)) {\n      _line++;\n      _column = 0;\n    }\n    if (isCRLF(_index)) {\n      _index++;\n    }\n    _index++;\n    _column++;\n    return _buf[_index];\n  }\n  function peek() {\n    if (isCRLF(_index + _peekOffset)) {\n      _peekOffset++;\n    }\n    _peekOffset++;\n    return _buf[_index + _peekOffset];\n  }\n  function reset() {\n    _index = 0;\n    _line = 1;\n    _column = 1;\n    _peekOffset = 0;\n  }\n  function resetPeek(offset = 0) {\n    _peekOffset = offset;\n  }\n  function skipToPeek() {\n    const target = _index + _peekOffset;\n    while (target !== _index) {\n      next();\n    }\n    _peekOffset = 0;\n  }\n  return {\n    index,\n    line,\n    column,\n    peekOffset,\n    charAt,\n    currentChar,\n    currentPeek,\n    next,\n    peek,\n    reset,\n    resetPeek,\n    skipToPeek\n  };\n}\nvar EOF = void 0;\nvar LITERAL_DELIMITER = \"'\";\nvar ERROR_DOMAIN$1 = \"tokenizer\";\nfunction createTokenizer(source, options = {}) {\n  const location = options.location !== false;\n  const _scnr = createScanner(source);\n  const currentOffset = () => _scnr.index();\n  const currentPosition = () => createPosition(_scnr.line(), _scnr.column(), _scnr.index());\n  const _initLoc = currentPosition();\n  const _initOffset = currentOffset();\n  const _context = {\n    currentType: 14,\n    offset: _initOffset,\n    startLoc: _initLoc,\n    endLoc: _initLoc,\n    lastType: 14,\n    lastOffset: _initOffset,\n    lastStartLoc: _initLoc,\n    lastEndLoc: _initLoc,\n    braceNest: 0,\n    inLinked: false,\n    text: \"\"\n  };\n  const context = () => _context;\n  const { onError } = options;\n  function emitError(code3, pos, offset, ...args) {\n    const ctx = context();\n    pos.column += offset;\n    pos.offset += offset;\n    if (onError) {\n      const loc = createLocation(ctx.startLoc, pos);\n      const err = createCompileError(code3, loc, {\n        domain: ERROR_DOMAIN$1,\n        args\n      });\n      onError(err);\n    }\n  }\n  function getToken(context2, type, value) {\n    context2.endLoc = currentPosition();\n    context2.currentType = type;\n    const token = { type };\n    if (location) {\n      token.loc = createLocation(context2.startLoc, context2.endLoc);\n    }\n    if (value != null) {\n      token.value = value;\n    }\n    return token;\n  }\n  const getEndToken = (context2) => getToken(context2, 14);\n  function eat(scnr, ch) {\n    if (scnr.currentChar() === ch) {\n      scnr.next();\n      return ch;\n    } else {\n      emitError(CompileErrorCodes.EXPECTED_TOKEN, currentPosition(), 0, ch);\n      return \"\";\n    }\n  }\n  function peekSpaces(scnr) {\n    let buf = \"\";\n    while (scnr.currentPeek() === CHAR_SP || scnr.currentPeek() === CHAR_LF) {\n      buf += scnr.currentPeek();\n      scnr.peek();\n    }\n    return buf;\n  }\n  function skipSpaces(scnr) {\n    const buf = peekSpaces(scnr);\n    scnr.skipToPeek();\n    return buf;\n  }\n  function isIdentifierStart(ch) {\n    if (ch === EOF) {\n      return false;\n    }\n    const cc = ch.charCodeAt(0);\n    return cc >= 97 && cc <= 122 || cc >= 65 && cc <= 90 || cc === 95;\n  }\n  function isNumberStart(ch) {\n    if (ch === EOF) {\n      return false;\n    }\n    const cc = ch.charCodeAt(0);\n    return cc >= 48 && cc <= 57;\n  }\n  function isNamedIdentifierStart(scnr, context2) {\n    const { currentType } = context2;\n    if (currentType !== 2) {\n      return false;\n    }\n    peekSpaces(scnr);\n    const ret = isIdentifierStart(scnr.currentPeek());\n    scnr.resetPeek();\n    return ret;\n  }\n  function isListIdentifierStart(scnr, context2) {\n    const { currentType } = context2;\n    if (currentType !== 2) {\n      return false;\n    }\n    peekSpaces(scnr);\n    const ch = scnr.currentPeek() === \"-\" ? scnr.peek() : scnr.currentPeek();\n    const ret = isNumberStart(ch);\n    scnr.resetPeek();\n    return ret;\n  }\n  function isLiteralStart(scnr, context2) {\n    const { currentType } = context2;\n    if (currentType !== 2) {\n      return false;\n    }\n    peekSpaces(scnr);\n    const ret = scnr.currentPeek() === LITERAL_DELIMITER;\n    scnr.resetPeek();\n    return ret;\n  }\n  function isLinkedDotStart(scnr, context2) {\n    const { currentType } = context2;\n    if (currentType !== 8) {\n      return false;\n    }\n    peekSpaces(scnr);\n    const ret = scnr.currentPeek() === \".\";\n    scnr.resetPeek();\n    return ret;\n  }\n  function isLinkedModifierStart(scnr, context2) {\n    const { currentType } = context2;\n    if (currentType !== 9) {\n      return false;\n    }\n    peekSpaces(scnr);\n    const ret = isIdentifierStart(scnr.currentPeek());\n    scnr.resetPeek();\n    return ret;\n  }\n  function isLinkedDelimiterStart(scnr, context2) {\n    const { currentType } = context2;\n    if (!(currentType === 8 || currentType === 12)) {\n      return false;\n    }\n    peekSpaces(scnr);\n    const ret = scnr.currentPeek() === \":\";\n    scnr.resetPeek();\n    return ret;\n  }\n  function isLinkedReferStart(scnr, context2) {\n    const { currentType } = context2;\n    if (currentType !== 10) {\n      return false;\n    }\n    const fn = () => {\n      const ch = scnr.currentPeek();\n      if (ch === \"{\") {\n        return isIdentifierStart(scnr.peek());\n      } else if (ch === \"@\" || ch === \"%\" || ch === \"|\" || ch === \":\" || ch === \".\" || ch === CHAR_SP || !ch) {\n        return false;\n      } else if (ch === CHAR_LF) {\n        scnr.peek();\n        return fn();\n      } else {\n        return isIdentifierStart(ch);\n      }\n    };\n    const ret = fn();\n    scnr.resetPeek();\n    return ret;\n  }\n  function isPluralStart(scnr) {\n    peekSpaces(scnr);\n    const ret = scnr.currentPeek() === \"|\";\n    scnr.resetPeek();\n    return ret;\n  }\n  function detectModuloStart(scnr) {\n    const spaces = peekSpaces(scnr);\n    const ret = scnr.currentPeek() === \"%\" && scnr.peek() === \"{\";\n    scnr.resetPeek();\n    return {\n      isModulo: ret,\n      hasSpace: spaces.length > 0\n    };\n  }\n  function isTextStart(scnr, reset = true) {\n    const fn = (hasSpace = false, prev = \"\", detectModulo = false) => {\n      const ch = scnr.currentPeek();\n      if (ch === \"{\") {\n        return prev === \"%\" ? false : hasSpace;\n      } else if (ch === \"@\" || !ch) {\n        return prev === \"%\" ? true : hasSpace;\n      } else if (ch === \"%\") {\n        scnr.peek();\n        return fn(hasSpace, \"%\", true);\n      } else if (ch === \"|\") {\n        return prev === \"%\" || detectModulo ? true : !(prev === CHAR_SP || prev === CHAR_LF);\n      } else if (ch === CHAR_SP) {\n        scnr.peek();\n        return fn(true, CHAR_SP, detectModulo);\n      } else if (ch === CHAR_LF) {\n        scnr.peek();\n        return fn(true, CHAR_LF, detectModulo);\n      } else {\n        return true;\n      }\n    };\n    const ret = fn();\n    reset && scnr.resetPeek();\n    return ret;\n  }\n  function takeChar(scnr, fn) {\n    const ch = scnr.currentChar();\n    if (ch === EOF) {\n      return EOF;\n    }\n    if (fn(ch)) {\n      scnr.next();\n      return ch;\n    }\n    return null;\n  }\n  function takeIdentifierChar(scnr) {\n    const closure = (ch) => {\n      const cc = ch.charCodeAt(0);\n      return cc >= 97 && cc <= 122 || cc >= 65 && cc <= 90 || cc >= 48 && cc <= 57 || cc === 95 || cc === 36;\n    };\n    return takeChar(scnr, closure);\n  }\n  function takeDigit(scnr) {\n    const closure = (ch) => {\n      const cc = ch.charCodeAt(0);\n      return cc >= 48 && cc <= 57;\n    };\n    return takeChar(scnr, closure);\n  }\n  function takeHexDigit(scnr) {\n    const closure = (ch) => {\n      const cc = ch.charCodeAt(0);\n      return cc >= 48 && cc <= 57 || cc >= 65 && cc <= 70 || cc >= 97 && cc <= 102;\n    };\n    return takeChar(scnr, closure);\n  }\n  function getDigits(scnr) {\n    let ch = \"\";\n    let num = \"\";\n    while (ch = takeDigit(scnr)) {\n      num += ch;\n    }\n    return num;\n  }\n  function readModulo(scnr) {\n    skipSpaces(scnr);\n    const ch = scnr.currentChar();\n    if (ch !== \"%\") {\n      emitError(CompileErrorCodes.EXPECTED_TOKEN, currentPosition(), 0, ch);\n    }\n    scnr.next();\n    return \"%\";\n  }\n  function readText(scnr) {\n    let buf = \"\";\n    while (true) {\n      const ch = scnr.currentChar();\n      if (ch === \"{\" || ch === \"}\" || ch === \"@\" || ch === \"|\" || !ch) {\n        break;\n      } else if (ch === \"%\") {\n        if (isTextStart(scnr)) {\n          buf += ch;\n          scnr.next();\n        } else {\n          break;\n        }\n      } else if (ch === CHAR_SP || ch === CHAR_LF) {\n        if (isTextStart(scnr)) {\n          buf += ch;\n          scnr.next();\n        } else if (isPluralStart(scnr)) {\n          break;\n        } else {\n          buf += ch;\n          scnr.next();\n        }\n      } else {\n        buf += ch;\n        scnr.next();\n      }\n    }\n    return buf;\n  }\n  function readNamedIdentifier(scnr) {\n    skipSpaces(scnr);\n    let ch = \"\";\n    let name = \"\";\n    while (ch = takeIdentifierChar(scnr)) {\n      name += ch;\n    }\n    if (scnr.currentChar() === EOF) {\n      emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n    }\n    return name;\n  }\n  function readListIdentifier(scnr) {\n    skipSpaces(scnr);\n    let value = \"\";\n    if (scnr.currentChar() === \"-\") {\n      scnr.next();\n      value += `-${getDigits(scnr)}`;\n    } else {\n      value += getDigits(scnr);\n    }\n    if (scnr.currentChar() === EOF) {\n      emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n    }\n    return value;\n  }\n  function readLiteral(scnr) {\n    skipSpaces(scnr);\n    eat(scnr, `'`);\n    let ch = \"\";\n    let literal = \"\";\n    const fn = (x) => x !== LITERAL_DELIMITER && x !== CHAR_LF;\n    while (ch = takeChar(scnr, fn)) {\n      if (ch === \"\\\\\") {\n        literal += readEscapeSequence(scnr);\n      } else {\n        literal += ch;\n      }\n    }\n    const current = scnr.currentChar();\n    if (current === CHAR_LF || current === EOF) {\n      emitError(CompileErrorCodes.UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER, currentPosition(), 0);\n      if (current === CHAR_LF) {\n        scnr.next();\n        eat(scnr, `'`);\n      }\n      return literal;\n    }\n    eat(scnr, `'`);\n    return literal;\n  }\n  function readEscapeSequence(scnr) {\n    const ch = scnr.currentChar();\n    switch (ch) {\n      case \"\\\\\":\n      case `'`:\n        scnr.next();\n        return `\\\\${ch}`;\n      case \"u\":\n        return readUnicodeEscapeSequence(scnr, ch, 4);\n      case \"U\":\n        return readUnicodeEscapeSequence(scnr, ch, 6);\n      default:\n        emitError(CompileErrorCodes.UNKNOWN_ESCAPE_SEQUENCE, currentPosition(), 0, ch);\n        return \"\";\n    }\n  }\n  function readUnicodeEscapeSequence(scnr, unicode, digits) {\n    eat(scnr, unicode);\n    let sequence = \"\";\n    for (let i = 0; i < digits; i++) {\n      const ch = takeHexDigit(scnr);\n      if (!ch) {\n        emitError(CompileErrorCodes.INVALID_UNICODE_ESCAPE_SEQUENCE, currentPosition(), 0, `\\\\${unicode}${sequence}${scnr.currentChar()}`);\n        break;\n      }\n      sequence += ch;\n    }\n    return `\\\\${unicode}${sequence}`;\n  }\n  function readInvalidIdentifier(scnr) {\n    skipSpaces(scnr);\n    let ch = \"\";\n    let identifiers = \"\";\n    const closure = (ch2) => ch2 !== \"{\" && ch2 !== \"}\" && ch2 !== CHAR_SP && ch2 !== CHAR_LF;\n    while (ch = takeChar(scnr, closure)) {\n      identifiers += ch;\n    }\n    return identifiers;\n  }\n  function readLinkedModifier(scnr) {\n    let ch = \"\";\n    let name = \"\";\n    while (ch = takeIdentifierChar(scnr)) {\n      name += ch;\n    }\n    return name;\n  }\n  function readLinkedRefer(scnr) {\n    const fn = (detect = false, buf) => {\n      const ch = scnr.currentChar();\n      if (ch === \"{\" || ch === \"%\" || ch === \"@\" || ch === \"|\" || !ch) {\n        return buf;\n      } else if (ch === CHAR_SP) {\n        return buf;\n      } else if (ch === CHAR_LF) {\n        buf += ch;\n        scnr.next();\n        return fn(detect, buf);\n      } else {\n        buf += ch;\n        scnr.next();\n        return fn(true, buf);\n      }\n    };\n    return fn(false, \"\");\n  }\n  function readPlural(scnr) {\n    skipSpaces(scnr);\n    const plural = eat(scnr, \"|\");\n    skipSpaces(scnr);\n    return plural;\n  }\n  function readTokenInPlaceholder(scnr, context2) {\n    let token = null;\n    const ch = scnr.currentChar();\n    switch (ch) {\n      case \"{\":\n        if (context2.braceNest >= 1) {\n          emitError(CompileErrorCodes.NOT_ALLOW_NEST_PLACEHOLDER, currentPosition(), 0);\n        }\n        scnr.next();\n        token = getToken(context2, 2, \"{\");\n        skipSpaces(scnr);\n        context2.braceNest++;\n        return token;\n      case \"}\":\n        if (context2.braceNest > 0 && context2.currentType === 2) {\n          emitError(CompileErrorCodes.EMPTY_PLACEHOLDER, currentPosition(), 0);\n        }\n        scnr.next();\n        token = getToken(context2, 3, \"}\");\n        context2.braceNest--;\n        context2.braceNest > 0 && skipSpaces(scnr);\n        if (context2.inLinked && context2.braceNest === 0) {\n          context2.inLinked = false;\n        }\n        return token;\n      case \"@\":\n        if (context2.braceNest > 0) {\n          emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n        }\n        token = readTokenInLinked(scnr, context2) || getEndToken(context2);\n        context2.braceNest = 0;\n        return token;\n      default:\n        let validNamedIdentifier = true;\n        let validListIdentifier = true;\n        let validLiteral = true;\n        if (isPluralStart(scnr)) {\n          if (context2.braceNest > 0) {\n            emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n          }\n          token = getToken(context2, 1, readPlural(scnr));\n          context2.braceNest = 0;\n          context2.inLinked = false;\n          return token;\n        }\n        if (context2.braceNest > 0 && (context2.currentType === 5 || context2.currentType === 6 || context2.currentType === 7)) {\n          emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n          context2.braceNest = 0;\n          return readToken(scnr, context2);\n        }\n        if (validNamedIdentifier = isNamedIdentifierStart(scnr, context2)) {\n          token = getToken(context2, 5, readNamedIdentifier(scnr));\n          skipSpaces(scnr);\n          return token;\n        }\n        if (validListIdentifier = isListIdentifierStart(scnr, context2)) {\n          token = getToken(context2, 6, readListIdentifier(scnr));\n          skipSpaces(scnr);\n          return token;\n        }\n        if (validLiteral = isLiteralStart(scnr, context2)) {\n          token = getToken(context2, 7, readLiteral(scnr));\n          skipSpaces(scnr);\n          return token;\n        }\n        if (!validNamedIdentifier && !validListIdentifier && !validLiteral) {\n          token = getToken(context2, 13, readInvalidIdentifier(scnr));\n          emitError(CompileErrorCodes.INVALID_TOKEN_IN_PLACEHOLDER, currentPosition(), 0, token.value);\n          skipSpaces(scnr);\n          return token;\n        }\n        break;\n    }\n    return token;\n  }\n  function readTokenInLinked(scnr, context2) {\n    const { currentType } = context2;\n    let token = null;\n    const ch = scnr.currentChar();\n    if ((currentType === 8 || currentType === 9 || currentType === 12 || currentType === 10) && (ch === CHAR_LF || ch === CHAR_SP)) {\n      emitError(CompileErrorCodes.INVALID_LINKED_FORMAT, currentPosition(), 0);\n    }\n    switch (ch) {\n      case \"@\":\n        scnr.next();\n        token = getToken(context2, 8, \"@\");\n        context2.inLinked = true;\n        return token;\n      case \".\":\n        skipSpaces(scnr);\n        scnr.next();\n        return getToken(context2, 9, \".\");\n      case \":\":\n        skipSpaces(scnr);\n        scnr.next();\n        return getToken(context2, 10, \":\");\n      default:\n        if (isPluralStart(scnr)) {\n          token = getToken(context2, 1, readPlural(scnr));\n          context2.braceNest = 0;\n          context2.inLinked = false;\n          return token;\n        }\n        if (isLinkedDotStart(scnr, context2) || isLinkedDelimiterStart(scnr, context2)) {\n          skipSpaces(scnr);\n          return readTokenInLinked(scnr, context2);\n        }\n        if (isLinkedModifierStart(scnr, context2)) {\n          skipSpaces(scnr);\n          return getToken(context2, 12, readLinkedModifier(scnr));\n        }\n        if (isLinkedReferStart(scnr, context2)) {\n          skipSpaces(scnr);\n          if (ch === \"{\") {\n            return readTokenInPlaceholder(scnr, context2) || token;\n          } else {\n            return getToken(context2, 11, readLinkedRefer(scnr));\n          }\n        }\n        if (currentType === 8) {\n          emitError(CompileErrorCodes.INVALID_LINKED_FORMAT, currentPosition(), 0);\n        }\n        context2.braceNest = 0;\n        context2.inLinked = false;\n        return readToken(scnr, context2);\n    }\n  }\n  function readToken(scnr, context2) {\n    let token = { type: 14 };\n    if (context2.braceNest > 0) {\n      return readTokenInPlaceholder(scnr, context2) || getEndToken(context2);\n    }\n    if (context2.inLinked) {\n      return readTokenInLinked(scnr, context2) || getEndToken(context2);\n    }\n    const ch = scnr.currentChar();\n    switch (ch) {\n      case \"{\":\n        return readTokenInPlaceholder(scnr, context2) || getEndToken(context2);\n      case \"}\":\n        emitError(CompileErrorCodes.UNBALANCED_CLOSING_BRACE, currentPosition(), 0);\n        scnr.next();\n        return getToken(context2, 3, \"}\");\n      case \"@\":\n        return readTokenInLinked(scnr, context2) || getEndToken(context2);\n      default:\n        if (isPluralStart(scnr)) {\n          token = getToken(context2, 1, readPlural(scnr));\n          context2.braceNest = 0;\n          context2.inLinked = false;\n          return token;\n        }\n        const { isModulo, hasSpace } = detectModuloStart(scnr);\n        if (isModulo) {\n          return hasSpace ? getToken(context2, 0, readText(scnr)) : getToken(context2, 4, readModulo(scnr));\n        }\n        if (isTextStart(scnr)) {\n          return getToken(context2, 0, readText(scnr));\n        }\n        break;\n    }\n    return token;\n  }\n  function nextToken() {\n    const { currentType, offset, startLoc, endLoc } = _context;\n    _context.lastType = currentType;\n    _context.lastOffset = offset;\n    _context.lastStartLoc = startLoc;\n    _context.lastEndLoc = endLoc;\n    _context.offset = currentOffset();\n    _context.startLoc = currentPosition();\n    if (_scnr.currentChar() === EOF) {\n      return getToken(_context, 14);\n    }\n    return readToken(_scnr, _context);\n  }\n  return {\n    nextToken,\n    currentOffset,\n    currentPosition,\n    context\n  };\n}\nvar ERROR_DOMAIN = \"parser\";\nvar KNOWN_ESCAPES = /(?:\\\\\\\\|\\\\'|\\\\u([0-9a-fA-F]{4})|\\\\U([0-9a-fA-F]{6}))/g;\nfunction fromEscapeSequence(match, codePoint4, codePoint6) {\n  switch (match) {\n    case `\\\\\\\\`:\n      return `\\\\`;\n    case `\\\\'`:\n      return `'`;\n    default: {\n      const codePoint = parseInt(codePoint4 || codePoint6, 16);\n      if (codePoint <= 55295 || codePoint >= 57344) {\n        return String.fromCodePoint(codePoint);\n      }\n      return \"\\uFFFD\";\n    }\n  }\n}\nfunction createParser(options = {}) {\n  const location = options.location !== false;\n  const { onError } = options;\n  function emitError(tokenzer, code3, start, offset, ...args) {\n    const end = tokenzer.currentPosition();\n    end.offset += offset;\n    end.column += offset;\n    if (onError) {\n      const loc = createLocation(start, end);\n      const err = createCompileError(code3, loc, {\n        domain: ERROR_DOMAIN,\n        args\n      });\n      onError(err);\n    }\n  }\n  function startNode(type, offset, loc) {\n    const node = {\n      type,\n      start: offset,\n      end: offset\n    };\n    if (location) {\n      node.loc = { start: loc, end: loc };\n    }\n    return node;\n  }\n  function endNode(node, offset, pos, type) {\n    node.end = offset;\n    if (type) {\n      node.type = type;\n    }\n    if (location && node.loc) {\n      node.loc.end = pos;\n    }\n  }\n  function parseText(tokenizer, value) {\n    const context = tokenizer.context();\n    const node = startNode(3, context.offset, context.startLoc);\n    node.value = value;\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseList(tokenizer, index) {\n    const context = tokenizer.context();\n    const { lastOffset: offset, lastStartLoc: loc } = context;\n    const node = startNode(5, offset, loc);\n    node.index = parseInt(index, 10);\n    tokenizer.nextToken();\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseNamed(tokenizer, key) {\n    const context = tokenizer.context();\n    const { lastOffset: offset, lastStartLoc: loc } = context;\n    const node = startNode(4, offset, loc);\n    node.key = key;\n    tokenizer.nextToken();\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseLiteral(tokenizer, value) {\n    const context = tokenizer.context();\n    const { lastOffset: offset, lastStartLoc: loc } = context;\n    const node = startNode(9, offset, loc);\n    node.value = value.replace(KNOWN_ESCAPES, fromEscapeSequence);\n    tokenizer.nextToken();\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseLinkedModifier(tokenizer) {\n    const token = tokenizer.nextToken();\n    const context = tokenizer.context();\n    const { lastOffset: offset, lastStartLoc: loc } = context;\n    const node = startNode(8, offset, loc);\n    if (token.type !== 12) {\n      emitError(tokenizer, CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_MODIFIER, context.lastStartLoc, 0);\n      node.value = \"\";\n      endNode(node, offset, loc);\n      return {\n        nextConsumeToken: token,\n        node\n      };\n    }\n    if (token.value == null) {\n      emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n    }\n    node.value = token.value || \"\";\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return {\n      node\n    };\n  }\n  function parseLinkedKey(tokenizer, value) {\n    const context = tokenizer.context();\n    const node = startNode(7, context.offset, context.startLoc);\n    node.value = value;\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseLinked(tokenizer) {\n    const context = tokenizer.context();\n    const linkedNode = startNode(6, context.offset, context.startLoc);\n    let token = tokenizer.nextToken();\n    if (token.type === 9) {\n      const parsed = parseLinkedModifier(tokenizer);\n      linkedNode.modifier = parsed.node;\n      token = parsed.nextConsumeToken || tokenizer.nextToken();\n    }\n    if (token.type !== 10) {\n      emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n    }\n    token = tokenizer.nextToken();\n    if (token.type === 2) {\n      token = tokenizer.nextToken();\n    }\n    switch (token.type) {\n      case 11:\n        if (token.value == null) {\n          emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n        }\n        linkedNode.key = parseLinkedKey(tokenizer, token.value || \"\");\n        break;\n      case 5:\n        if (token.value == null) {\n          emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n        }\n        linkedNode.key = parseNamed(tokenizer, token.value || \"\");\n        break;\n      case 6:\n        if (token.value == null) {\n          emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n        }\n        linkedNode.key = parseList(tokenizer, token.value || \"\");\n        break;\n      case 7:\n        if (token.value == null) {\n          emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n        }\n        linkedNode.key = parseLiteral(tokenizer, token.value || \"\");\n        break;\n      default:\n        emitError(tokenizer, CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_KEY, context.lastStartLoc, 0);\n        const nextContext = tokenizer.context();\n        const emptyLinkedKeyNode = startNode(7, nextContext.offset, nextContext.startLoc);\n        emptyLinkedKeyNode.value = \"\";\n        endNode(emptyLinkedKeyNode, nextContext.offset, nextContext.startLoc);\n        linkedNode.key = emptyLinkedKeyNode;\n        endNode(linkedNode, nextContext.offset, nextContext.startLoc);\n        return {\n          nextConsumeToken: token,\n          node: linkedNode\n        };\n    }\n    endNode(linkedNode, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return {\n      node: linkedNode\n    };\n  }\n  function parseMessage(tokenizer) {\n    const context = tokenizer.context();\n    const startOffset = context.currentType === 1 ? tokenizer.currentOffset() : context.offset;\n    const startLoc = context.currentType === 1 ? context.endLoc : context.startLoc;\n    const node = startNode(2, startOffset, startLoc);\n    node.items = [];\n    let nextToken = null;\n    do {\n      const token = nextToken || tokenizer.nextToken();\n      nextToken = null;\n      switch (token.type) {\n        case 0:\n          if (token.value == null) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n          }\n          node.items.push(parseText(tokenizer, token.value || \"\"));\n          break;\n        case 6:\n          if (token.value == null) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n          }\n          node.items.push(parseList(tokenizer, token.value || \"\"));\n          break;\n        case 5:\n          if (token.value == null) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n          }\n          node.items.push(parseNamed(tokenizer, token.value || \"\"));\n          break;\n        case 7:\n          if (token.value == null) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n          }\n          node.items.push(parseLiteral(tokenizer, token.value || \"\"));\n          break;\n        case 8:\n          const parsed = parseLinked(tokenizer);\n          node.items.push(parsed.node);\n          nextToken = parsed.nextConsumeToken || null;\n          break;\n      }\n    } while (context.currentType !== 14 && context.currentType !== 1);\n    const endOffset = context.currentType === 1 ? context.lastOffset : tokenizer.currentOffset();\n    const endLoc = context.currentType === 1 ? context.lastEndLoc : tokenizer.currentPosition();\n    endNode(node, endOffset, endLoc);\n    return node;\n  }\n  function parsePlural(tokenizer, offset, loc, msgNode) {\n    const context = tokenizer.context();\n    let hasEmptyMessage = msgNode.items.length === 0;\n    const node = startNode(1, offset, loc);\n    node.cases = [];\n    node.cases.push(msgNode);\n    do {\n      const msg = parseMessage(tokenizer);\n      if (!hasEmptyMessage) {\n        hasEmptyMessage = msg.items.length === 0;\n      }\n      node.cases.push(msg);\n    } while (context.currentType !== 14);\n    if (hasEmptyMessage) {\n      emitError(tokenizer, CompileErrorCodes.MUST_HAVE_MESSAGES_IN_PLURAL, loc, 0);\n    }\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseResource(tokenizer) {\n    const context = tokenizer.context();\n    const { offset, startLoc } = context;\n    const msgNode = parseMessage(tokenizer);\n    if (context.currentType === 14) {\n      return msgNode;\n    } else {\n      return parsePlural(tokenizer, offset, startLoc, msgNode);\n    }\n  }\n  function parse2(source) {\n    const tokenizer = createTokenizer(source, assign({}, options));\n    const context = tokenizer.context();\n    const node = startNode(0, context.offset, context.startLoc);\n    if (location && node.loc) {\n      node.loc.source = source;\n    }\n    node.body = parseResource(tokenizer);\n    if (context.currentType !== 14) {\n      emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, source[context.offset] || \"\");\n    }\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  return { parse: parse2 };\n}\nfunction getTokenCaption(token) {\n  if (token.type === 14) {\n    return \"EOF\";\n  }\n  const name = (token.value || \"\").replace(/\\r?\\n/gu, \"\\\\n\");\n  return name.length > 10 ? name.slice(0, 9) + \"\\u2026\" : name;\n}\nfunction createTransformer(ast, options = {}) {\n  const _context = {\n    ast,\n    helpers: /* @__PURE__ */ new Set()\n  };\n  const context = () => _context;\n  const helper = (name) => {\n    _context.helpers.add(name);\n    return name;\n  };\n  return { context, helper };\n}\nfunction traverseNodes(nodes, transformer) {\n  for (let i = 0; i < nodes.length; i++) {\n    traverseNode(nodes[i], transformer);\n  }\n}\nfunction traverseNode(node, transformer) {\n  switch (node.type) {\n    case 1:\n      traverseNodes(node.cases, transformer);\n      transformer.helper(\"plural\");\n      break;\n    case 2:\n      traverseNodes(node.items, transformer);\n      break;\n    case 6:\n      const linked = node;\n      traverseNode(linked.key, transformer);\n      transformer.helper(\"linked\");\n      transformer.helper(\"type\");\n      break;\n    case 5:\n      transformer.helper(\"interpolate\");\n      transformer.helper(\"list\");\n      break;\n    case 4:\n      transformer.helper(\"interpolate\");\n      transformer.helper(\"named\");\n      break;\n  }\n}\nfunction transform(ast, options = {}) {\n  const transformer = createTransformer(ast);\n  transformer.helper(\"normalize\");\n  ast.body && traverseNode(ast.body, transformer);\n  const context = transformer.context();\n  ast.helpers = Array.from(context.helpers);\n}\nfunction createCodeGenerator(ast, options) {\n  const { sourceMap, filename, breakLineCode, needIndent: _needIndent } = options;\n  const _context = {\n    source: ast.loc.source,\n    filename,\n    code: \"\",\n    column: 1,\n    line: 1,\n    offset: 0,\n    map: void 0,\n    breakLineCode,\n    needIndent: _needIndent,\n    indentLevel: 0\n  };\n  const context = () => _context;\n  function push(code3, node) {\n    _context.code += code3;\n  }\n  function _newline(n, withBreakLine = true) {\n    const _breakLineCode = withBreakLine ? breakLineCode : \"\";\n    push(_needIndent ? _breakLineCode + `  `.repeat(n) : _breakLineCode);\n  }\n  function indent(withNewLine = true) {\n    const level = ++_context.indentLevel;\n    withNewLine && _newline(level);\n  }\n  function deindent(withNewLine = true) {\n    const level = --_context.indentLevel;\n    withNewLine && _newline(level);\n  }\n  function newline() {\n    _newline(_context.indentLevel);\n  }\n  const helper = (key) => `_${key}`;\n  const needIndent = () => _context.needIndent;\n  return {\n    context,\n    push,\n    indent,\n    deindent,\n    newline,\n    helper,\n    needIndent\n  };\n}\nfunction generateLinkedNode(generator, node) {\n  const { helper } = generator;\n  generator.push(`${helper(\"linked\")}(`);\n  generateNode(generator, node.key);\n  if (node.modifier) {\n    generator.push(`, `);\n    generateNode(generator, node.modifier);\n    generator.push(`, _type`);\n  } else {\n    generator.push(`, undefined, _type`);\n  }\n  generator.push(`)`);\n}\nfunction generateMessageNode(generator, node) {\n  const { helper, needIndent } = generator;\n  generator.push(`${helper(\"normalize\")}([`);\n  generator.indent(needIndent());\n  const length = node.items.length;\n  for (let i = 0; i < length; i++) {\n    generateNode(generator, node.items[i]);\n    if (i === length - 1) {\n      break;\n    }\n    generator.push(\", \");\n  }\n  generator.deindent(needIndent());\n  generator.push(\"])\");\n}\nfunction generatePluralNode(generator, node) {\n  const { helper, needIndent } = generator;\n  if (node.cases.length > 1) {\n    generator.push(`${helper(\"plural\")}([`);\n    generator.indent(needIndent());\n    const length = node.cases.length;\n    for (let i = 0; i < length; i++) {\n      generateNode(generator, node.cases[i]);\n      if (i === length - 1) {\n        break;\n      }\n      generator.push(\", \");\n    }\n    generator.deindent(needIndent());\n    generator.push(`])`);\n  }\n}\nfunction generateResource(generator, node) {\n  if (node.body) {\n    generateNode(generator, node.body);\n  } else {\n    generator.push(\"null\");\n  }\n}\nfunction generateNode(generator, node) {\n  const { helper } = generator;\n  switch (node.type) {\n    case 0:\n      generateResource(generator, node);\n      break;\n    case 1:\n      generatePluralNode(generator, node);\n      break;\n    case 2:\n      generateMessageNode(generator, node);\n      break;\n    case 6:\n      generateLinkedNode(generator, node);\n      break;\n    case 8:\n      generator.push(JSON.stringify(node.value), node);\n      break;\n    case 7:\n      generator.push(JSON.stringify(node.value), node);\n      break;\n    case 5:\n      generator.push(`${helper(\"interpolate\")}(${helper(\"list\")}(${node.index}))`, node);\n      break;\n    case 4:\n      generator.push(`${helper(\"interpolate\")}(${helper(\"named\")}(${JSON.stringify(node.key)}))`, node);\n      break;\n    case 9:\n      generator.push(JSON.stringify(node.value), node);\n      break;\n    case 3:\n      generator.push(JSON.stringify(node.value), node);\n      break;\n    default:\n      if (true) {\n        throw new Error(`unhandled codegen node type: ${node.type}`);\n      }\n  }\n}\nvar generate = (ast, options = {}) => {\n  const mode = isString(options.mode) ? options.mode : \"normal\";\n  const filename = isString(options.filename) ? options.filename : \"message.intl\";\n  const sourceMap = !!options.sourceMap;\n  const breakLineCode = options.breakLineCode != null ? options.breakLineCode : mode === \"arrow\" ? \";\" : \"\\n\";\n  const needIndent = options.needIndent ? options.needIndent : mode !== \"arrow\";\n  const helpers = ast.helpers || [];\n  const generator = createCodeGenerator(ast, {\n    mode,\n    filename,\n    sourceMap,\n    breakLineCode,\n    needIndent\n  });\n  generator.push(mode === \"normal\" ? `function __msg__ (ctx) {` : `(ctx) => {`);\n  generator.indent(needIndent);\n  if (helpers.length > 0) {\n    generator.push(`const { ${helpers.map((s) => `${s}: _${s}`).join(\", \")} } = ctx`);\n    generator.newline();\n  }\n  generator.push(`return `);\n  generateNode(generator, ast);\n  generator.deindent(needIndent);\n  generator.push(`}`);\n  const { code: code3, map } = generator.context();\n  return {\n    ast,\n    code: code3,\n    map: map ? map.toJSON() : void 0\n  };\n};\nfunction baseCompile(source, options = {}) {\n  const assignedOptions = assign({}, options);\n  const parser = createParser(assignedOptions);\n  const ast = parser.parse(source);\n  transform(ast, assignedOptions);\n  return generate(ast, assignedOptions);\n}\n\n// node_modules/.pnpm/@intlify+devtools-if@9.2.2/node_modules/@intlify/devtools-if/dist/devtools-if.esm-bundler.js\nvar IntlifyDevToolsHooks = {\n  I18nInit: \"i18n:init\",\n  FunctionTranslate: \"function:translate\"\n};\n\n// node_modules/.pnpm/@intlify+core-base@9.2.2/node_modules/@intlify/core-base/dist/core-base.esm-bundler.js\nvar pathStateMachine = [];\npathStateMachine[0] = {\n  [\"w\"]: [0],\n  [\"i\"]: [3, 0],\n  [\"[\"]: [4],\n  [\"o\"]: [7]\n};\npathStateMachine[1] = {\n  [\"w\"]: [1],\n  [\".\"]: [2],\n  [\"[\"]: [4],\n  [\"o\"]: [7]\n};\npathStateMachine[2] = {\n  [\"w\"]: [2],\n  [\"i\"]: [3, 0],\n  [\"0\"]: [3, 0]\n};\npathStateMachine[3] = {\n  [\"i\"]: [3, 0],\n  [\"0\"]: [3, 0],\n  [\"w\"]: [1, 1],\n  [\".\"]: [2, 1],\n  [\"[\"]: [4, 1],\n  [\"o\"]: [7, 1]\n};\npathStateMachine[4] = {\n  [\"'\"]: [5, 0],\n  ['\"']: [6, 0],\n  [\"[\"]: [\n    4,\n    2\n  ],\n  [\"]\"]: [1, 3],\n  [\"o\"]: 8,\n  [\"l\"]: [4, 0]\n};\npathStateMachine[5] = {\n  [\"'\"]: [4, 0],\n  [\"o\"]: 8,\n  [\"l\"]: [5, 0]\n};\npathStateMachine[6] = {\n  ['\"']: [4, 0],\n  [\"o\"]: 8,\n  [\"l\"]: [6, 0]\n};\nvar literalValueRE = /^\\s?(?:true|false|-?[\\d.]+|'[^']*'|\"[^\"]*\")\\s?$/;\nfunction isLiteral(exp) {\n  return literalValueRE.test(exp);\n}\nfunction stripQuotes(str) {\n  const a = str.charCodeAt(0);\n  const b = str.charCodeAt(str.length - 1);\n  return a === b && (a === 34 || a === 39) ? str.slice(1, -1) : str;\n}\nfunction getPathCharType(ch) {\n  if (ch === void 0 || ch === null) {\n    return \"o\";\n  }\n  const code3 = ch.charCodeAt(0);\n  switch (code3) {\n    case 91:\n    case 93:\n    case 46:\n    case 34:\n    case 39:\n      return ch;\n    case 95:\n    case 36:\n    case 45:\n      return \"i\";\n    case 9:\n    case 10:\n    case 13:\n    case 160:\n    case 65279:\n    case 8232:\n    case 8233:\n      return \"w\";\n  }\n  return \"i\";\n}\nfunction formatSubPath(path) {\n  const trimmed = path.trim();\n  if (path.charAt(0) === \"0\" && isNaN(parseInt(path))) {\n    return false;\n  }\n  return isLiteral(trimmed) ? stripQuotes(trimmed) : \"*\" + trimmed;\n}\nfunction parse(path) {\n  const keys = [];\n  let index = -1;\n  let mode = 0;\n  let subPathDepth = 0;\n  let c;\n  let key;\n  let newChar;\n  let type;\n  let transition;\n  let action;\n  let typeMap;\n  const actions = [];\n  actions[0] = () => {\n    if (key === void 0) {\n      key = newChar;\n    } else {\n      key += newChar;\n    }\n  };\n  actions[1] = () => {\n    if (key !== void 0) {\n      keys.push(key);\n      key = void 0;\n    }\n  };\n  actions[2] = () => {\n    actions[0]();\n    subPathDepth++;\n  };\n  actions[3] = () => {\n    if (subPathDepth > 0) {\n      subPathDepth--;\n      mode = 4;\n      actions[0]();\n    } else {\n      subPathDepth = 0;\n      if (key === void 0) {\n        return false;\n      }\n      key = formatSubPath(key);\n      if (key === false) {\n        return false;\n      } else {\n        actions[1]();\n      }\n    }\n  };\n  function maybeUnescapeQuote() {\n    const nextChar = path[index + 1];\n    if (mode === 5 && nextChar === \"'\" || mode === 6 && nextChar === '\"') {\n      index++;\n      newChar = \"\\\\\" + nextChar;\n      actions[0]();\n      return true;\n    }\n  }\n  while (mode !== null) {\n    index++;\n    c = path[index];\n    if (c === \"\\\\\" && maybeUnescapeQuote()) {\n      continue;\n    }\n    type = getPathCharType(c);\n    typeMap = pathStateMachine[mode];\n    transition = typeMap[type] || typeMap[\"l\"] || 8;\n    if (transition === 8) {\n      return;\n    }\n    mode = transition[0];\n    if (transition[1] !== void 0) {\n      action = actions[transition[1]];\n      if (action) {\n        newChar = c;\n        if (action() === false) {\n          return;\n        }\n      }\n    }\n    if (mode === 7) {\n      return keys;\n    }\n  }\n}\nvar cache = /* @__PURE__ */ new Map();\nfunction resolveWithKeyValue(obj, path) {\n  return isObject(obj) ? obj[path] : null;\n}\nfunction resolveValue(obj, path) {\n  if (!isObject(obj)) {\n    return null;\n  }\n  let hit = cache.get(path);\n  if (!hit) {\n    hit = parse(path);\n    if (hit) {\n      cache.set(path, hit);\n    }\n  }\n  if (!hit) {\n    return null;\n  }\n  const len = hit.length;\n  let last = obj;\n  let i = 0;\n  while (i < len) {\n    const val = last[hit[i]];\n    if (val === void 0) {\n      return null;\n    }\n    last = val;\n    i++;\n  }\n  return last;\n}\nvar DEFAULT_MODIFIER = (str) => str;\nvar DEFAULT_MESSAGE = (ctx) => \"\";\nvar DEFAULT_MESSAGE_DATA_TYPE = \"text\";\nvar DEFAULT_NORMALIZE = (values) => values.length === 0 ? \"\" : values.join(\"\");\nvar DEFAULT_INTERPOLATE = toDisplayString;\nfunction pluralDefault(choice, choicesLength) {\n  choice = Math.abs(choice);\n  if (choicesLength === 2) {\n    return choice ? choice > 1 ? 1 : 0 : 1;\n  }\n  return choice ? Math.min(choice, 2) : 0;\n}\nfunction getPluralIndex(options) {\n  const index = isNumber(options.pluralIndex) ? options.pluralIndex : -1;\n  return options.named && (isNumber(options.named.count) || isNumber(options.named.n)) ? isNumber(options.named.count) ? options.named.count : isNumber(options.named.n) ? options.named.n : index : index;\n}\nfunction normalizeNamed(pluralIndex, props) {\n  if (!props.count) {\n    props.count = pluralIndex;\n  }\n  if (!props.n) {\n    props.n = pluralIndex;\n  }\n}\nfunction createMessageContext(options = {}) {\n  const locale = options.locale;\n  const pluralIndex = getPluralIndex(options);\n  const pluralRule = isObject(options.pluralRules) && isString(locale) && isFunction(options.pluralRules[locale]) ? options.pluralRules[locale] : pluralDefault;\n  const orgPluralRule = isObject(options.pluralRules) && isString(locale) && isFunction(options.pluralRules[locale]) ? pluralDefault : void 0;\n  const plural = (messages) => {\n    return messages[pluralRule(pluralIndex, messages.length, orgPluralRule)];\n  };\n  const _list = options.list || [];\n  const list = (index) => _list[index];\n  const _named = options.named || {};\n  isNumber(options.pluralIndex) && normalizeNamed(pluralIndex, _named);\n  const named = (key) => _named[key];\n  function message(key) {\n    const msg = isFunction(options.messages) ? options.messages(key) : isObject(options.messages) ? options.messages[key] : false;\n    return !msg ? options.parent ? options.parent.message(key) : DEFAULT_MESSAGE : msg;\n  }\n  const _modifier = (name) => options.modifiers ? options.modifiers[name] : DEFAULT_MODIFIER;\n  const normalize = isPlainObject(options.processor) && isFunction(options.processor.normalize) ? options.processor.normalize : DEFAULT_NORMALIZE;\n  const interpolate = isPlainObject(options.processor) && isFunction(options.processor.interpolate) ? options.processor.interpolate : DEFAULT_INTERPOLATE;\n  const type = isPlainObject(options.processor) && isString(options.processor.type) ? options.processor.type : DEFAULT_MESSAGE_DATA_TYPE;\n  const linked = (key, ...args) => {\n    const [arg1, arg2] = args;\n    let type2 = \"text\";\n    let modifier = \"\";\n    if (args.length === 1) {\n      if (isObject(arg1)) {\n        modifier = arg1.modifier || modifier;\n        type2 = arg1.type || type2;\n      } else if (isString(arg1)) {\n        modifier = arg1 || modifier;\n      }\n    } else if (args.length === 2) {\n      if (isString(arg1)) {\n        modifier = arg1 || modifier;\n      }\n      if (isString(arg2)) {\n        type2 = arg2 || type2;\n      }\n    }\n    let msg = message(key)(ctx);\n    if (type2 === \"vnode\" && isArray(msg) && modifier) {\n      msg = msg[0];\n    }\n    return modifier ? _modifier(modifier)(msg, type2) : msg;\n  };\n  const ctx = {\n    [\"list\"]: list,\n    [\"named\"]: named,\n    [\"plural\"]: plural,\n    [\"linked\"]: linked,\n    [\"message\"]: message,\n    [\"type\"]: type,\n    [\"interpolate\"]: interpolate,\n    [\"normalize\"]: normalize\n  };\n  return ctx;\n}\nvar devtools = null;\nfunction setDevToolsHook(hook) {\n  devtools = hook;\n}\nfunction initI18nDevTools(i18n, version, meta) {\n  devtools && devtools.emit(IntlifyDevToolsHooks.I18nInit, {\n    timestamp: Date.now(),\n    i18n,\n    version,\n    meta\n  });\n}\nvar translateDevTools = createDevToolsHook(IntlifyDevToolsHooks.FunctionTranslate);\nfunction createDevToolsHook(hook) {\n  return (payloads) => devtools && devtools.emit(hook, payloads);\n}\nvar CoreWarnCodes = {\n  NOT_FOUND_KEY: 1,\n  FALLBACK_TO_TRANSLATE: 2,\n  CANNOT_FORMAT_NUMBER: 3,\n  FALLBACK_TO_NUMBER_FORMAT: 4,\n  CANNOT_FORMAT_DATE: 5,\n  FALLBACK_TO_DATE_FORMAT: 6,\n  __EXTEND_POINT__: 7\n};\nvar warnMessages = {\n  [CoreWarnCodes.NOT_FOUND_KEY]: `Not found '{key}' key in '{locale}' locale messages.`,\n  [CoreWarnCodes.FALLBACK_TO_TRANSLATE]: `Fall back to translate '{key}' key with '{target}' locale.`,\n  [CoreWarnCodes.CANNOT_FORMAT_NUMBER]: `Cannot format a number value due to not supported Intl.NumberFormat.`,\n  [CoreWarnCodes.FALLBACK_TO_NUMBER_FORMAT]: `Fall back to number format '{key}' key with '{target}' locale.`,\n  [CoreWarnCodes.CANNOT_FORMAT_DATE]: `Cannot format a date value due to not supported Intl.DateTimeFormat.`,\n  [CoreWarnCodes.FALLBACK_TO_DATE_FORMAT]: `Fall back to datetime format '{key}' key with '{target}' locale.`\n};\nfunction getWarnMessage(code3, ...args) {\n  return format(warnMessages[code3], ...args);\n}\nfunction fallbackWithSimple(ctx, fallback, start) {\n  return [.../* @__PURE__ */ new Set([\n    start,\n    ...isArray(fallback) ? fallback : isObject(fallback) ? Object.keys(fallback) : isString(fallback) ? [fallback] : [start]\n  ])];\n}\nfunction fallbackWithLocaleChain(ctx, fallback, start) {\n  const startLocale = isString(start) ? start : DEFAULT_LOCALE;\n  const context = ctx;\n  if (!context.__localeChainCache) {\n    context.__localeChainCache = /* @__PURE__ */ new Map();\n  }\n  let chain = context.__localeChainCache.get(startLocale);\n  if (!chain) {\n    chain = [];\n    let block = [start];\n    while (isArray(block)) {\n      block = appendBlockToChain(chain, block, fallback);\n    }\n    const defaults = isArray(fallback) || !isPlainObject(fallback) ? fallback : fallback[\"default\"] ? fallback[\"default\"] : null;\n    block = isString(defaults) ? [defaults] : defaults;\n    if (isArray(block)) {\n      appendBlockToChain(chain, block, false);\n    }\n    context.__localeChainCache.set(startLocale, chain);\n  }\n  return chain;\n}\nfunction appendBlockToChain(chain, block, blocks) {\n  let follow = true;\n  for (let i = 0; i < block.length && isBoolean(follow); i++) {\n    const locale = block[i];\n    if (isString(locale)) {\n      follow = appendLocaleToChain(chain, block[i], blocks);\n    }\n  }\n  return follow;\n}\nfunction appendLocaleToChain(chain, locale, blocks) {\n  let follow;\n  const tokens = locale.split(\"-\");\n  do {\n    const target = tokens.join(\"-\");\n    follow = appendItemToChain(chain, target, blocks);\n    tokens.splice(-1, 1);\n  } while (tokens.length && follow === true);\n  return follow;\n}\nfunction appendItemToChain(chain, target, blocks) {\n  let follow = false;\n  if (!chain.includes(target)) {\n    follow = true;\n    if (target) {\n      follow = target[target.length - 1] !== \"!\";\n      const locale = target.replace(/!/g, \"\");\n      chain.push(locale);\n      if ((isArray(blocks) || isPlainObject(blocks)) && blocks[locale]) {\n        follow = blocks[locale];\n      }\n    }\n  }\n  return follow;\n}\nvar VERSION = \"9.2.2\";\nvar NOT_REOSLVED = -1;\nvar DEFAULT_LOCALE = \"en-US\";\nvar MISSING_RESOLVE_VALUE = \"\";\nvar capitalize = (str) => `${str.charAt(0).toLocaleUpperCase()}${str.substr(1)}`;\nfunction getDefaultLinkedModifiers() {\n  return {\n    upper: (val, type) => {\n      return type === \"text\" && isString(val) ? val.toUpperCase() : type === \"vnode\" && isObject(val) && \"__v_isVNode\" in val ? val.children.toUpperCase() : val;\n    },\n    lower: (val, type) => {\n      return type === \"text\" && isString(val) ? val.toLowerCase() : type === \"vnode\" && isObject(val) && \"__v_isVNode\" in val ? val.children.toLowerCase() : val;\n    },\n    capitalize: (val, type) => {\n      return type === \"text\" && isString(val) ? capitalize(val) : type === \"vnode\" && isObject(val) && \"__v_isVNode\" in val ? capitalize(val.children) : val;\n    }\n  };\n}\nvar _compiler;\nfunction registerMessageCompiler(compiler) {\n  _compiler = compiler;\n}\nvar _resolver;\nfunction registerMessageResolver(resolver) {\n  _resolver = resolver;\n}\nvar _fallbacker;\nfunction registerLocaleFallbacker(fallbacker) {\n  _fallbacker = fallbacker;\n}\nvar _additionalMeta = null;\nvar setAdditionalMeta = (meta) => {\n  _additionalMeta = meta;\n};\nvar getAdditionalMeta = () => _additionalMeta;\nvar _fallbackContext = null;\nvar setFallbackContext = (context) => {\n  _fallbackContext = context;\n};\nvar getFallbackContext = () => _fallbackContext;\nvar _cid = 0;\nfunction createCoreContext(options = {}) {\n  const version = isString(options.version) ? options.version : VERSION;\n  const locale = isString(options.locale) ? options.locale : DEFAULT_LOCALE;\n  const fallbackLocale = isArray(options.fallbackLocale) || isPlainObject(options.fallbackLocale) || isString(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : locale;\n  const messages = isPlainObject(options.messages) ? options.messages : { [locale]: {} };\n  const datetimeFormats = isPlainObject(options.datetimeFormats) ? options.datetimeFormats : { [locale]: {} };\n  const numberFormats = isPlainObject(options.numberFormats) ? options.numberFormats : { [locale]: {} };\n  const modifiers = assign({}, options.modifiers || {}, getDefaultLinkedModifiers());\n  const pluralRules = options.pluralRules || {};\n  const missing = isFunction(options.missing) ? options.missing : null;\n  const missingWarn = isBoolean(options.missingWarn) || isRegExp(options.missingWarn) ? options.missingWarn : true;\n  const fallbackWarn = isBoolean(options.fallbackWarn) || isRegExp(options.fallbackWarn) ? options.fallbackWarn : true;\n  const fallbackFormat = !!options.fallbackFormat;\n  const unresolving = !!options.unresolving;\n  const postTranslation = isFunction(options.postTranslation) ? options.postTranslation : null;\n  const processor = isPlainObject(options.processor) ? options.processor : null;\n  const warnHtmlMessage = isBoolean(options.warnHtmlMessage) ? options.warnHtmlMessage : true;\n  const escapeParameter = !!options.escapeParameter;\n  const messageCompiler = isFunction(options.messageCompiler) ? options.messageCompiler : _compiler;\n  const messageResolver = isFunction(options.messageResolver) ? options.messageResolver : _resolver || resolveWithKeyValue;\n  const localeFallbacker = isFunction(options.localeFallbacker) ? options.localeFallbacker : _fallbacker || fallbackWithSimple;\n  const fallbackContext = isObject(options.fallbackContext) ? options.fallbackContext : void 0;\n  const onWarn = isFunction(options.onWarn) ? options.onWarn : warn;\n  const internalOptions = options;\n  const __datetimeFormatters = isObject(internalOptions.__datetimeFormatters) ? internalOptions.__datetimeFormatters : /* @__PURE__ */ new Map();\n  const __numberFormatters = isObject(internalOptions.__numberFormatters) ? internalOptions.__numberFormatters : /* @__PURE__ */ new Map();\n  const __meta = isObject(internalOptions.__meta) ? internalOptions.__meta : {};\n  _cid++;\n  const context = {\n    version,\n    cid: _cid,\n    locale,\n    fallbackLocale,\n    messages,\n    modifiers,\n    pluralRules,\n    missing,\n    missingWarn,\n    fallbackWarn,\n    fallbackFormat,\n    unresolving,\n    postTranslation,\n    processor,\n    warnHtmlMessage,\n    escapeParameter,\n    messageCompiler,\n    messageResolver,\n    localeFallbacker,\n    fallbackContext,\n    onWarn,\n    __meta\n  };\n  {\n    context.datetimeFormats = datetimeFormats;\n    context.numberFormats = numberFormats;\n    context.__datetimeFormatters = __datetimeFormatters;\n    context.__numberFormatters = __numberFormatters;\n  }\n  if (true) {\n    context.__v_emitter = internalOptions.__v_emitter != null ? internalOptions.__v_emitter : void 0;\n  }\n  if (true) {\n    initI18nDevTools(context, version, __meta);\n  }\n  return context;\n}\nfunction isTranslateFallbackWarn(fallback, key) {\n  return fallback instanceof RegExp ? fallback.test(key) : fallback;\n}\nfunction isTranslateMissingWarn(missing, key) {\n  return missing instanceof RegExp ? missing.test(key) : missing;\n}\nfunction handleMissing(context, key, locale, missingWarn, type) {\n  const { missing, onWarn } = context;\n  if (true) {\n    const emitter = context.__v_emitter;\n    if (emitter) {\n      emitter.emit(\"missing\", {\n        locale,\n        key,\n        type,\n        groupId: `${type}:${key}`\n      });\n    }\n  }\n  if (missing !== null) {\n    const ret = missing(context, locale, key, type);\n    return isString(ret) ? ret : key;\n  } else {\n    if (isTranslateMissingWarn(missingWarn, key)) {\n      onWarn(getWarnMessage(CoreWarnCodes.NOT_FOUND_KEY, { key, locale }));\n    }\n    return key;\n  }\n}\nfunction updateFallbackLocale(ctx, locale, fallback) {\n  const context = ctx;\n  context.__localeChainCache = /* @__PURE__ */ new Map();\n  ctx.localeFallbacker(ctx, fallback, locale);\n}\nvar RE_HTML_TAG = /<\\/?[\\w\\s=\"/.':;#-\\/]+>/;\nvar WARN_MESSAGE = `Detected HTML in '{source}' message. Recommend not using HTML messages to avoid XSS.`;\nfunction checkHtmlMessage(source, options) {\n  const warnHtmlMessage = isBoolean(options.warnHtmlMessage) ? options.warnHtmlMessage : true;\n  if (warnHtmlMessage && RE_HTML_TAG.test(source)) {\n    warn(format(WARN_MESSAGE, { source }));\n  }\n}\nvar defaultOnCacheKey = (source) => source;\nvar compileCache = /* @__PURE__ */ Object.create(null);\nfunction compileToFunction(source, options = {}) {\n  {\n    checkHtmlMessage(source, options);\n    const onCacheKey = options.onCacheKey || defaultOnCacheKey;\n    const key = onCacheKey(source);\n    const cached = compileCache[key];\n    if (cached) {\n      return cached;\n    }\n    let occurred = false;\n    const onError = options.onError || defaultOnError;\n    options.onError = (err) => {\n      occurred = true;\n      onError(err);\n    };\n    const { code: code3 } = baseCompile(source, options);\n    const msg = new Function(`return ${code3}`)();\n    return !occurred ? compileCache[key] = msg : msg;\n  }\n}\nvar code = CompileErrorCodes.__EXTEND_POINT__;\nvar inc = () => ++code;\nvar CoreErrorCodes = {\n  INVALID_ARGUMENT: code,\n  INVALID_DATE_ARGUMENT: inc(),\n  INVALID_ISO_DATE_ARGUMENT: inc(),\n  __EXTEND_POINT__: inc()\n};\nfunction createCoreError(code3) {\n  return createCompileError(code3, null, true ? { messages: errorMessages2 } : void 0);\n}\nvar errorMessages2 = {\n  [CoreErrorCodes.INVALID_ARGUMENT]: \"Invalid arguments\",\n  [CoreErrorCodes.INVALID_DATE_ARGUMENT]: \"The date provided is an invalid Date object.Make sure your Date represents a valid date.\",\n  [CoreErrorCodes.INVALID_ISO_DATE_ARGUMENT]: \"The argument provided is not a valid ISO date string\"\n};\nvar NOOP_MESSAGE_FUNCTION = () => \"\";\nvar isMessageFunction = (val) => isFunction(val);\nfunction translate(context, ...args) {\n  const { fallbackFormat, postTranslation, unresolving, messageCompiler, fallbackLocale, messages } = context;\n  const [key, options] = parseTranslateArgs(...args);\n  const missingWarn = isBoolean(options.missingWarn) ? options.missingWarn : context.missingWarn;\n  const fallbackWarn = isBoolean(options.fallbackWarn) ? options.fallbackWarn : context.fallbackWarn;\n  const escapeParameter = isBoolean(options.escapeParameter) ? options.escapeParameter : context.escapeParameter;\n  const resolvedMessage = !!options.resolvedMessage;\n  const defaultMsgOrKey = isString(options.default) || isBoolean(options.default) ? !isBoolean(options.default) ? options.default : !messageCompiler ? () => key : key : fallbackFormat ? !messageCompiler ? () => key : key : \"\";\n  const enableDefaultMsg = fallbackFormat || defaultMsgOrKey !== \"\";\n  const locale = isString(options.locale) ? options.locale : context.locale;\n  escapeParameter && escapeParams(options);\n  let [formatScope, targetLocale, message] = !resolvedMessage ? resolveMessageFormat(context, key, locale, fallbackLocale, fallbackWarn, missingWarn) : [\n    key,\n    locale,\n    messages[locale] || {}\n  ];\n  let format2 = formatScope;\n  let cacheBaseKey = key;\n  if (!resolvedMessage && !(isString(format2) || isMessageFunction(format2))) {\n    if (enableDefaultMsg) {\n      format2 = defaultMsgOrKey;\n      cacheBaseKey = format2;\n    }\n  }\n  if (!resolvedMessage && (!(isString(format2) || isMessageFunction(format2)) || !isString(targetLocale))) {\n    return unresolving ? NOT_REOSLVED : key;\n  }\n  if (isString(format2) && context.messageCompiler == null) {\n    warn(`The message format compilation is not supported in this build. Because message compiler isn't included. You need to pre-compilation all message format. So translate function return '${key}'.`);\n    return key;\n  }\n  let occurred = false;\n  const errorDetector = () => {\n    occurred = true;\n  };\n  const msg = !isMessageFunction(format2) ? compileMessageFormat(context, key, targetLocale, format2, cacheBaseKey, errorDetector) : format2;\n  if (occurred) {\n    return format2;\n  }\n  const ctxOptions = getMessageContextOptions(context, targetLocale, message, options);\n  const msgContext = createMessageContext(ctxOptions);\n  const messaged = evaluateMessage(context, msg, msgContext);\n  const ret = postTranslation ? postTranslation(messaged, key) : messaged;\n  if (true) {\n    const payloads = {\n      timestamp: Date.now(),\n      key: isString(key) ? key : isMessageFunction(format2) ? format2.key : \"\",\n      locale: targetLocale || (isMessageFunction(format2) ? format2.locale : \"\"),\n      format: isString(format2) ? format2 : isMessageFunction(format2) ? format2.source : \"\",\n      message: ret\n    };\n    payloads.meta = assign({}, context.__meta, getAdditionalMeta() || {});\n    translateDevTools(payloads);\n  }\n  return ret;\n}\nfunction escapeParams(options) {\n  if (isArray(options.list)) {\n    options.list = options.list.map((item) => isString(item) ? escapeHtml(item) : item);\n  } else if (isObject(options.named)) {\n    Object.keys(options.named).forEach((key) => {\n      if (isString(options.named[key])) {\n        options.named[key] = escapeHtml(options.named[key]);\n      }\n    });\n  }\n}\nfunction resolveMessageFormat(context, key, locale, fallbackLocale, fallbackWarn, missingWarn) {\n  const { messages, onWarn, messageResolver: resolveValue2, localeFallbacker } = context;\n  const locales = localeFallbacker(context, fallbackLocale, locale);\n  let message = {};\n  let targetLocale;\n  let format2 = null;\n  let from = locale;\n  let to = null;\n  const type = \"translate\";\n  for (let i = 0; i < locales.length; i++) {\n    targetLocale = to = locales[i];\n    if (locale !== targetLocale && isTranslateFallbackWarn(fallbackWarn, key)) {\n      onWarn(getWarnMessage(CoreWarnCodes.FALLBACK_TO_TRANSLATE, {\n        key,\n        target: targetLocale\n      }));\n    }\n    if (locale !== targetLocale) {\n      const emitter = context.__v_emitter;\n      if (emitter) {\n        emitter.emit(\"fallback\", {\n          type,\n          key,\n          from,\n          to,\n          groupId: `${type}:${key}`\n        });\n      }\n    }\n    message = messages[targetLocale] || {};\n    let start = null;\n    let startTag;\n    let endTag;\n    if (inBrowser) {\n      start = window.performance.now();\n      startTag = \"intlify-message-resolve-start\";\n      endTag = \"intlify-message-resolve-end\";\n      mark && mark(startTag);\n    }\n    if ((format2 = resolveValue2(message, key)) === null) {\n      format2 = message[key];\n    }\n    if (inBrowser) {\n      const end = window.performance.now();\n      const emitter = context.__v_emitter;\n      if (emitter && start && format2) {\n        emitter.emit(\"message-resolve\", {\n          type: \"message-resolve\",\n          key,\n          message: format2,\n          time: end - start,\n          groupId: `${type}:${key}`\n        });\n      }\n      if (startTag && endTag && mark && measure) {\n        mark(endTag);\n        measure(\"intlify message resolve\", startTag, endTag);\n      }\n    }\n    if (isString(format2) || isFunction(format2))\n      break;\n    const missingRet = handleMissing(\n      context,\n      key,\n      targetLocale,\n      missingWarn,\n      type\n    );\n    if (missingRet !== key) {\n      format2 = missingRet;\n    }\n    from = to;\n  }\n  return [format2, targetLocale, message];\n}\nfunction compileMessageFormat(context, key, targetLocale, format2, cacheBaseKey, errorDetector) {\n  const { messageCompiler, warnHtmlMessage } = context;\n  if (isMessageFunction(format2)) {\n    const msg2 = format2;\n    msg2.locale = msg2.locale || targetLocale;\n    msg2.key = msg2.key || key;\n    return msg2;\n  }\n  if (messageCompiler == null) {\n    const msg2 = () => format2;\n    msg2.locale = targetLocale;\n    msg2.key = key;\n    return msg2;\n  }\n  let start = null;\n  let startTag;\n  let endTag;\n  if (inBrowser) {\n    start = window.performance.now();\n    startTag = \"intlify-message-compilation-start\";\n    endTag = \"intlify-message-compilation-end\";\n    mark && mark(startTag);\n  }\n  const msg = messageCompiler(format2, getCompileOptions(context, targetLocale, cacheBaseKey, format2, warnHtmlMessage, errorDetector));\n  if (inBrowser) {\n    const end = window.performance.now();\n    const emitter = context.__v_emitter;\n    if (emitter && start) {\n      emitter.emit(\"message-compilation\", {\n        type: \"message-compilation\",\n        message: format2,\n        time: end - start,\n        groupId: `${\"translate\"}:${key}`\n      });\n    }\n    if (startTag && endTag && mark && measure) {\n      mark(endTag);\n      measure(\"intlify message compilation\", startTag, endTag);\n    }\n  }\n  msg.locale = targetLocale;\n  msg.key = key;\n  msg.source = format2;\n  return msg;\n}\nfunction evaluateMessage(context, msg, msgCtx) {\n  let start = null;\n  let startTag;\n  let endTag;\n  if (inBrowser) {\n    start = window.performance.now();\n    startTag = \"intlify-message-evaluation-start\";\n    endTag = \"intlify-message-evaluation-end\";\n    mark && mark(startTag);\n  }\n  const messaged = msg(msgCtx);\n  if (inBrowser) {\n    const end = window.performance.now();\n    const emitter = context.__v_emitter;\n    if (emitter && start) {\n      emitter.emit(\"message-evaluation\", {\n        type: \"message-evaluation\",\n        value: messaged,\n        time: end - start,\n        groupId: `${\"translate\"}:${msg.key}`\n      });\n    }\n    if (startTag && endTag && mark && measure) {\n      mark(endTag);\n      measure(\"intlify message evaluation\", startTag, endTag);\n    }\n  }\n  return messaged;\n}\nfunction parseTranslateArgs(...args) {\n  const [arg1, arg2, arg3] = args;\n  const options = {};\n  if (!isString(arg1) && !isNumber(arg1) && !isMessageFunction(arg1)) {\n    throw createCoreError(CoreErrorCodes.INVALID_ARGUMENT);\n  }\n  const key = isNumber(arg1) ? String(arg1) : isMessageFunction(arg1) ? arg1 : arg1;\n  if (isNumber(arg2)) {\n    options.plural = arg2;\n  } else if (isString(arg2)) {\n    options.default = arg2;\n  } else if (isPlainObject(arg2) && !isEmptyObject(arg2)) {\n    options.named = arg2;\n  } else if (isArray(arg2)) {\n    options.list = arg2;\n  }\n  if (isNumber(arg3)) {\n    options.plural = arg3;\n  } else if (isString(arg3)) {\n    options.default = arg3;\n  } else if (isPlainObject(arg3)) {\n    assign(options, arg3);\n  }\n  return [key, options];\n}\nfunction getCompileOptions(context, locale, key, source, warnHtmlMessage, errorDetector) {\n  return {\n    warnHtmlMessage,\n    onError: (err) => {\n      errorDetector && errorDetector(err);\n      if (true) {\n        const message = `Message compilation error: ${err.message}`;\n        const codeFrame = err.location && generateCodeFrame(source, err.location.start.offset, err.location.end.offset);\n        const emitter = context.__v_emitter;\n        if (emitter) {\n          emitter.emit(\"compile-error\", {\n            message: source,\n            error: err.message,\n            start: err.location && err.location.start.offset,\n            end: err.location && err.location.end.offset,\n            groupId: `${\"translate\"}:${key}`\n          });\n        }\n        console.error(codeFrame ? `${message}\n${codeFrame}` : message);\n      } else {\n        throw err;\n      }\n    },\n    onCacheKey: (source2) => generateFormatCacheKey(locale, key, source2)\n  };\n}\nfunction getMessageContextOptions(context, locale, message, options) {\n  const { modifiers, pluralRules, messageResolver: resolveValue2, fallbackLocale, fallbackWarn, missingWarn, fallbackContext } = context;\n  const resolveMessage = (key) => {\n    let val = resolveValue2(message, key);\n    if (val == null && fallbackContext) {\n      const [, , message2] = resolveMessageFormat(fallbackContext, key, locale, fallbackLocale, fallbackWarn, missingWarn);\n      val = resolveValue2(message2, key);\n    }\n    if (isString(val)) {\n      let occurred = false;\n      const errorDetector = () => {\n        occurred = true;\n      };\n      const msg = compileMessageFormat(context, key, locale, val, key, errorDetector);\n      return !occurred ? msg : NOOP_MESSAGE_FUNCTION;\n    } else if (isMessageFunction(val)) {\n      return val;\n    } else {\n      return NOOP_MESSAGE_FUNCTION;\n    }\n  };\n  const ctxOptions = {\n    locale,\n    modifiers,\n    pluralRules,\n    messages: resolveMessage\n  };\n  if (context.processor) {\n    ctxOptions.processor = context.processor;\n  }\n  if (options.list) {\n    ctxOptions.list = options.list;\n  }\n  if (options.named) {\n    ctxOptions.named = options.named;\n  }\n  if (isNumber(options.plural)) {\n    ctxOptions.pluralIndex = options.plural;\n  }\n  return ctxOptions;\n}\nvar intlDefined = typeof Intl !== \"undefined\";\nvar Availabilities = {\n  dateTimeFormat: intlDefined && typeof Intl.DateTimeFormat !== \"undefined\",\n  numberFormat: intlDefined && typeof Intl.NumberFormat !== \"undefined\"\n};\nfunction datetime(context, ...args) {\n  const { datetimeFormats, unresolving, fallbackLocale, onWarn, localeFallbacker } = context;\n  const { __datetimeFormatters } = context;\n  if (!Availabilities.dateTimeFormat) {\n    onWarn(getWarnMessage(CoreWarnCodes.CANNOT_FORMAT_DATE));\n    return MISSING_RESOLVE_VALUE;\n  }\n  const [key, value, options, overrides] = parseDateTimeArgs(...args);\n  const missingWarn = isBoolean(options.missingWarn) ? options.missingWarn : context.missingWarn;\n  const fallbackWarn = isBoolean(options.fallbackWarn) ? options.fallbackWarn : context.fallbackWarn;\n  const part = !!options.part;\n  const locale = isString(options.locale) ? options.locale : context.locale;\n  const locales = localeFallbacker(\n    context,\n    fallbackLocale,\n    locale\n  );\n  if (!isString(key) || key === \"\") {\n    return new Intl.DateTimeFormat(locale, overrides).format(value);\n  }\n  let datetimeFormat = {};\n  let targetLocale;\n  let format2 = null;\n  let from = locale;\n  let to = null;\n  const type = \"datetime format\";\n  for (let i = 0; i < locales.length; i++) {\n    targetLocale = to = locales[i];\n    if (locale !== targetLocale && isTranslateFallbackWarn(fallbackWarn, key)) {\n      onWarn(getWarnMessage(CoreWarnCodes.FALLBACK_TO_DATE_FORMAT, {\n        key,\n        target: targetLocale\n      }));\n    }\n    if (locale !== targetLocale) {\n      const emitter = context.__v_emitter;\n      if (emitter) {\n        emitter.emit(\"fallback\", {\n          type,\n          key,\n          from,\n          to,\n          groupId: `${type}:${key}`\n        });\n      }\n    }\n    datetimeFormat = datetimeFormats[targetLocale] || {};\n    format2 = datetimeFormat[key];\n    if (isPlainObject(format2))\n      break;\n    handleMissing(context, key, targetLocale, missingWarn, type);\n    from = to;\n  }\n  if (!isPlainObject(format2) || !isString(targetLocale)) {\n    return unresolving ? NOT_REOSLVED : key;\n  }\n  let id = `${targetLocale}__${key}`;\n  if (!isEmptyObject(overrides)) {\n    id = `${id}__${JSON.stringify(overrides)}`;\n  }\n  let formatter = __datetimeFormatters.get(id);\n  if (!formatter) {\n    formatter = new Intl.DateTimeFormat(targetLocale, assign({}, format2, overrides));\n    __datetimeFormatters.set(id, formatter);\n  }\n  return !part ? formatter.format(value) : formatter.formatToParts(value);\n}\nvar DATETIME_FORMAT_OPTIONS_KEYS = [\n  \"localeMatcher\",\n  \"weekday\",\n  \"era\",\n  \"year\",\n  \"month\",\n  \"day\",\n  \"hour\",\n  \"minute\",\n  \"second\",\n  \"timeZoneName\",\n  \"formatMatcher\",\n  \"hour12\",\n  \"timeZone\",\n  \"dateStyle\",\n  \"timeStyle\",\n  \"calendar\",\n  \"dayPeriod\",\n  \"numberingSystem\",\n  \"hourCycle\",\n  \"fractionalSecondDigits\"\n];\nfunction parseDateTimeArgs(...args) {\n  const [arg1, arg2, arg3, arg4] = args;\n  const options = {};\n  let overrides = {};\n  let value;\n  if (isString(arg1)) {\n    const matches = arg1.match(/(\\d{4}-\\d{2}-\\d{2})(T|\\s)?(.*)/);\n    if (!matches) {\n      throw createCoreError(CoreErrorCodes.INVALID_ISO_DATE_ARGUMENT);\n    }\n    const dateTime = matches[3] ? matches[3].trim().startsWith(\"T\") ? `${matches[1].trim()}${matches[3].trim()}` : `${matches[1].trim()}T${matches[3].trim()}` : matches[1].trim();\n    value = new Date(dateTime);\n    try {\n      value.toISOString();\n    } catch (e) {\n      throw createCoreError(CoreErrorCodes.INVALID_ISO_DATE_ARGUMENT);\n    }\n  } else if (isDate(arg1)) {\n    if (isNaN(arg1.getTime())) {\n      throw createCoreError(CoreErrorCodes.INVALID_DATE_ARGUMENT);\n    }\n    value = arg1;\n  } else if (isNumber(arg1)) {\n    value = arg1;\n  } else {\n    throw createCoreError(CoreErrorCodes.INVALID_ARGUMENT);\n  }\n  if (isString(arg2)) {\n    options.key = arg2;\n  } else if (isPlainObject(arg2)) {\n    Object.keys(arg2).forEach((key) => {\n      if (DATETIME_FORMAT_OPTIONS_KEYS.includes(key)) {\n        overrides[key] = arg2[key];\n      } else {\n        options[key] = arg2[key];\n      }\n    });\n  }\n  if (isString(arg3)) {\n    options.locale = arg3;\n  } else if (isPlainObject(arg3)) {\n    overrides = arg3;\n  }\n  if (isPlainObject(arg4)) {\n    overrides = arg4;\n  }\n  return [options.key || \"\", value, options, overrides];\n}\nfunction clearDateTimeFormat(ctx, locale, format2) {\n  const context = ctx;\n  for (const key in format2) {\n    const id = `${locale}__${key}`;\n    if (!context.__datetimeFormatters.has(id)) {\n      continue;\n    }\n    context.__datetimeFormatters.delete(id);\n  }\n}\nfunction number(context, ...args) {\n  const { numberFormats, unresolving, fallbackLocale, onWarn, localeFallbacker } = context;\n  const { __numberFormatters } = context;\n  if (!Availabilities.numberFormat) {\n    onWarn(getWarnMessage(CoreWarnCodes.CANNOT_FORMAT_NUMBER));\n    return MISSING_RESOLVE_VALUE;\n  }\n  const [key, value, options, overrides] = parseNumberArgs(...args);\n  const missingWarn = isBoolean(options.missingWarn) ? options.missingWarn : context.missingWarn;\n  const fallbackWarn = isBoolean(options.fallbackWarn) ? options.fallbackWarn : context.fallbackWarn;\n  const part = !!options.part;\n  const locale = isString(options.locale) ? options.locale : context.locale;\n  const locales = localeFallbacker(\n    context,\n    fallbackLocale,\n    locale\n  );\n  if (!isString(key) || key === \"\") {\n    return new Intl.NumberFormat(locale, overrides).format(value);\n  }\n  let numberFormat = {};\n  let targetLocale;\n  let format2 = null;\n  let from = locale;\n  let to = null;\n  const type = \"number format\";\n  for (let i = 0; i < locales.length; i++) {\n    targetLocale = to = locales[i];\n    if (locale !== targetLocale && isTranslateFallbackWarn(fallbackWarn, key)) {\n      onWarn(getWarnMessage(CoreWarnCodes.FALLBACK_TO_NUMBER_FORMAT, {\n        key,\n        target: targetLocale\n      }));\n    }\n    if (locale !== targetLocale) {\n      const emitter = context.__v_emitter;\n      if (emitter) {\n        emitter.emit(\"fallback\", {\n          type,\n          key,\n          from,\n          to,\n          groupId: `${type}:${key}`\n        });\n      }\n    }\n    numberFormat = numberFormats[targetLocale] || {};\n    format2 = numberFormat[key];\n    if (isPlainObject(format2))\n      break;\n    handleMissing(context, key, targetLocale, missingWarn, type);\n    from = to;\n  }\n  if (!isPlainObject(format2) || !isString(targetLocale)) {\n    return unresolving ? NOT_REOSLVED : key;\n  }\n  let id = `${targetLocale}__${key}`;\n  if (!isEmptyObject(overrides)) {\n    id = `${id}__${JSON.stringify(overrides)}`;\n  }\n  let formatter = __numberFormatters.get(id);\n  if (!formatter) {\n    formatter = new Intl.NumberFormat(targetLocale, assign({}, format2, overrides));\n    __numberFormatters.set(id, formatter);\n  }\n  return !part ? formatter.format(value) : formatter.formatToParts(value);\n}\nvar NUMBER_FORMAT_OPTIONS_KEYS = [\n  \"localeMatcher\",\n  \"style\",\n  \"currency\",\n  \"currencyDisplay\",\n  \"currencySign\",\n  \"useGrouping\",\n  \"minimumIntegerDigits\",\n  \"minimumFractionDigits\",\n  \"maximumFractionDigits\",\n  \"minimumSignificantDigits\",\n  \"maximumSignificantDigits\",\n  \"compactDisplay\",\n  \"notation\",\n  \"signDisplay\",\n  \"unit\",\n  \"unitDisplay\",\n  \"roundingMode\",\n  \"roundingPriority\",\n  \"roundingIncrement\",\n  \"trailingZeroDisplay\"\n];\nfunction parseNumberArgs(...args) {\n  const [arg1, arg2, arg3, arg4] = args;\n  const options = {};\n  let overrides = {};\n  if (!isNumber(arg1)) {\n    throw createCoreError(CoreErrorCodes.INVALID_ARGUMENT);\n  }\n  const value = arg1;\n  if (isString(arg2)) {\n    options.key = arg2;\n  } else if (isPlainObject(arg2)) {\n    Object.keys(arg2).forEach((key) => {\n      if (NUMBER_FORMAT_OPTIONS_KEYS.includes(key)) {\n        overrides[key] = arg2[key];\n      } else {\n        options[key] = arg2[key];\n      }\n    });\n  }\n  if (isString(arg3)) {\n    options.locale = arg3;\n  } else if (isPlainObject(arg3)) {\n    overrides = arg3;\n  }\n  if (isPlainObject(arg4)) {\n    overrides = arg4;\n  }\n  return [options.key || \"\", value, options, overrides];\n}\nfunction clearNumberFormat(ctx, locale, format2) {\n  const context = ctx;\n  for (const key in format2) {\n    const id = `${locale}__${key}`;\n    if (!context.__numberFormatters.has(id)) {\n      continue;\n    }\n    context.__numberFormatters.delete(id);\n  }\n}\n{\n  if (typeof __INTLIFY_PROD_DEVTOOLS__ !== \"boolean\") {\n    getGlobalThis().__INTLIFY_PROD_DEVTOOLS__ = false;\n  }\n}\n\n// node_modules/.pnpm/@intlify+vue-devtools@9.2.2/node_modules/@intlify/vue-devtools/dist/vue-devtools.esm-bundler.js\nvar VueDevToolsLabels = {\n  [\"vue-devtools-plugin-vue-i18n\"]: \"Vue I18n devtools\",\n  [\"vue-i18n-resource-inspector\"]: \"I18n Resources\",\n  [\"vue-i18n-timeline\"]: \"Vue I18n\"\n};\nvar VueDevToolsPlaceholders = {\n  [\"vue-i18n-resource-inspector\"]: \"Search for scopes ...\"\n};\nvar VueDevToolsTimelineColors = {\n  [\"vue-i18n-timeline\"]: 16764185\n};\n\n// node_modules/.pnpm/vue-i18n@9.2.2_vue@3.2.39/node_modules/vue-i18n/dist/vue-i18n.esm-bundler.js\nvar VERSION2 = \"9.2.2\";\nfunction initFeatureFlags() {\n  let needWarn = false;\n  if (typeof __VUE_I18N_FULL_INSTALL__ !== \"boolean\") {\n    needWarn = true;\n    getGlobalThis().__VUE_I18N_FULL_INSTALL__ = true;\n  }\n  if (typeof __VUE_I18N_LEGACY_API__ !== \"boolean\") {\n    needWarn = true;\n    getGlobalThis().__VUE_I18N_LEGACY_API__ = true;\n  }\n  if (typeof __INTLIFY_PROD_DEVTOOLS__ !== \"boolean\") {\n    getGlobalThis().__INTLIFY_PROD_DEVTOOLS__ = false;\n  }\n  if (needWarn) {\n    console.warn(`You are running the esm-bundler build of vue-i18n. It is recommended to configure your bundler to explicitly replace feature flag globals with boolean literals to get proper tree-shaking in the final bundle.`);\n  }\n}\nvar code$1 = CoreWarnCodes.__EXTEND_POINT__;\nvar inc$1 = () => ++code$1;\nvar I18nWarnCodes = {\n  FALLBACK_TO_ROOT: code$1,\n  NOT_SUPPORTED_PRESERVE: inc$1(),\n  NOT_SUPPORTED_FORMATTER: inc$1(),\n  NOT_SUPPORTED_PRESERVE_DIRECTIVE: inc$1(),\n  NOT_SUPPORTED_GET_CHOICE_INDEX: inc$1(),\n  COMPONENT_NAME_LEGACY_COMPATIBLE: inc$1(),\n  NOT_FOUND_PARENT_SCOPE: inc$1()\n};\nvar warnMessages2 = {\n  [I18nWarnCodes.FALLBACK_TO_ROOT]: `Fall back to {type} '{key}' with root locale.`,\n  [I18nWarnCodes.NOT_SUPPORTED_PRESERVE]: `Not supported 'preserve'.`,\n  [I18nWarnCodes.NOT_SUPPORTED_FORMATTER]: `Not supported 'formatter'.`,\n  [I18nWarnCodes.NOT_SUPPORTED_PRESERVE_DIRECTIVE]: `Not supported 'preserveDirectiveContent'.`,\n  [I18nWarnCodes.NOT_SUPPORTED_GET_CHOICE_INDEX]: `Not supported 'getChoiceIndex'.`,\n  [I18nWarnCodes.COMPONENT_NAME_LEGACY_COMPATIBLE]: `Component name legacy compatible: '{name}' -> 'i18n'`,\n  [I18nWarnCodes.NOT_FOUND_PARENT_SCOPE]: `Not found parent scope. use the global scope.`\n};\nfunction getWarnMessage2(code3, ...args) {\n  return format(warnMessages2[code3], ...args);\n}\nvar code2 = CompileErrorCodes.__EXTEND_POINT__;\nvar inc2 = () => ++code2;\nvar I18nErrorCodes = {\n  UNEXPECTED_RETURN_TYPE: code2,\n  INVALID_ARGUMENT: inc2(),\n  MUST_BE_CALL_SETUP_TOP: inc2(),\n  NOT_INSLALLED: inc2(),\n  NOT_AVAILABLE_IN_LEGACY_MODE: inc2(),\n  REQUIRED_VALUE: inc2(),\n  INVALID_VALUE: inc2(),\n  CANNOT_SETUP_VUE_DEVTOOLS_PLUGIN: inc2(),\n  NOT_INSLALLED_WITH_PROVIDE: inc2(),\n  UNEXPECTED_ERROR: inc2(),\n  NOT_COMPATIBLE_LEGACY_VUE_I18N: inc2(),\n  BRIDGE_SUPPORT_VUE_2_ONLY: inc2(),\n  MUST_DEFINE_I18N_OPTION_IN_ALLOW_COMPOSITION: inc2(),\n  NOT_AVAILABLE_COMPOSITION_IN_LEGACY: inc2(),\n  __EXTEND_POINT__: inc2()\n};\nfunction createI18nError(code3, ...args) {\n  return createCompileError(code3, null, true ? { messages: errorMessages3, args } : void 0);\n}\nvar errorMessages3 = {\n  [I18nErrorCodes.UNEXPECTED_RETURN_TYPE]: \"Unexpected return type in composer\",\n  [I18nErrorCodes.INVALID_ARGUMENT]: \"Invalid argument\",\n  [I18nErrorCodes.MUST_BE_CALL_SETUP_TOP]: \"Must be called at the top of a `setup` function\",\n  [I18nErrorCodes.NOT_INSLALLED]: \"Need to install with `app.use` function\",\n  [I18nErrorCodes.UNEXPECTED_ERROR]: \"Unexpected error\",\n  [I18nErrorCodes.NOT_AVAILABLE_IN_LEGACY_MODE]: \"Not available in legacy mode\",\n  [I18nErrorCodes.REQUIRED_VALUE]: `Required in value: {0}`,\n  [I18nErrorCodes.INVALID_VALUE]: `Invalid value`,\n  [I18nErrorCodes.CANNOT_SETUP_VUE_DEVTOOLS_PLUGIN]: `Cannot setup vue-devtools plugin`,\n  [I18nErrorCodes.NOT_INSLALLED_WITH_PROVIDE]: \"Need to install with `provide` function\",\n  [I18nErrorCodes.NOT_COMPATIBLE_LEGACY_VUE_I18N]: \"Not compatible legacy VueI18n.\",\n  [I18nErrorCodes.BRIDGE_SUPPORT_VUE_2_ONLY]: \"vue-i18n-bridge support Vue 2.x only\",\n  [I18nErrorCodes.MUST_DEFINE_I18N_OPTION_IN_ALLOW_COMPOSITION]: \"Must define \\u2018i18n\\u2019 option or custom block in Composition API with using local scope in Legacy API mode\",\n  [I18nErrorCodes.NOT_AVAILABLE_COMPOSITION_IN_LEGACY]: \"Not available Compostion API in Legacy API mode. Please make sure that the legacy API mode is working properly\"\n};\nvar TransrateVNodeSymbol = makeSymbol(\"__transrateVNode\");\nvar DatetimePartsSymbol = makeSymbol(\"__datetimeParts\");\nvar NumberPartsSymbol = makeSymbol(\"__numberParts\");\nvar EnableEmitter = makeSymbol(\"__enableEmitter\");\nvar DisableEmitter = makeSymbol(\"__disableEmitter\");\nvar SetPluralRulesSymbol = makeSymbol(\"__setPluralRules\");\nmakeSymbol(\"__intlifyMeta\");\nvar InejctWithOption = makeSymbol(\"__injectWithOption\");\nvar __VUE_I18N_BRIDGE__ = \"__VUE_I18N_BRIDGE__\";\nfunction handleFlatJson(obj) {\n  if (!isObject(obj)) {\n    return obj;\n  }\n  for (const key in obj) {\n    if (!hasOwn(obj, key)) {\n      continue;\n    }\n    if (!key.includes(\".\")) {\n      if (isObject(obj[key])) {\n        handleFlatJson(obj[key]);\n      }\n    } else {\n      const subKeys = key.split(\".\");\n      const lastIndex = subKeys.length - 1;\n      let currentObj = obj;\n      for (let i = 0; i < lastIndex; i++) {\n        if (!(subKeys[i] in currentObj)) {\n          currentObj[subKeys[i]] = {};\n        }\n        currentObj = currentObj[subKeys[i]];\n      }\n      currentObj[subKeys[lastIndex]] = obj[key];\n      delete obj[key];\n      if (isObject(currentObj[subKeys[lastIndex]])) {\n        handleFlatJson(currentObj[subKeys[lastIndex]]);\n      }\n    }\n  }\n  return obj;\n}\nfunction getLocaleMessages(locale, options) {\n  const { messages, __i18n, messageResolver, flatJson } = options;\n  const ret = isPlainObject(messages) ? messages : isArray(__i18n) ? {} : { [locale]: {} };\n  if (isArray(__i18n)) {\n    __i18n.forEach((custom) => {\n      if (\"locale\" in custom && \"resource\" in custom) {\n        const { locale: locale2, resource } = custom;\n        if (locale2) {\n          ret[locale2] = ret[locale2] || {};\n          deepCopy(resource, ret[locale2]);\n        } else {\n          deepCopy(resource, ret);\n        }\n      } else {\n        isString(custom) && deepCopy(JSON.parse(custom), ret);\n      }\n    });\n  }\n  if (messageResolver == null && flatJson) {\n    for (const key in ret) {\n      if (hasOwn(ret, key)) {\n        handleFlatJson(ret[key]);\n      }\n    }\n  }\n  return ret;\n}\nvar isNotObjectOrIsArray = (val) => !isObject(val) || isArray(val);\nfunction deepCopy(src, des) {\n  if (isNotObjectOrIsArray(src) || isNotObjectOrIsArray(des)) {\n    throw createI18nError(I18nErrorCodes.INVALID_VALUE);\n  }\n  for (const key in src) {\n    if (hasOwn(src, key)) {\n      if (isNotObjectOrIsArray(src[key]) || isNotObjectOrIsArray(des[key])) {\n        des[key] = src[key];\n      } else {\n        deepCopy(src[key], des[key]);\n      }\n    }\n  }\n}\nfunction getComponentOptions(instance) {\n  return instance.type;\n}\nfunction adjustI18nResources(global2, options, componentOptions) {\n  let messages = isObject(options.messages) ? options.messages : {};\n  if (\"__i18nGlobal\" in componentOptions) {\n    messages = getLocaleMessages(global2.locale.value, {\n      messages,\n      __i18n: componentOptions.__i18nGlobal\n    });\n  }\n  const locales = Object.keys(messages);\n  if (locales.length) {\n    locales.forEach((locale) => {\n      global2.mergeLocaleMessage(locale, messages[locale]);\n    });\n  }\n  {\n    if (isObject(options.datetimeFormats)) {\n      const locales2 = Object.keys(options.datetimeFormats);\n      if (locales2.length) {\n        locales2.forEach((locale) => {\n          global2.mergeDateTimeFormat(locale, options.datetimeFormats[locale]);\n        });\n      }\n    }\n    if (isObject(options.numberFormats)) {\n      const locales2 = Object.keys(options.numberFormats);\n      if (locales2.length) {\n        locales2.forEach((locale) => {\n          global2.mergeNumberFormat(locale, options.numberFormats[locale]);\n        });\n      }\n    }\n  }\n}\nfunction createTextNode(key) {\n  return createVNode(Text, null, key, 0);\n}\nvar DEVTOOLS_META = \"__INTLIFY_META__\";\nvar composerID = 0;\nfunction defineCoreMissingHandler(missing) {\n  return (ctx, locale, key, type) => {\n    return missing(locale, key, getCurrentInstance() || void 0, type);\n  };\n}\nvar getMetaInfo = () => {\n  const instance = getCurrentInstance();\n  let meta = null;\n  return instance && (meta = getComponentOptions(instance)[DEVTOOLS_META]) ? { [DEVTOOLS_META]: meta } : null;\n};\nfunction createComposer(options = {}, VueI18nLegacy) {\n  const { __root } = options;\n  const _isGlobal = __root === void 0;\n  let _inheritLocale = isBoolean(options.inheritLocale) ? options.inheritLocale : true;\n  const _locale = ref(\n    __root && _inheritLocale ? __root.locale.value : isString(options.locale) ? options.locale : DEFAULT_LOCALE\n  );\n  const _fallbackLocale = ref(\n    __root && _inheritLocale ? __root.fallbackLocale.value : isString(options.fallbackLocale) || isArray(options.fallbackLocale) || isPlainObject(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : _locale.value\n  );\n  const _messages = ref(getLocaleMessages(_locale.value, options));\n  const _datetimeFormats = ref(isPlainObject(options.datetimeFormats) ? options.datetimeFormats : { [_locale.value]: {} });\n  const _numberFormats = ref(isPlainObject(options.numberFormats) ? options.numberFormats : { [_locale.value]: {} });\n  let _missingWarn = __root ? __root.missingWarn : isBoolean(options.missingWarn) || isRegExp(options.missingWarn) ? options.missingWarn : true;\n  let _fallbackWarn = __root ? __root.fallbackWarn : isBoolean(options.fallbackWarn) || isRegExp(options.fallbackWarn) ? options.fallbackWarn : true;\n  let _fallbackRoot = __root ? __root.fallbackRoot : isBoolean(options.fallbackRoot) ? options.fallbackRoot : true;\n  let _fallbackFormat = !!options.fallbackFormat;\n  let _missing = isFunction(options.missing) ? options.missing : null;\n  let _runtimeMissing = isFunction(options.missing) ? defineCoreMissingHandler(options.missing) : null;\n  let _postTranslation = isFunction(options.postTranslation) ? options.postTranslation : null;\n  let _warnHtmlMessage = __root ? __root.warnHtmlMessage : isBoolean(options.warnHtmlMessage) ? options.warnHtmlMessage : true;\n  let _escapeParameter = !!options.escapeParameter;\n  const _modifiers = __root ? __root.modifiers : isPlainObject(options.modifiers) ? options.modifiers : {};\n  let _pluralRules = options.pluralRules || __root && __root.pluralRules;\n  let _context;\n  const getCoreContext = () => {\n    _isGlobal && setFallbackContext(null);\n    const ctxOptions = {\n      version: VERSION2,\n      locale: _locale.value,\n      fallbackLocale: _fallbackLocale.value,\n      messages: _messages.value,\n      modifiers: _modifiers,\n      pluralRules: _pluralRules,\n      missing: _runtimeMissing === null ? void 0 : _runtimeMissing,\n      missingWarn: _missingWarn,\n      fallbackWarn: _fallbackWarn,\n      fallbackFormat: _fallbackFormat,\n      unresolving: true,\n      postTranslation: _postTranslation === null ? void 0 : _postTranslation,\n      warnHtmlMessage: _warnHtmlMessage,\n      escapeParameter: _escapeParameter,\n      messageResolver: options.messageResolver,\n      __meta: { framework: \"vue\" }\n    };\n    {\n      ctxOptions.datetimeFormats = _datetimeFormats.value;\n      ctxOptions.numberFormats = _numberFormats.value;\n      ctxOptions.__datetimeFormatters = isPlainObject(_context) ? _context.__datetimeFormatters : void 0;\n      ctxOptions.__numberFormatters = isPlainObject(_context) ? _context.__numberFormatters : void 0;\n    }\n    if (true) {\n      ctxOptions.__v_emitter = isPlainObject(_context) ? _context.__v_emitter : void 0;\n    }\n    const ctx = createCoreContext(ctxOptions);\n    _isGlobal && setFallbackContext(ctx);\n    return ctx;\n  };\n  _context = getCoreContext();\n  updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);\n  function trackReactivityValues() {\n    return [\n      _locale.value,\n      _fallbackLocale.value,\n      _messages.value,\n      _datetimeFormats.value,\n      _numberFormats.value\n    ];\n  }\n  const locale = computed({\n    get: () => _locale.value,\n    set: (val) => {\n      _locale.value = val;\n      _context.locale = _locale.value;\n    }\n  });\n  const fallbackLocale = computed({\n    get: () => _fallbackLocale.value,\n    set: (val) => {\n      _fallbackLocale.value = val;\n      _context.fallbackLocale = _fallbackLocale.value;\n      updateFallbackLocale(_context, _locale.value, val);\n    }\n  });\n  const messages = computed(() => _messages.value);\n  const datetimeFormats = computed(() => _datetimeFormats.value);\n  const numberFormats = computed(() => _numberFormats.value);\n  function getPostTranslationHandler() {\n    return isFunction(_postTranslation) ? _postTranslation : null;\n  }\n  function setPostTranslationHandler(handler) {\n    _postTranslation = handler;\n    _context.postTranslation = handler;\n  }\n  function getMissingHandler() {\n    return _missing;\n  }\n  function setMissingHandler(handler) {\n    if (handler !== null) {\n      _runtimeMissing = defineCoreMissingHandler(handler);\n    }\n    _missing = handler;\n    _context.missing = _runtimeMissing;\n  }\n  function isResolvedTranslateMessage(type, arg) {\n    return type !== \"translate\" || !arg.resolvedMessage;\n  }\n  const wrapWithDeps = (fn, argumentParser, warnType, fallbackSuccess, fallbackFail, successCondition) => {\n    trackReactivityValues();\n    let ret;\n    if (true) {\n      try {\n        setAdditionalMeta(getMetaInfo());\n        if (!_isGlobal) {\n          _context.fallbackContext = __root ? getFallbackContext() : void 0;\n        }\n        ret = fn(_context);\n      } finally {\n        setAdditionalMeta(null);\n        if (!_isGlobal) {\n          _context.fallbackContext = void 0;\n        }\n      }\n    } else {\n      ret = fn(_context);\n    }\n    if (isNumber(ret) && ret === NOT_REOSLVED) {\n      const [key, arg2] = argumentParser();\n      if (__root && isString(key) && isResolvedTranslateMessage(warnType, arg2)) {\n        if (_fallbackRoot && (isTranslateFallbackWarn(_fallbackWarn, key) || isTranslateMissingWarn(_missingWarn, key))) {\n          warn(getWarnMessage2(I18nWarnCodes.FALLBACK_TO_ROOT, {\n            key,\n            type: warnType\n          }));\n        }\n        if (true) {\n          const { __v_emitter: emitter } = _context;\n          if (emitter && _fallbackRoot) {\n            emitter.emit(\"fallback\", {\n              type: warnType,\n              key,\n              to: \"global\",\n              groupId: `${warnType}:${key}`\n            });\n          }\n        }\n      }\n      return __root && _fallbackRoot ? fallbackSuccess(__root) : fallbackFail(key);\n    } else if (successCondition(ret)) {\n      return ret;\n    } else {\n      throw createI18nError(I18nErrorCodes.UNEXPECTED_RETURN_TYPE);\n    }\n  };\n  function t(...args) {\n    return wrapWithDeps((context) => Reflect.apply(translate, null, [context, ...args]), () => parseTranslateArgs(...args), \"translate\", (root) => Reflect.apply(root.t, root, [...args]), (key) => key, (val) => isString(val));\n  }\n  function rt(...args) {\n    const [arg1, arg2, arg3] = args;\n    if (arg3 && !isObject(arg3)) {\n      throw createI18nError(I18nErrorCodes.INVALID_ARGUMENT);\n    }\n    return t(...[arg1, arg2, assign({ resolvedMessage: true }, arg3 || {})]);\n  }\n  function d(...args) {\n    return wrapWithDeps((context) => Reflect.apply(datetime, null, [context, ...args]), () => parseDateTimeArgs(...args), \"datetime format\", (root) => Reflect.apply(root.d, root, [...args]), () => MISSING_RESOLVE_VALUE, (val) => isString(val));\n  }\n  function n(...args) {\n    return wrapWithDeps((context) => Reflect.apply(number, null, [context, ...args]), () => parseNumberArgs(...args), \"number format\", (root) => Reflect.apply(root.n, root, [...args]), () => MISSING_RESOLVE_VALUE, (val) => isString(val));\n  }\n  function normalize(values) {\n    return values.map((val) => isString(val) || isNumber(val) || isBoolean(val) ? createTextNode(String(val)) : val);\n  }\n  const interpolate = (val) => val;\n  const processor = {\n    normalize,\n    interpolate,\n    type: \"vnode\"\n  };\n  function transrateVNode(...args) {\n    return wrapWithDeps(\n      (context) => {\n        let ret;\n        const _context2 = context;\n        try {\n          _context2.processor = processor;\n          ret = Reflect.apply(translate, null, [_context2, ...args]);\n        } finally {\n          _context2.processor = null;\n        }\n        return ret;\n      },\n      () => parseTranslateArgs(...args),\n      \"translate\",\n      (root) => root[TransrateVNodeSymbol](...args),\n      (key) => [createTextNode(key)],\n      (val) => isArray(val)\n    );\n  }\n  function numberParts(...args) {\n    return wrapWithDeps(\n      (context) => Reflect.apply(number, null, [context, ...args]),\n      () => parseNumberArgs(...args),\n      \"number format\",\n      (root) => root[NumberPartsSymbol](...args),\n      () => [],\n      (val) => isString(val) || isArray(val)\n    );\n  }\n  function datetimeParts(...args) {\n    return wrapWithDeps(\n      (context) => Reflect.apply(datetime, null, [context, ...args]),\n      () => parseDateTimeArgs(...args),\n      \"datetime format\",\n      (root) => root[DatetimePartsSymbol](...args),\n      () => [],\n      (val) => isString(val) || isArray(val)\n    );\n  }\n  function setPluralRules(rules) {\n    _pluralRules = rules;\n    _context.pluralRules = _pluralRules;\n  }\n  function te(key, locale2) {\n    const targetLocale = isString(locale2) ? locale2 : _locale.value;\n    const message = getLocaleMessage(targetLocale);\n    return _context.messageResolver(message, key) !== null;\n  }\n  function resolveMessages(key) {\n    let messages2 = null;\n    const locales = fallbackWithLocaleChain(_context, _fallbackLocale.value, _locale.value);\n    for (let i = 0; i < locales.length; i++) {\n      const targetLocaleMessages = _messages.value[locales[i]] || {};\n      const messageValue = _context.messageResolver(targetLocaleMessages, key);\n      if (messageValue != null) {\n        messages2 = messageValue;\n        break;\n      }\n    }\n    return messages2;\n  }\n  function tm(key) {\n    const messages2 = resolveMessages(key);\n    return messages2 != null ? messages2 : __root ? __root.tm(key) || {} : {};\n  }\n  function getLocaleMessage(locale2) {\n    return _messages.value[locale2] || {};\n  }\n  function setLocaleMessage(locale2, message) {\n    _messages.value[locale2] = message;\n    _context.messages = _messages.value;\n  }\n  function mergeLocaleMessage(locale2, message) {\n    _messages.value[locale2] = _messages.value[locale2] || {};\n    deepCopy(message, _messages.value[locale2]);\n    _context.messages = _messages.value;\n  }\n  function getDateTimeFormat(locale2) {\n    return _datetimeFormats.value[locale2] || {};\n  }\n  function setDateTimeFormat(locale2, format2) {\n    _datetimeFormats.value[locale2] = format2;\n    _context.datetimeFormats = _datetimeFormats.value;\n    clearDateTimeFormat(_context, locale2, format2);\n  }\n  function mergeDateTimeFormat(locale2, format2) {\n    _datetimeFormats.value[locale2] = assign(_datetimeFormats.value[locale2] || {}, format2);\n    _context.datetimeFormats = _datetimeFormats.value;\n    clearDateTimeFormat(_context, locale2, format2);\n  }\n  function getNumberFormat(locale2) {\n    return _numberFormats.value[locale2] || {};\n  }\n  function setNumberFormat(locale2, format2) {\n    _numberFormats.value[locale2] = format2;\n    _context.numberFormats = _numberFormats.value;\n    clearNumberFormat(_context, locale2, format2);\n  }\n  function mergeNumberFormat(locale2, format2) {\n    _numberFormats.value[locale2] = assign(_numberFormats.value[locale2] || {}, format2);\n    _context.numberFormats = _numberFormats.value;\n    clearNumberFormat(_context, locale2, format2);\n  }\n  composerID++;\n  if (__root && inBrowser) {\n    watch(__root.locale, (val) => {\n      if (_inheritLocale) {\n        _locale.value = val;\n        _context.locale = val;\n        updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);\n      }\n    });\n    watch(__root.fallbackLocale, (val) => {\n      if (_inheritLocale) {\n        _fallbackLocale.value = val;\n        _context.fallbackLocale = val;\n        updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);\n      }\n    });\n  }\n  const composer = {\n    id: composerID,\n    locale,\n    fallbackLocale,\n    get inheritLocale() {\n      return _inheritLocale;\n    },\n    set inheritLocale(val) {\n      _inheritLocale = val;\n      if (val && __root) {\n        _locale.value = __root.locale.value;\n        _fallbackLocale.value = __root.fallbackLocale.value;\n        updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);\n      }\n    },\n    get availableLocales() {\n      return Object.keys(_messages.value).sort();\n    },\n    messages,\n    get modifiers() {\n      return _modifiers;\n    },\n    get pluralRules() {\n      return _pluralRules || {};\n    },\n    get isGlobal() {\n      return _isGlobal;\n    },\n    get missingWarn() {\n      return _missingWarn;\n    },\n    set missingWarn(val) {\n      _missingWarn = val;\n      _context.missingWarn = _missingWarn;\n    },\n    get fallbackWarn() {\n      return _fallbackWarn;\n    },\n    set fallbackWarn(val) {\n      _fallbackWarn = val;\n      _context.fallbackWarn = _fallbackWarn;\n    },\n    get fallbackRoot() {\n      return _fallbackRoot;\n    },\n    set fallbackRoot(val) {\n      _fallbackRoot = val;\n    },\n    get fallbackFormat() {\n      return _fallbackFormat;\n    },\n    set fallbackFormat(val) {\n      _fallbackFormat = val;\n      _context.fallbackFormat = _fallbackFormat;\n    },\n    get warnHtmlMessage() {\n      return _warnHtmlMessage;\n    },\n    set warnHtmlMessage(val) {\n      _warnHtmlMessage = val;\n      _context.warnHtmlMessage = val;\n    },\n    get escapeParameter() {\n      return _escapeParameter;\n    },\n    set escapeParameter(val) {\n      _escapeParameter = val;\n      _context.escapeParameter = val;\n    },\n    t,\n    getLocaleMessage,\n    setLocaleMessage,\n    mergeLocaleMessage,\n    getPostTranslationHandler,\n    setPostTranslationHandler,\n    getMissingHandler,\n    setMissingHandler,\n    [SetPluralRulesSymbol]: setPluralRules\n  };\n  {\n    composer.datetimeFormats = datetimeFormats;\n    composer.numberFormats = numberFormats;\n    composer.rt = rt;\n    composer.te = te;\n    composer.tm = tm;\n    composer.d = d;\n    composer.n = n;\n    composer.getDateTimeFormat = getDateTimeFormat;\n    composer.setDateTimeFormat = setDateTimeFormat;\n    composer.mergeDateTimeFormat = mergeDateTimeFormat;\n    composer.getNumberFormat = getNumberFormat;\n    composer.setNumberFormat = setNumberFormat;\n    composer.mergeNumberFormat = mergeNumberFormat;\n    composer[InejctWithOption] = options.__injectWithOption;\n    composer[TransrateVNodeSymbol] = transrateVNode;\n    composer[DatetimePartsSymbol] = datetimeParts;\n    composer[NumberPartsSymbol] = numberParts;\n  }\n  if (true) {\n    composer[EnableEmitter] = (emitter) => {\n      _context.__v_emitter = emitter;\n    };\n    composer[DisableEmitter] = () => {\n      _context.__v_emitter = void 0;\n    };\n  }\n  return composer;\n}\nfunction convertComposerOptions(options) {\n  const locale = isString(options.locale) ? options.locale : DEFAULT_LOCALE;\n  const fallbackLocale = isString(options.fallbackLocale) || isArray(options.fallbackLocale) || isPlainObject(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : locale;\n  const missing = isFunction(options.missing) ? options.missing : void 0;\n  const missingWarn = isBoolean(options.silentTranslationWarn) || isRegExp(options.silentTranslationWarn) ? !options.silentTranslationWarn : true;\n  const fallbackWarn = isBoolean(options.silentFallbackWarn) || isRegExp(options.silentFallbackWarn) ? !options.silentFallbackWarn : true;\n  const fallbackRoot = isBoolean(options.fallbackRoot) ? options.fallbackRoot : true;\n  const fallbackFormat = !!options.formatFallbackMessages;\n  const modifiers = isPlainObject(options.modifiers) ? options.modifiers : {};\n  const pluralizationRules = options.pluralizationRules;\n  const postTranslation = isFunction(options.postTranslation) ? options.postTranslation : void 0;\n  const warnHtmlMessage = isString(options.warnHtmlInMessage) ? options.warnHtmlInMessage !== \"off\" : true;\n  const escapeParameter = !!options.escapeParameterHtml;\n  const inheritLocale = isBoolean(options.sync) ? options.sync : true;\n  if (options.formatter) {\n    warn(getWarnMessage2(I18nWarnCodes.NOT_SUPPORTED_FORMATTER));\n  }\n  if (options.preserveDirectiveContent) {\n    warn(getWarnMessage2(I18nWarnCodes.NOT_SUPPORTED_PRESERVE_DIRECTIVE));\n  }\n  let messages = options.messages;\n  if (isPlainObject(options.sharedMessages)) {\n    const sharedMessages = options.sharedMessages;\n    const locales = Object.keys(sharedMessages);\n    messages = locales.reduce((messages2, locale2) => {\n      const message = messages2[locale2] || (messages2[locale2] = {});\n      assign(message, sharedMessages[locale2]);\n      return messages2;\n    }, messages || {});\n  }\n  const { __i18n, __root, __injectWithOption } = options;\n  const datetimeFormats = options.datetimeFormats;\n  const numberFormats = options.numberFormats;\n  const flatJson = options.flatJson;\n  return {\n    locale,\n    fallbackLocale,\n    messages,\n    flatJson,\n    datetimeFormats,\n    numberFormats,\n    missing,\n    missingWarn,\n    fallbackWarn,\n    fallbackRoot,\n    fallbackFormat,\n    modifiers,\n    pluralRules: pluralizationRules,\n    postTranslation,\n    warnHtmlMessage,\n    escapeParameter,\n    messageResolver: options.messageResolver,\n    inheritLocale,\n    __i18n,\n    __root,\n    __injectWithOption\n  };\n}\nfunction createVueI18n(options = {}, VueI18nLegacy) {\n  {\n    const composer = createComposer(convertComposerOptions(options));\n    const vueI18n = {\n      id: composer.id,\n      get locale() {\n        return composer.locale.value;\n      },\n      set locale(val) {\n        composer.locale.value = val;\n      },\n      get fallbackLocale() {\n        return composer.fallbackLocale.value;\n      },\n      set fallbackLocale(val) {\n        composer.fallbackLocale.value = val;\n      },\n      get messages() {\n        return composer.messages.value;\n      },\n      get datetimeFormats() {\n        return composer.datetimeFormats.value;\n      },\n      get numberFormats() {\n        return composer.numberFormats.value;\n      },\n      get availableLocales() {\n        return composer.availableLocales;\n      },\n      get formatter() {\n        warn(getWarnMessage2(I18nWarnCodes.NOT_SUPPORTED_FORMATTER));\n        return {\n          interpolate() {\n            return [];\n          }\n        };\n      },\n      set formatter(val) {\n        warn(getWarnMessage2(I18nWarnCodes.NOT_SUPPORTED_FORMATTER));\n      },\n      get missing() {\n        return composer.getMissingHandler();\n      },\n      set missing(handler) {\n        composer.setMissingHandler(handler);\n      },\n      get silentTranslationWarn() {\n        return isBoolean(composer.missingWarn) ? !composer.missingWarn : composer.missingWarn;\n      },\n      set silentTranslationWarn(val) {\n        composer.missingWarn = isBoolean(val) ? !val : val;\n      },\n      get silentFallbackWarn() {\n        return isBoolean(composer.fallbackWarn) ? !composer.fallbackWarn : composer.fallbackWarn;\n      },\n      set silentFallbackWarn(val) {\n        composer.fallbackWarn = isBoolean(val) ? !val : val;\n      },\n      get modifiers() {\n        return composer.modifiers;\n      },\n      get formatFallbackMessages() {\n        return composer.fallbackFormat;\n      },\n      set formatFallbackMessages(val) {\n        composer.fallbackFormat = val;\n      },\n      get postTranslation() {\n        return composer.getPostTranslationHandler();\n      },\n      set postTranslation(handler) {\n        composer.setPostTranslationHandler(handler);\n      },\n      get sync() {\n        return composer.inheritLocale;\n      },\n      set sync(val) {\n        composer.inheritLocale = val;\n      },\n      get warnHtmlInMessage() {\n        return composer.warnHtmlMessage ? \"warn\" : \"off\";\n      },\n      set warnHtmlInMessage(val) {\n        composer.warnHtmlMessage = val !== \"off\";\n      },\n      get escapeParameterHtml() {\n        return composer.escapeParameter;\n      },\n      set escapeParameterHtml(val) {\n        composer.escapeParameter = val;\n      },\n      get preserveDirectiveContent() {\n        warn(getWarnMessage2(I18nWarnCodes.NOT_SUPPORTED_PRESERVE_DIRECTIVE));\n        return true;\n      },\n      set preserveDirectiveContent(val) {\n        warn(getWarnMessage2(I18nWarnCodes.NOT_SUPPORTED_PRESERVE_DIRECTIVE));\n      },\n      get pluralizationRules() {\n        return composer.pluralRules || {};\n      },\n      __composer: composer,\n      t(...args) {\n        const [arg1, arg2, arg3] = args;\n        const options2 = {};\n        let list = null;\n        let named = null;\n        if (!isString(arg1)) {\n          throw createI18nError(I18nErrorCodes.INVALID_ARGUMENT);\n        }\n        const key = arg1;\n        if (isString(arg2)) {\n          options2.locale = arg2;\n        } else if (isArray(arg2)) {\n          list = arg2;\n        } else if (isPlainObject(arg2)) {\n          named = arg2;\n        }\n        if (isArray(arg3)) {\n          list = arg3;\n        } else if (isPlainObject(arg3)) {\n          named = arg3;\n        }\n        return Reflect.apply(composer.t, composer, [\n          key,\n          list || named || {},\n          options2\n        ]);\n      },\n      rt(...args) {\n        return Reflect.apply(composer.rt, composer, [...args]);\n      },\n      tc(...args) {\n        const [arg1, arg2, arg3] = args;\n        const options2 = { plural: 1 };\n        let list = null;\n        let named = null;\n        if (!isString(arg1)) {\n          throw createI18nError(I18nErrorCodes.INVALID_ARGUMENT);\n        }\n        const key = arg1;\n        if (isString(arg2)) {\n          options2.locale = arg2;\n        } else if (isNumber(arg2)) {\n          options2.plural = arg2;\n        } else if (isArray(arg2)) {\n          list = arg2;\n        } else if (isPlainObject(arg2)) {\n          named = arg2;\n        }\n        if (isString(arg3)) {\n          options2.locale = arg3;\n        } else if (isArray(arg3)) {\n          list = arg3;\n        } else if (isPlainObject(arg3)) {\n          named = arg3;\n        }\n        return Reflect.apply(composer.t, composer, [\n          key,\n          list || named || {},\n          options2\n        ]);\n      },\n      te(key, locale) {\n        return composer.te(key, locale);\n      },\n      tm(key) {\n        return composer.tm(key);\n      },\n      getLocaleMessage(locale) {\n        return composer.getLocaleMessage(locale);\n      },\n      setLocaleMessage(locale, message) {\n        composer.setLocaleMessage(locale, message);\n      },\n      mergeLocaleMessage(locale, message) {\n        composer.mergeLocaleMessage(locale, message);\n      },\n      d(...args) {\n        return Reflect.apply(composer.d, composer, [...args]);\n      },\n      getDateTimeFormat(locale) {\n        return composer.getDateTimeFormat(locale);\n      },\n      setDateTimeFormat(locale, format2) {\n        composer.setDateTimeFormat(locale, format2);\n      },\n      mergeDateTimeFormat(locale, format2) {\n        composer.mergeDateTimeFormat(locale, format2);\n      },\n      n(...args) {\n        return Reflect.apply(composer.n, composer, [...args]);\n      },\n      getNumberFormat(locale) {\n        return composer.getNumberFormat(locale);\n      },\n      setNumberFormat(locale, format2) {\n        composer.setNumberFormat(locale, format2);\n      },\n      mergeNumberFormat(locale, format2) {\n        composer.mergeNumberFormat(locale, format2);\n      },\n      getChoiceIndex(choice, choicesLength) {\n        warn(getWarnMessage2(I18nWarnCodes.NOT_SUPPORTED_GET_CHOICE_INDEX));\n        return -1;\n      },\n      __onComponentInstanceCreated(target) {\n        const { componentInstanceCreatedListener } = options;\n        if (componentInstanceCreatedListener) {\n          componentInstanceCreatedListener(target, vueI18n);\n        }\n      }\n    };\n    if (true) {\n      vueI18n.__enableEmitter = (emitter) => {\n        const __composer = composer;\n        __composer[EnableEmitter] && __composer[EnableEmitter](emitter);\n      };\n      vueI18n.__disableEmitter = () => {\n        const __composer = composer;\n        __composer[DisableEmitter] && __composer[DisableEmitter]();\n      };\n    }\n    return vueI18n;\n  }\n}\nvar baseFormatProps = {\n  tag: {\n    type: [String, Object]\n  },\n  locale: {\n    type: String\n  },\n  scope: {\n    type: String,\n    validator: (val) => val === \"parent\" || val === \"global\",\n    default: \"parent\"\n  },\n  i18n: {\n    type: Object\n  }\n};\nfunction getInterpolateArg({ slots }, keys) {\n  if (keys.length === 1 && keys[0] === \"default\") {\n    const ret = slots.default ? slots.default() : [];\n    return ret.reduce((slot, current) => {\n      return slot = [\n        ...slot,\n        ...isArray(current.children) ? current.children : [current]\n      ];\n    }, []);\n  } else {\n    return keys.reduce((arg, key) => {\n      const slot = slots[key];\n      if (slot) {\n        arg[key] = slot();\n      }\n      return arg;\n    }, {});\n  }\n}\nfunction getFragmentableTag(tag) {\n  return Fragment;\n}\nvar Translation = {\n  name: \"i18n-t\",\n  props: assign({\n    keypath: {\n      type: String,\n      required: true\n    },\n    plural: {\n      type: [Number, String],\n      validator: (val) => isNumber(val) || !isNaN(val)\n    }\n  }, baseFormatProps),\n  setup(props, context) {\n    const { slots, attrs } = context;\n    const i18n = props.i18n || useI18n({\n      useScope: props.scope,\n      __useComponent: true\n    });\n    return () => {\n      const keys = Object.keys(slots).filter((key) => key !== \"_\");\n      const options = {};\n      if (props.locale) {\n        options.locale = props.locale;\n      }\n      if (props.plural !== void 0) {\n        options.plural = isString(props.plural) ? +props.plural : props.plural;\n      }\n      const arg = getInterpolateArg(context, keys);\n      const children = i18n[TransrateVNodeSymbol](props.keypath, arg, options);\n      const assignedAttrs = assign({}, attrs);\n      const tag = isString(props.tag) || isObject(props.tag) ? props.tag : getFragmentableTag();\n      return h(tag, assignedAttrs, children);\n    };\n  }\n};\nfunction isVNode(target) {\n  return isArray(target) && !isString(target[0]);\n}\nfunction renderFormatter(props, context, slotKeys, partFormatter) {\n  const { slots, attrs } = context;\n  return () => {\n    const options = { part: true };\n    let overrides = {};\n    if (props.locale) {\n      options.locale = props.locale;\n    }\n    if (isString(props.format)) {\n      options.key = props.format;\n    } else if (isObject(props.format)) {\n      if (isString(props.format.key)) {\n        options.key = props.format.key;\n      }\n      overrides = Object.keys(props.format).reduce((options2, prop) => {\n        return slotKeys.includes(prop) ? assign({}, options2, { [prop]: props.format[prop] }) : options2;\n      }, {});\n    }\n    const parts = partFormatter(...[props.value, options, overrides]);\n    let children = [options.key];\n    if (isArray(parts)) {\n      children = parts.map((part, index) => {\n        const slot = slots[part.type];\n        const node = slot ? slot({ [part.type]: part.value, index, parts }) : [part.value];\n        if (isVNode(node)) {\n          node[0].key = `${part.type}-${index}`;\n        }\n        return node;\n      });\n    } else if (isString(parts)) {\n      children = [parts];\n    }\n    const assignedAttrs = assign({}, attrs);\n    const tag = isString(props.tag) || isObject(props.tag) ? props.tag : getFragmentableTag();\n    return h(tag, assignedAttrs, children);\n  };\n}\nvar NumberFormat = {\n  name: \"i18n-n\",\n  props: assign({\n    value: {\n      type: Number,\n      required: true\n    },\n    format: {\n      type: [String, Object]\n    }\n  }, baseFormatProps),\n  setup(props, context) {\n    const i18n = props.i18n || useI18n({ useScope: \"parent\", __useComponent: true });\n    return renderFormatter(props, context, NUMBER_FORMAT_OPTIONS_KEYS, (...args) => i18n[NumberPartsSymbol](...args));\n  }\n};\nvar DatetimeFormat = {\n  name: \"i18n-d\",\n  props: assign({\n    value: {\n      type: [Number, Date],\n      required: true\n    },\n    format: {\n      type: [String, Object]\n    }\n  }, baseFormatProps),\n  setup(props, context) {\n    const i18n = props.i18n || useI18n({ useScope: \"parent\", __useComponent: true });\n    return renderFormatter(props, context, DATETIME_FORMAT_OPTIONS_KEYS, (...args) => i18n[DatetimePartsSymbol](...args));\n  }\n};\nfunction getComposer$2(i18n, instance) {\n  const i18nInternal = i18n;\n  if (i18n.mode === \"composition\") {\n    return i18nInternal.__getInstance(instance) || i18n.global;\n  } else {\n    const vueI18n = i18nInternal.__getInstance(instance);\n    return vueI18n != null ? vueI18n.__composer : i18n.global.__composer;\n  }\n}\nfunction vTDirective(i18n) {\n  const _process = (binding) => {\n    const { instance, modifiers, value } = binding;\n    if (!instance || !instance.$) {\n      throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);\n    }\n    const composer = getComposer$2(i18n, instance.$);\n    if (modifiers.preserve) {\n      warn(getWarnMessage2(I18nWarnCodes.NOT_SUPPORTED_PRESERVE));\n    }\n    const parsedValue = parseValue(value);\n    return [\n      Reflect.apply(composer.t, composer, [...makeParams(parsedValue)]),\n      composer\n    ];\n  };\n  const register = (el, binding) => {\n    const [textContent, composer] = _process(binding);\n    if (inBrowser && i18n.global === composer) {\n      el.__i18nWatcher = watch(composer.locale, () => {\n        binding.instance && binding.instance.$forceUpdate();\n      });\n    }\n    el.__composer = composer;\n    el.textContent = textContent;\n  };\n  const unregister = (el) => {\n    if (inBrowser && el.__i18nWatcher) {\n      el.__i18nWatcher();\n      el.__i18nWatcher = void 0;\n      delete el.__i18nWatcher;\n    }\n    if (el.__composer) {\n      el.__composer = void 0;\n      delete el.__composer;\n    }\n  };\n  const update = (el, { value }) => {\n    if (el.__composer) {\n      const composer = el.__composer;\n      const parsedValue = parseValue(value);\n      el.textContent = Reflect.apply(composer.t, composer, [\n        ...makeParams(parsedValue)\n      ]);\n    }\n  };\n  const getSSRProps = (binding) => {\n    const [textContent] = _process(binding);\n    return { textContent };\n  };\n  return {\n    created: register,\n    unmounted: unregister,\n    beforeUpdate: update,\n    getSSRProps\n  };\n}\nfunction parseValue(value) {\n  if (isString(value)) {\n    return { path: value };\n  } else if (isPlainObject(value)) {\n    if (!(\"path\" in value)) {\n      throw createI18nError(I18nErrorCodes.REQUIRED_VALUE, \"path\");\n    }\n    return value;\n  } else {\n    throw createI18nError(I18nErrorCodes.INVALID_VALUE);\n  }\n}\nfunction makeParams(value) {\n  const { path, locale, args, choice, plural } = value;\n  const options = {};\n  const named = args || {};\n  if (isString(locale)) {\n    options.locale = locale;\n  }\n  if (isNumber(choice)) {\n    options.plural = choice;\n  }\n  if (isNumber(plural)) {\n    options.plural = plural;\n  }\n  return [path, named, options];\n}\nfunction apply(app, i18n, ...options) {\n  const pluginOptions = isPlainObject(options[0]) ? options[0] : {};\n  const useI18nComponentName = !!pluginOptions.useI18nComponentName;\n  const globalInstall = isBoolean(pluginOptions.globalInstall) ? pluginOptions.globalInstall : true;\n  if (globalInstall && useI18nComponentName) {\n    warn(getWarnMessage2(I18nWarnCodes.COMPONENT_NAME_LEGACY_COMPATIBLE, {\n      name: Translation.name\n    }));\n  }\n  if (globalInstall) {\n    app.component(!useI18nComponentName ? Translation.name : \"i18n\", Translation);\n    app.component(NumberFormat.name, NumberFormat);\n    app.component(DatetimeFormat.name, DatetimeFormat);\n  }\n  {\n    app.directive(\"t\", vTDirective(i18n));\n  }\n}\nvar VUE_I18N_COMPONENT_TYPES = \"vue-i18n: composer properties\";\nvar devtoolsApi;\nasync function enableDevTools(app, i18n) {\n  return new Promise((resolve, reject) => {\n    try {\n      setupDevtoolsPlugin({\n        id: \"vue-devtools-plugin-vue-i18n\",\n        label: VueDevToolsLabels[\"vue-devtools-plugin-vue-i18n\"],\n        packageName: \"vue-i18n\",\n        homepage: \"https://vue-i18n.intlify.dev\",\n        logo: \"https://vue-i18n.intlify.dev/vue-i18n-devtools-logo.png\",\n        componentStateTypes: [VUE_I18N_COMPONENT_TYPES],\n        app\n      }, (api) => {\n        devtoolsApi = api;\n        api.on.visitComponentTree(({ componentInstance, treeNode }) => {\n          updateComponentTreeTags(componentInstance, treeNode, i18n);\n        });\n        api.on.inspectComponent(({ componentInstance, instanceData }) => {\n          if (componentInstance.vnode.el && componentInstance.vnode.el.__VUE_I18N__ && instanceData) {\n            if (i18n.mode === \"legacy\") {\n              if (componentInstance.vnode.el.__VUE_I18N__ !== i18n.global.__composer) {\n                inspectComposer(instanceData, componentInstance.vnode.el.__VUE_I18N__);\n              }\n            } else {\n              inspectComposer(instanceData, componentInstance.vnode.el.__VUE_I18N__);\n            }\n          }\n        });\n        api.addInspector({\n          id: \"vue-i18n-resource-inspector\",\n          label: VueDevToolsLabels[\"vue-i18n-resource-inspector\"],\n          icon: \"language\",\n          treeFilterPlaceholder: VueDevToolsPlaceholders[\"vue-i18n-resource-inspector\"]\n        });\n        api.on.getInspectorTree((payload) => {\n          if (payload.app === app && payload.inspectorId === \"vue-i18n-resource-inspector\") {\n            registerScope(payload, i18n);\n          }\n        });\n        const roots = /* @__PURE__ */ new Map();\n        api.on.getInspectorState(async (payload) => {\n          if (payload.app === app && payload.inspectorId === \"vue-i18n-resource-inspector\") {\n            api.unhighlightElement();\n            inspectScope(payload, i18n);\n            if (payload.nodeId === \"global\") {\n              if (!roots.has(payload.app)) {\n                const [root] = await api.getComponentInstances(payload.app);\n                roots.set(payload.app, root);\n              }\n              api.highlightElement(roots.get(payload.app));\n            } else {\n              const instance = getComponentInstance(payload.nodeId, i18n);\n              instance && api.highlightElement(instance);\n            }\n          }\n        });\n        api.on.editInspectorState((payload) => {\n          if (payload.app === app && payload.inspectorId === \"vue-i18n-resource-inspector\") {\n            editScope(payload, i18n);\n          }\n        });\n        api.addTimelineLayer({\n          id: \"vue-i18n-timeline\",\n          label: VueDevToolsLabels[\"vue-i18n-timeline\"],\n          color: VueDevToolsTimelineColors[\"vue-i18n-timeline\"]\n        });\n        resolve(true);\n      });\n    } catch (e) {\n      console.error(e);\n      reject(false);\n    }\n  });\n}\nfunction getI18nScopeLable(instance) {\n  return instance.type.name || instance.type.displayName || instance.type.__file || \"Anonymous\";\n}\nfunction updateComponentTreeTags(instance, treeNode, i18n) {\n  const global2 = i18n.mode === \"composition\" ? i18n.global : i18n.global.__composer;\n  if (instance && instance.vnode.el && instance.vnode.el.__VUE_I18N__) {\n    if (instance.vnode.el.__VUE_I18N__ !== global2) {\n      const tag = {\n        label: `i18n (${getI18nScopeLable(instance)} Scope)`,\n        textColor: 0,\n        backgroundColor: 16764185\n      };\n      treeNode.tags.push(tag);\n    }\n  }\n}\nfunction inspectComposer(instanceData, composer) {\n  const type = VUE_I18N_COMPONENT_TYPES;\n  instanceData.state.push({\n    type,\n    key: \"locale\",\n    editable: true,\n    value: composer.locale.value\n  });\n  instanceData.state.push({\n    type,\n    key: \"availableLocales\",\n    editable: false,\n    value: composer.availableLocales\n  });\n  instanceData.state.push({\n    type,\n    key: \"fallbackLocale\",\n    editable: true,\n    value: composer.fallbackLocale.value\n  });\n  instanceData.state.push({\n    type,\n    key: \"inheritLocale\",\n    editable: true,\n    value: composer.inheritLocale\n  });\n  instanceData.state.push({\n    type,\n    key: \"messages\",\n    editable: false,\n    value: getLocaleMessageValue(composer.messages.value)\n  });\n  {\n    instanceData.state.push({\n      type,\n      key: \"datetimeFormats\",\n      editable: false,\n      value: composer.datetimeFormats.value\n    });\n    instanceData.state.push({\n      type,\n      key: \"numberFormats\",\n      editable: false,\n      value: composer.numberFormats.value\n    });\n  }\n}\nfunction getLocaleMessageValue(messages) {\n  const value = {};\n  Object.keys(messages).forEach((key) => {\n    const v = messages[key];\n    if (isFunction(v) && \"source\" in v) {\n      value[key] = getMessageFunctionDetails(v);\n    } else if (isObject(v)) {\n      value[key] = getLocaleMessageValue(v);\n    } else {\n      value[key] = v;\n    }\n  });\n  return value;\n}\nvar ESC = {\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': \"&quot;\",\n  \"&\": \"&amp;\"\n};\nfunction escape(s) {\n  return s.replace(/[<>\"&]/g, escapeChar);\n}\nfunction escapeChar(a) {\n  return ESC[a] || a;\n}\nfunction getMessageFunctionDetails(func) {\n  const argString = func.source ? `(\"${escape(func.source)}\")` : `(?)`;\n  return {\n    _custom: {\n      type: \"function\",\n      display: `<span>\\u0192</span> ${argString}`\n    }\n  };\n}\nfunction registerScope(payload, i18n) {\n  payload.rootNodes.push({\n    id: \"global\",\n    label: \"Global Scope\"\n  });\n  const global2 = i18n.mode === \"composition\" ? i18n.global : i18n.global.__composer;\n  for (const [keyInstance, instance] of i18n.__instances) {\n    const composer = i18n.mode === \"composition\" ? instance : instance.__composer;\n    if (global2 === composer) {\n      continue;\n    }\n    payload.rootNodes.push({\n      id: composer.id.toString(),\n      label: `${getI18nScopeLable(keyInstance)} Scope`\n    });\n  }\n}\nfunction getComponentInstance(nodeId, i18n) {\n  let instance = null;\n  if (nodeId !== \"global\") {\n    for (const [component, composer] of i18n.__instances.entries()) {\n      if (composer.id.toString() === nodeId) {\n        instance = component;\n        break;\n      }\n    }\n  }\n  return instance;\n}\nfunction getComposer$1(nodeId, i18n) {\n  if (nodeId === \"global\") {\n    return i18n.mode === \"composition\" ? i18n.global : i18n.global.__composer;\n  } else {\n    const instance = Array.from(i18n.__instances.values()).find((item) => item.id.toString() === nodeId);\n    if (instance) {\n      return i18n.mode === \"composition\" ? instance : instance.__composer;\n    } else {\n      return null;\n    }\n  }\n}\nfunction inspectScope(payload, i18n) {\n  const composer = getComposer$1(payload.nodeId, i18n);\n  if (composer) {\n    payload.state = makeScopeInspectState(composer);\n  }\n  return null;\n}\nfunction makeScopeInspectState(composer) {\n  const state = {};\n  const localeType = \"Locale related info\";\n  const localeStates = [\n    {\n      type: localeType,\n      key: \"locale\",\n      editable: true,\n      value: composer.locale.value\n    },\n    {\n      type: localeType,\n      key: \"fallbackLocale\",\n      editable: true,\n      value: composer.fallbackLocale.value\n    },\n    {\n      type: localeType,\n      key: \"availableLocales\",\n      editable: false,\n      value: composer.availableLocales\n    },\n    {\n      type: localeType,\n      key: \"inheritLocale\",\n      editable: true,\n      value: composer.inheritLocale\n    }\n  ];\n  state[localeType] = localeStates;\n  const localeMessagesType = \"Locale messages info\";\n  const localeMessagesStates = [\n    {\n      type: localeMessagesType,\n      key: \"messages\",\n      editable: false,\n      value: getLocaleMessageValue(composer.messages.value)\n    }\n  ];\n  state[localeMessagesType] = localeMessagesStates;\n  {\n    const datetimeFormatsType = \"Datetime formats info\";\n    const datetimeFormatsStates = [\n      {\n        type: datetimeFormatsType,\n        key: \"datetimeFormats\",\n        editable: false,\n        value: composer.datetimeFormats.value\n      }\n    ];\n    state[datetimeFormatsType] = datetimeFormatsStates;\n    const numberFormatsType = \"Datetime formats info\";\n    const numberFormatsStates = [\n      {\n        type: numberFormatsType,\n        key: \"numberFormats\",\n        editable: false,\n        value: composer.numberFormats.value\n      }\n    ];\n    state[numberFormatsType] = numberFormatsStates;\n  }\n  return state;\n}\nfunction addTimelineEvent(event, payload) {\n  if (devtoolsApi) {\n    let groupId;\n    if (payload && \"groupId\" in payload) {\n      groupId = payload.groupId;\n      delete payload.groupId;\n    }\n    devtoolsApi.addTimelineEvent({\n      layerId: \"vue-i18n-timeline\",\n      event: {\n        title: event,\n        groupId,\n        time: Date.now(),\n        meta: {},\n        data: payload || {},\n        logType: event === \"compile-error\" ? \"error\" : event === \"fallback\" || event === \"missing\" ? \"warning\" : \"default\"\n      }\n    });\n  }\n}\nfunction editScope(payload, i18n) {\n  const composer = getComposer$1(payload.nodeId, i18n);\n  if (composer) {\n    const [field] = payload.path;\n    if (field === \"locale\" && isString(payload.state.value)) {\n      composer.locale.value = payload.state.value;\n    } else if (field === \"fallbackLocale\" && (isString(payload.state.value) || isArray(payload.state.value) || isObject(payload.state.value))) {\n      composer.fallbackLocale.value = payload.state.value;\n    } else if (field === \"inheritLocale\" && isBoolean(payload.state.value)) {\n      composer.inheritLocale = payload.state.value;\n    }\n  }\n}\nfunction defineMixin(vuei18n, composer, i18n) {\n  return {\n    beforeCreate() {\n      const instance = getCurrentInstance();\n      if (!instance) {\n        throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);\n      }\n      const options = this.$options;\n      if (options.i18n) {\n        const optionsI18n = options.i18n;\n        if (options.__i18n) {\n          optionsI18n.__i18n = options.__i18n;\n        }\n        optionsI18n.__root = composer;\n        if (this === this.$root) {\n          this.$i18n = mergeToRoot(vuei18n, optionsI18n);\n        } else {\n          optionsI18n.__injectWithOption = true;\n          this.$i18n = createVueI18n(optionsI18n);\n        }\n      } else if (options.__i18n) {\n        if (this === this.$root) {\n          this.$i18n = mergeToRoot(vuei18n, options);\n        } else {\n          this.$i18n = createVueI18n({\n            __i18n: options.__i18n,\n            __injectWithOption: true,\n            __root: composer\n          });\n        }\n      } else {\n        this.$i18n = vuei18n;\n      }\n      if (options.__i18nGlobal) {\n        adjustI18nResources(composer, options, options);\n      }\n      vuei18n.__onComponentInstanceCreated(this.$i18n);\n      i18n.__setInstance(instance, this.$i18n);\n      this.$t = (...args) => this.$i18n.t(...args);\n      this.$rt = (...args) => this.$i18n.rt(...args);\n      this.$tc = (...args) => this.$i18n.tc(...args);\n      this.$te = (key, locale) => this.$i18n.te(key, locale);\n      this.$d = (...args) => this.$i18n.d(...args);\n      this.$n = (...args) => this.$i18n.n(...args);\n      this.$tm = (key) => this.$i18n.tm(key);\n    },\n    mounted() {\n      if (this.$el && this.$i18n) {\n        this.$el.__VUE_I18N__ = this.$i18n.__composer;\n        const emitter = this.__v_emitter = createEmitter();\n        const _vueI18n = this.$i18n;\n        _vueI18n.__enableEmitter && _vueI18n.__enableEmitter(emitter);\n        emitter.on(\"*\", addTimelineEvent);\n      }\n    },\n    unmounted() {\n      const instance = getCurrentInstance();\n      if (!instance) {\n        throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);\n      }\n      if (this.$el && this.$el.__VUE_I18N__) {\n        if (this.__v_emitter) {\n          this.__v_emitter.off(\"*\", addTimelineEvent);\n          delete this.__v_emitter;\n        }\n        if (this.$i18n) {\n          const _vueI18n = this.$i18n;\n          _vueI18n.__disableEmitter && _vueI18n.__disableEmitter();\n          delete this.$el.__VUE_I18N__;\n        }\n      }\n      delete this.$t;\n      delete this.$rt;\n      delete this.$tc;\n      delete this.$te;\n      delete this.$d;\n      delete this.$n;\n      delete this.$tm;\n      i18n.__deleteInstance(instance);\n      delete this.$i18n;\n    }\n  };\n}\nfunction mergeToRoot(root, options) {\n  root.locale = options.locale || root.locale;\n  root.fallbackLocale = options.fallbackLocale || root.fallbackLocale;\n  root.missing = options.missing || root.missing;\n  root.silentTranslationWarn = options.silentTranslationWarn || root.silentFallbackWarn;\n  root.silentFallbackWarn = options.silentFallbackWarn || root.silentFallbackWarn;\n  root.formatFallbackMessages = options.formatFallbackMessages || root.formatFallbackMessages;\n  root.postTranslation = options.postTranslation || root.postTranslation;\n  root.warnHtmlInMessage = options.warnHtmlInMessage || root.warnHtmlInMessage;\n  root.escapeParameterHtml = options.escapeParameterHtml || root.escapeParameterHtml;\n  root.sync = options.sync || root.sync;\n  root.__composer[SetPluralRulesSymbol](options.pluralizationRules || root.pluralizationRules);\n  const messages = getLocaleMessages(root.locale, {\n    messages: options.messages,\n    __i18n: options.__i18n\n  });\n  Object.keys(messages).forEach((locale) => root.mergeLocaleMessage(locale, messages[locale]));\n  if (options.datetimeFormats) {\n    Object.keys(options.datetimeFormats).forEach((locale) => root.mergeDateTimeFormat(locale, options.datetimeFormats[locale]));\n  }\n  if (options.numberFormats) {\n    Object.keys(options.numberFormats).forEach((locale) => root.mergeNumberFormat(locale, options.numberFormats[locale]));\n  }\n  return root;\n}\nvar I18nInjectionKey = makeSymbol(\"global-vue-i18n\");\nfunction createI18n(options = {}, VueI18nLegacy) {\n  const __legacyMode = __VUE_I18N_LEGACY_API__ && isBoolean(options.legacy) ? options.legacy : __VUE_I18N_LEGACY_API__;\n  const __globalInjection = isBoolean(options.globalInjection) ? options.globalInjection : true;\n  const __allowComposition = __VUE_I18N_LEGACY_API__ && __legacyMode ? !!options.allowComposition : true;\n  const __instances = /* @__PURE__ */ new Map();\n  const [globalScope, __global] = createGlobal(options, __legacyMode);\n  const symbol = makeSymbol(true ? \"vue-i18n\" : \"\");\n  function __getInstance(component) {\n    return __instances.get(component) || null;\n  }\n  function __setInstance(component, instance) {\n    __instances.set(component, instance);\n  }\n  function __deleteInstance(component) {\n    __instances.delete(component);\n  }\n  {\n    const i18n = {\n      get mode() {\n        return __VUE_I18N_LEGACY_API__ && __legacyMode ? \"legacy\" : \"composition\";\n      },\n      get allowComposition() {\n        return __allowComposition;\n      },\n      async install(app, ...options2) {\n        if (true) {\n          app.__VUE_I18N__ = i18n;\n        }\n        app.__VUE_I18N_SYMBOL__ = symbol;\n        app.provide(app.__VUE_I18N_SYMBOL__, i18n);\n        if (!__legacyMode && __globalInjection) {\n          injectGlobalFields(app, i18n.global);\n        }\n        if (__VUE_I18N_FULL_INSTALL__) {\n          apply(app, i18n, ...options2);\n        }\n        if (__VUE_I18N_LEGACY_API__ && __legacyMode) {\n          app.mixin(defineMixin(__global, __global.__composer, i18n));\n        }\n        const unmountApp = app.unmount;\n        app.unmount = () => {\n          i18n.dispose();\n          unmountApp();\n        };\n        if (true) {\n          const ret = await enableDevTools(app, i18n);\n          if (!ret) {\n            throw createI18nError(I18nErrorCodes.CANNOT_SETUP_VUE_DEVTOOLS_PLUGIN);\n          }\n          const emitter = createEmitter();\n          if (__legacyMode) {\n            const _vueI18n = __global;\n            _vueI18n.__enableEmitter && _vueI18n.__enableEmitter(emitter);\n          } else {\n            const _composer = __global;\n            _composer[EnableEmitter] && _composer[EnableEmitter](emitter);\n          }\n          emitter.on(\"*\", addTimelineEvent);\n        }\n      },\n      get global() {\n        return __global;\n      },\n      dispose() {\n        globalScope.stop();\n      },\n      __instances,\n      __getInstance,\n      __setInstance,\n      __deleteInstance\n    };\n    return i18n;\n  }\n}\nfunction useI18n(options = {}) {\n  const instance = getCurrentInstance();\n  if (instance == null) {\n    throw createI18nError(I18nErrorCodes.MUST_BE_CALL_SETUP_TOP);\n  }\n  if (!instance.isCE && instance.appContext.app != null && !instance.appContext.app.__VUE_I18N_SYMBOL__) {\n    throw createI18nError(I18nErrorCodes.NOT_INSLALLED);\n  }\n  const i18n = getI18nInstance(instance);\n  const global2 = getGlobalComposer(i18n);\n  const componentOptions = getComponentOptions(instance);\n  const scope = getScope(options, componentOptions);\n  if (__VUE_I18N_LEGACY_API__) {\n    if (i18n.mode === \"legacy\" && !options.__useComponent) {\n      if (!i18n.allowComposition) {\n        throw createI18nError(I18nErrorCodes.NOT_AVAILABLE_IN_LEGACY_MODE);\n      }\n      return useI18nForLegacy(instance, scope, global2, options);\n    }\n  }\n  if (scope === \"global\") {\n    adjustI18nResources(global2, options, componentOptions);\n    return global2;\n  }\n  if (scope === \"parent\") {\n    let composer2 = getComposer(i18n, instance, options.__useComponent);\n    if (composer2 == null) {\n      if (true) {\n        warn(getWarnMessage2(I18nWarnCodes.NOT_FOUND_PARENT_SCOPE));\n      }\n      composer2 = global2;\n    }\n    return composer2;\n  }\n  const i18nInternal = i18n;\n  let composer = i18nInternal.__getInstance(instance);\n  if (composer == null) {\n    const composerOptions = assign({}, options);\n    if (\"__i18n\" in componentOptions) {\n      composerOptions.__i18n = componentOptions.__i18n;\n    }\n    if (global2) {\n      composerOptions.__root = global2;\n    }\n    composer = createComposer(composerOptions);\n    setupLifeCycle(i18nInternal, instance, composer);\n    i18nInternal.__setInstance(instance, composer);\n  }\n  return composer;\n}\nvar castToVueI18n = (i18n) => {\n  if (!(__VUE_I18N_BRIDGE__ in i18n)) {\n    throw createI18nError(I18nErrorCodes.NOT_COMPATIBLE_LEGACY_VUE_I18N);\n  }\n  return i18n;\n};\nfunction createGlobal(options, legacyMode, VueI18nLegacy) {\n  const scope = effectScope();\n  {\n    const obj = __VUE_I18N_LEGACY_API__ && legacyMode ? scope.run(() => createVueI18n(options)) : scope.run(() => createComposer(options));\n    if (obj == null) {\n      throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);\n    }\n    return [scope, obj];\n  }\n}\nfunction getI18nInstance(instance) {\n  {\n    const i18n = inject(!instance.isCE ? instance.appContext.app.__VUE_I18N_SYMBOL__ : I18nInjectionKey);\n    if (!i18n) {\n      throw createI18nError(!instance.isCE ? I18nErrorCodes.UNEXPECTED_ERROR : I18nErrorCodes.NOT_INSLALLED_WITH_PROVIDE);\n    }\n    return i18n;\n  }\n}\nfunction getScope(options, componentOptions) {\n  return isEmptyObject(options) ? \"__i18n\" in componentOptions ? \"local\" : \"global\" : !options.useScope ? \"local\" : options.useScope;\n}\nfunction getGlobalComposer(i18n) {\n  return i18n.mode === \"composition\" ? i18n.global : i18n.global.__composer;\n}\nfunction getComposer(i18n, target, useComponent = false) {\n  let composer = null;\n  const root = target.root;\n  let current = target.parent;\n  while (current != null) {\n    const i18nInternal = i18n;\n    if (i18n.mode === \"composition\") {\n      composer = i18nInternal.__getInstance(current);\n    } else {\n      if (__VUE_I18N_LEGACY_API__) {\n        const vueI18n = i18nInternal.__getInstance(current);\n        if (vueI18n != null) {\n          composer = vueI18n.__composer;\n          if (useComponent && composer && !composer[InejctWithOption]) {\n            composer = null;\n          }\n        }\n      }\n    }\n    if (composer != null) {\n      break;\n    }\n    if (root === current) {\n      break;\n    }\n    current = current.parent;\n  }\n  return composer;\n}\nfunction setupLifeCycle(i18n, target, composer) {\n  let emitter = null;\n  {\n    onMounted(() => {\n      if (target.vnode.el) {\n        target.vnode.el.__VUE_I18N__ = composer;\n        emitter = createEmitter();\n        const _composer = composer;\n        _composer[EnableEmitter] && _composer[EnableEmitter](emitter);\n        emitter.on(\"*\", addTimelineEvent);\n      }\n    }, target);\n    onUnmounted(() => {\n      if (target.vnode.el && target.vnode.el.__VUE_I18N__) {\n        emitter && emitter.off(\"*\", addTimelineEvent);\n        const _composer = composer;\n        _composer[DisableEmitter] && _composer[DisableEmitter]();\n        delete target.vnode.el.__VUE_I18N__;\n      }\n      i18n.__deleteInstance(target);\n    }, target);\n  }\n}\nfunction useI18nForLegacy(instance, scope, root, options = {}) {\n  const isLocale = scope === \"local\";\n  const _composer = shallowRef(null);\n  if (isLocale && instance.proxy && !(instance.proxy.$options.i18n || instance.proxy.$options.__i18n)) {\n    throw createI18nError(I18nErrorCodes.MUST_DEFINE_I18N_OPTION_IN_ALLOW_COMPOSITION);\n  }\n  const _inheritLocale = isBoolean(options.inheritLocale) ? options.inheritLocale : true;\n  const _locale = ref(\n    isLocale && _inheritLocale ? root.locale.value : isString(options.locale) ? options.locale : DEFAULT_LOCALE\n  );\n  const _fallbackLocale = ref(\n    isLocale && _inheritLocale ? root.fallbackLocale.value : isString(options.fallbackLocale) || isArray(options.fallbackLocale) || isPlainObject(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : _locale.value\n  );\n  const _messages = ref(getLocaleMessages(_locale.value, options));\n  const _datetimeFormats = ref(isPlainObject(options.datetimeFormats) ? options.datetimeFormats : { [_locale.value]: {} });\n  const _numberFormats = ref(isPlainObject(options.numberFormats) ? options.numberFormats : { [_locale.value]: {} });\n  const _missingWarn = isLocale ? root.missingWarn : isBoolean(options.missingWarn) || isRegExp(options.missingWarn) ? options.missingWarn : true;\n  const _fallbackWarn = isLocale ? root.fallbackWarn : isBoolean(options.fallbackWarn) || isRegExp(options.fallbackWarn) ? options.fallbackWarn : true;\n  const _fallbackRoot = isLocale ? root.fallbackRoot : isBoolean(options.fallbackRoot) ? options.fallbackRoot : true;\n  const _fallbackFormat = !!options.fallbackFormat;\n  const _missing = isFunction(options.missing) ? options.missing : null;\n  const _postTranslation = isFunction(options.postTranslation) ? options.postTranslation : null;\n  const _warnHtmlMessage = isLocale ? root.warnHtmlMessage : isBoolean(options.warnHtmlMessage) ? options.warnHtmlMessage : true;\n  const _escapeParameter = !!options.escapeParameter;\n  const _modifiers = isLocale ? root.modifiers : isPlainObject(options.modifiers) ? options.modifiers : {};\n  const _pluralRules = options.pluralRules || isLocale && root.pluralRules;\n  function trackReactivityValues() {\n    return [\n      _locale.value,\n      _fallbackLocale.value,\n      _messages.value,\n      _datetimeFormats.value,\n      _numberFormats.value\n    ];\n  }\n  const locale = computed({\n    get: () => {\n      return _composer.value ? _composer.value.locale.value : _locale.value;\n    },\n    set: (val) => {\n      if (_composer.value) {\n        _composer.value.locale.value = val;\n      }\n      _locale.value = val;\n    }\n  });\n  const fallbackLocale = computed({\n    get: () => {\n      return _composer.value ? _composer.value.fallbackLocale.value : _fallbackLocale.value;\n    },\n    set: (val) => {\n      if (_composer.value) {\n        _composer.value.fallbackLocale.value = val;\n      }\n      _fallbackLocale.value = val;\n    }\n  });\n  const messages = computed(() => {\n    if (_composer.value) {\n      return _composer.value.messages.value;\n    } else {\n      return _messages.value;\n    }\n  });\n  const datetimeFormats = computed(() => _datetimeFormats.value);\n  const numberFormats = computed(() => _numberFormats.value);\n  function getPostTranslationHandler() {\n    return _composer.value ? _composer.value.getPostTranslationHandler() : _postTranslation;\n  }\n  function setPostTranslationHandler(handler) {\n    if (_composer.value) {\n      _composer.value.setPostTranslationHandler(handler);\n    }\n  }\n  function getMissingHandler() {\n    return _composer.value ? _composer.value.getMissingHandler() : _missing;\n  }\n  function setMissingHandler(handler) {\n    if (_composer.value) {\n      _composer.value.setMissingHandler(handler);\n    }\n  }\n  function warpWithDeps(fn) {\n    trackReactivityValues();\n    return fn();\n  }\n  function t(...args) {\n    return _composer.value ? warpWithDeps(() => Reflect.apply(_composer.value.t, null, [...args])) : warpWithDeps(() => \"\");\n  }\n  function rt(...args) {\n    return _composer.value ? Reflect.apply(_composer.value.rt, null, [...args]) : \"\";\n  }\n  function d(...args) {\n    return _composer.value ? warpWithDeps(() => Reflect.apply(_composer.value.d, null, [...args])) : warpWithDeps(() => \"\");\n  }\n  function n(...args) {\n    return _composer.value ? warpWithDeps(() => Reflect.apply(_composer.value.n, null, [...args])) : warpWithDeps(() => \"\");\n  }\n  function tm(key) {\n    return _composer.value ? _composer.value.tm(key) : {};\n  }\n  function te(key, locale2) {\n    return _composer.value ? _composer.value.te(key, locale2) : false;\n  }\n  function getLocaleMessage(locale2) {\n    return _composer.value ? _composer.value.getLocaleMessage(locale2) : {};\n  }\n  function setLocaleMessage(locale2, message) {\n    if (_composer.value) {\n      _composer.value.setLocaleMessage(locale2, message);\n      _messages.value[locale2] = message;\n    }\n  }\n  function mergeLocaleMessage(locale2, message) {\n    if (_composer.value) {\n      _composer.value.mergeLocaleMessage(locale2, message);\n    }\n  }\n  function getDateTimeFormat(locale2) {\n    return _composer.value ? _composer.value.getDateTimeFormat(locale2) : {};\n  }\n  function setDateTimeFormat(locale2, format2) {\n    if (_composer.value) {\n      _composer.value.setDateTimeFormat(locale2, format2);\n      _datetimeFormats.value[locale2] = format2;\n    }\n  }\n  function mergeDateTimeFormat(locale2, format2) {\n    if (_composer.value) {\n      _composer.value.mergeDateTimeFormat(locale2, format2);\n    }\n  }\n  function getNumberFormat(locale2) {\n    return _composer.value ? _composer.value.getNumberFormat(locale2) : {};\n  }\n  function setNumberFormat(locale2, format2) {\n    if (_composer.value) {\n      _composer.value.setNumberFormat(locale2, format2);\n      _numberFormats.value[locale2] = format2;\n    }\n  }\n  function mergeNumberFormat(locale2, format2) {\n    if (_composer.value) {\n      _composer.value.mergeNumberFormat(locale2, format2);\n    }\n  }\n  const wrapper = {\n    get id() {\n      return _composer.value ? _composer.value.id : -1;\n    },\n    locale,\n    fallbackLocale,\n    messages,\n    datetimeFormats,\n    numberFormats,\n    get inheritLocale() {\n      return _composer.value ? _composer.value.inheritLocale : _inheritLocale;\n    },\n    set inheritLocale(val) {\n      if (_composer.value) {\n        _composer.value.inheritLocale = val;\n      }\n    },\n    get availableLocales() {\n      return _composer.value ? _composer.value.availableLocales : Object.keys(_messages.value);\n    },\n    get modifiers() {\n      return _composer.value ? _composer.value.modifiers : _modifiers;\n    },\n    get pluralRules() {\n      return _composer.value ? _composer.value.pluralRules : _pluralRules;\n    },\n    get isGlobal() {\n      return _composer.value ? _composer.value.isGlobal : false;\n    },\n    get missingWarn() {\n      return _composer.value ? _composer.value.missingWarn : _missingWarn;\n    },\n    set missingWarn(val) {\n      if (_composer.value) {\n        _composer.value.missingWarn = val;\n      }\n    },\n    get fallbackWarn() {\n      return _composer.value ? _composer.value.fallbackWarn : _fallbackWarn;\n    },\n    set fallbackWarn(val) {\n      if (_composer.value) {\n        _composer.value.missingWarn = val;\n      }\n    },\n    get fallbackRoot() {\n      return _composer.value ? _composer.value.fallbackRoot : _fallbackRoot;\n    },\n    set fallbackRoot(val) {\n      if (_composer.value) {\n        _composer.value.fallbackRoot = val;\n      }\n    },\n    get fallbackFormat() {\n      return _composer.value ? _composer.value.fallbackFormat : _fallbackFormat;\n    },\n    set fallbackFormat(val) {\n      if (_composer.value) {\n        _composer.value.fallbackFormat = val;\n      }\n    },\n    get warnHtmlMessage() {\n      return _composer.value ? _composer.value.warnHtmlMessage : _warnHtmlMessage;\n    },\n    set warnHtmlMessage(val) {\n      if (_composer.value) {\n        _composer.value.warnHtmlMessage = val;\n      }\n    },\n    get escapeParameter() {\n      return _composer.value ? _composer.value.escapeParameter : _escapeParameter;\n    },\n    set escapeParameter(val) {\n      if (_composer.value) {\n        _composer.value.escapeParameter = val;\n      }\n    },\n    t,\n    getPostTranslationHandler,\n    setPostTranslationHandler,\n    getMissingHandler,\n    setMissingHandler,\n    rt,\n    d,\n    n,\n    tm,\n    te,\n    getLocaleMessage,\n    setLocaleMessage,\n    mergeLocaleMessage,\n    getDateTimeFormat,\n    setDateTimeFormat,\n    mergeDateTimeFormat,\n    getNumberFormat,\n    setNumberFormat,\n    mergeNumberFormat\n  };\n  function sync(composer) {\n    composer.locale.value = _locale.value;\n    composer.fallbackLocale.value = _fallbackLocale.value;\n    Object.keys(_messages.value).forEach((locale2) => {\n      composer.mergeLocaleMessage(locale2, _messages.value[locale2]);\n    });\n    Object.keys(_datetimeFormats.value).forEach((locale2) => {\n      composer.mergeDateTimeFormat(locale2, _datetimeFormats.value[locale2]);\n    });\n    Object.keys(_numberFormats.value).forEach((locale2) => {\n      composer.mergeNumberFormat(locale2, _numberFormats.value[locale2]);\n    });\n    composer.escapeParameter = _escapeParameter;\n    composer.fallbackFormat = _fallbackFormat;\n    composer.fallbackRoot = _fallbackRoot;\n    composer.fallbackWarn = _fallbackWarn;\n    composer.missingWarn = _missingWarn;\n    composer.warnHtmlMessage = _warnHtmlMessage;\n  }\n  onBeforeMount(() => {\n    if (instance.proxy == null || instance.proxy.$i18n == null) {\n      throw createI18nError(I18nErrorCodes.NOT_AVAILABLE_COMPOSITION_IN_LEGACY);\n    }\n    const composer = _composer.value = instance.proxy.$i18n.__composer;\n    if (scope === \"global\") {\n      _locale.value = composer.locale.value;\n      _fallbackLocale.value = composer.fallbackLocale.value;\n      _messages.value = composer.messages.value;\n      _datetimeFormats.value = composer.datetimeFormats.value;\n      _numberFormats.value = composer.numberFormats.value;\n    } else if (isLocale) {\n      sync(composer);\n    }\n  });\n  return wrapper;\n}\nvar globalExportProps = [\n  \"locale\",\n  \"fallbackLocale\",\n  \"availableLocales\"\n];\nvar globalExportMethods = [\"t\", \"rt\", \"d\", \"n\", \"tm\"];\nfunction injectGlobalFields(app, composer) {\n  const i18n = /* @__PURE__ */ Object.create(null);\n  globalExportProps.forEach((prop) => {\n    const desc = Object.getOwnPropertyDescriptor(composer, prop);\n    if (!desc) {\n      throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);\n    }\n    const wrap = isRef(desc.value) ? {\n      get() {\n        return desc.value.value;\n      },\n      set(val) {\n        desc.value.value = val;\n      }\n    } : {\n      get() {\n        return desc.get && desc.get();\n      }\n    };\n    Object.defineProperty(i18n, prop, wrap);\n  });\n  app.config.globalProperties.$i18n = i18n;\n  globalExportMethods.forEach((method) => {\n    const desc = Object.getOwnPropertyDescriptor(composer, method);\n    if (!desc || !desc.value) {\n      throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);\n    }\n    Object.defineProperty(app.config.globalProperties, `$${method}`, desc);\n  });\n}\nregisterMessageCompiler(compileToFunction);\nregisterMessageResolver(resolveValue);\nregisterLocaleFallbacker(fallbackWithLocaleChain);\n{\n  initFeatureFlags();\n}\nif (true) {\n  const target = getGlobalThis();\n  target.__INTLIFY__ = true;\n  setDevToolsHook(target.__INTLIFY_DEVTOOLS_GLOBAL_HOOK__);\n}\nif (true)\n  ;\nexport {\n  DatetimeFormat,\n  I18nInjectionKey,\n  NumberFormat,\n  Translation,\n  VERSION2 as VERSION,\n  castToVueI18n,\n  createI18n,\n  useI18n,\n  vTDirective\n};\n/*!\n  * core-base v9.2.2\n  * (c) 2022 kazuya kawaguchi\n  * Released under the MIT License.\n  */\n/*!\n  * devtools-if v9.2.2\n  * (c) 2022 kazuya kawaguchi\n  * Released under the MIT License.\n  */\n/*!\n  * message-compiler v9.2.2\n  * (c) 2022 kazuya kawaguchi\n  * Released under the MIT License.\n  */\n/*!\n  * shared v9.2.2\n  * (c) 2022 kazuya kawaguchi\n  * Released under the MIT License.\n  */\n/*!\n  * vue-devtools v9.2.2\n  * (c) 2022 kazuya kawaguchi\n  * Released under the MIT License.\n  */\n/*!\n  * vue-i18n v9.2.2\n  * (c) 2022 kazuya kawaguchi\n  * Released under the MIT License.\n  */\n//# sourceMappingURL=vue-i18n.js.map\n","start":1663662531687,"end":1663662532176},{"name":"vite-plugin-use-modules","result":"import {\n  setupDevtoolsPlugin\n} from \"./chunk-XYHHE7SP.js\";\nimport {\n  Fragment,\n  Text,\n  computed,\n  createVNode,\n  effectScope,\n  getCurrentInstance,\n  h,\n  inject,\n  isRef,\n  onBeforeMount,\n  onMounted,\n  onUnmounted,\n  ref,\n  shallowRef,\n  watch\n} from \"./chunk-2ST5CNOS.js\";\nimport \"./chunk-TWLJ45QX.js\";\n\n// node_modules/.pnpm/@intlify+shared@9.2.2/node_modules/@intlify/shared/dist/shared.esm-bundler.js\nvar inBrowser = typeof window !== \"undefined\";\nvar mark;\nvar measure;\nif (true) {\n  const perf = inBrowser && window.performance;\n  if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {\n    mark = (tag) => perf.mark(tag);\n    measure = (name, startTag, endTag) => {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n    };\n  }\n}\nvar RE_ARGS = /\\{([0-9a-zA-Z]+)\\}/g;\nfunction format(message, ...args) {\n  if (args.length === 1 && isObject(args[0])) {\n    args = args[0];\n  }\n  if (!args || !args.hasOwnProperty) {\n    args = {};\n  }\n  return message.replace(RE_ARGS, (match, identifier) => {\n    return args.hasOwnProperty(identifier) ? args[identifier] : \"\";\n  });\n}\nvar hasSymbol = typeof Symbol === \"function\" && typeof Symbol.toStringTag === \"symbol\";\nvar makeSymbol = (name) => hasSymbol ? Symbol(name) : name;\nvar generateFormatCacheKey = (locale, key, source) => friendlyJSONstringify({ l: locale, k: key, s: source });\nvar friendlyJSONstringify = (json) => JSON.stringify(json).replace(/\\u2028/g, \"\\\\u2028\").replace(/\\u2029/g, \"\\\\u2029\").replace(/\\u0027/g, \"\\\\u0027\");\nvar isNumber = (val) => typeof val === \"number\" && isFinite(val);\nvar isDate = (val) => toTypeString(val) === \"[object Date]\";\nvar isRegExp = (val) => toTypeString(val) === \"[object RegExp]\";\nvar isEmptyObject = (val) => isPlainObject(val) && Object.keys(val).length === 0;\nfunction warn(msg, err) {\n  if (typeof console !== \"undefined\") {\n    console.warn(`[intlify] ` + msg);\n    if (err) {\n      console.warn(err.stack);\n    }\n  }\n}\nvar assign = Object.assign;\nvar _globalThis;\nvar getGlobalThis = () => {\n  return _globalThis || (_globalThis = typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : {});\n};\nfunction escapeHtml(rawText) {\n  return rawText.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&apos;\");\n}\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\nvar isArray = Array.isArray;\nvar isFunction = (val) => typeof val === \"function\";\nvar isString = (val) => typeof val === \"string\";\nvar isBoolean = (val) => typeof val === \"boolean\";\nvar isObject = (val) => val !== null && typeof val === \"object\";\nvar objectToString = Object.prototype.toString;\nvar toTypeString = (value) => objectToString.call(value);\nvar isPlainObject = (val) => toTypeString(val) === \"[object Object]\";\nvar toDisplayString = (val) => {\n  return val == null ? \"\" : isArray(val) || isPlainObject(val) && val.toString === objectToString ? JSON.stringify(val, null, 2) : String(val);\n};\nvar RANGE = 2;\nfunction generateCodeFrame(source, start = 0, end = source.length) {\n  const lines = source.split(/\\r?\\n/);\n  let count = 0;\n  const res = [];\n  for (let i = 0; i < lines.length; i++) {\n    count += lines[i].length + 1;\n    if (count >= start) {\n      for (let j = i - RANGE; j <= i + RANGE || end > count; j++) {\n        if (j < 0 || j >= lines.length)\n          continue;\n        const line = j + 1;\n        res.push(`${line}${\" \".repeat(3 - String(line).length)}|  ${lines[j]}`);\n        const lineLength = lines[j].length;\n        if (j === i) {\n          const pad = start - (count - lineLength) + 1;\n          const length = Math.max(1, end > count ? lineLength - pad : end - start);\n          res.push(`   |  ` + \" \".repeat(pad) + \"^\".repeat(length));\n        } else if (j > i) {\n          if (end > count) {\n            const length = Math.max(Math.min(end - count, lineLength), 1);\n            res.push(`   |  ` + \"^\".repeat(length));\n          }\n          count += lineLength + 1;\n        }\n      }\n      break;\n    }\n  }\n  return res.join(\"\\n\");\n}\nfunction createEmitter() {\n  const events = /* @__PURE__ */ new Map();\n  const emitter = {\n    events,\n    on(event, handler) {\n      const handlers = events.get(event);\n      const added = handlers && handlers.push(handler);\n      if (!added) {\n        events.set(event, [handler]);\n      }\n    },\n    off(event, handler) {\n      const handlers = events.get(event);\n      if (handlers) {\n        handlers.splice(handlers.indexOf(handler) >>> 0, 1);\n      }\n    },\n    emit(event, payload) {\n      (events.get(event) || []).slice().map((handler) => handler(payload));\n      (events.get(\"*\") || []).slice().map((handler) => handler(event, payload));\n    }\n  };\n  return emitter;\n}\n\n// node_modules/.pnpm/@intlify+message-compiler@9.2.2/node_modules/@intlify/message-compiler/dist/message-compiler.esm-bundler.js\nvar CompileErrorCodes = {\n  EXPECTED_TOKEN: 1,\n  INVALID_TOKEN_IN_PLACEHOLDER: 2,\n  UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER: 3,\n  UNKNOWN_ESCAPE_SEQUENCE: 4,\n  INVALID_UNICODE_ESCAPE_SEQUENCE: 5,\n  UNBALANCED_CLOSING_BRACE: 6,\n  UNTERMINATED_CLOSING_BRACE: 7,\n  EMPTY_PLACEHOLDER: 8,\n  NOT_ALLOW_NEST_PLACEHOLDER: 9,\n  INVALID_LINKED_FORMAT: 10,\n  MUST_HAVE_MESSAGES_IN_PLURAL: 11,\n  UNEXPECTED_EMPTY_LINKED_MODIFIER: 12,\n  UNEXPECTED_EMPTY_LINKED_KEY: 13,\n  UNEXPECTED_LEXICAL_ANALYSIS: 14,\n  __EXTEND_POINT__: 15\n};\nvar errorMessages = {\n  [CompileErrorCodes.EXPECTED_TOKEN]: `Expected token: '{0}'`,\n  [CompileErrorCodes.INVALID_TOKEN_IN_PLACEHOLDER]: `Invalid token in placeholder: '{0}'`,\n  [CompileErrorCodes.UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER]: `Unterminated single quote in placeholder`,\n  [CompileErrorCodes.UNKNOWN_ESCAPE_SEQUENCE]: `Unknown escape sequence: \\\\{0}`,\n  [CompileErrorCodes.INVALID_UNICODE_ESCAPE_SEQUENCE]: `Invalid unicode escape sequence: {0}`,\n  [CompileErrorCodes.UNBALANCED_CLOSING_BRACE]: `Unbalanced closing brace`,\n  [CompileErrorCodes.UNTERMINATED_CLOSING_BRACE]: `Unterminated closing brace`,\n  [CompileErrorCodes.EMPTY_PLACEHOLDER]: `Empty placeholder`,\n  [CompileErrorCodes.NOT_ALLOW_NEST_PLACEHOLDER]: `Not allowed nest placeholder`,\n  [CompileErrorCodes.INVALID_LINKED_FORMAT]: `Invalid linked format`,\n  [CompileErrorCodes.MUST_HAVE_MESSAGES_IN_PLURAL]: `Plural must have messages`,\n  [CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_MODIFIER]: `Unexpected empty linked modifier`,\n  [CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_KEY]: `Unexpected empty linked key`,\n  [CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS]: `Unexpected lexical analysis in token: '{0}'`\n};\nfunction createCompileError(code3, loc, options = {}) {\n  const { domain, messages, args } = options;\n  const msg = true ? format((messages || errorMessages)[code3] || \"\", ...args || []) : code3;\n  const error = new SyntaxError(String(msg));\n  error.code = code3;\n  if (loc) {\n    error.location = loc;\n  }\n  error.domain = domain;\n  return error;\n}\nfunction defaultOnError(error) {\n  throw error;\n}\nfunction createPosition(line, column, offset) {\n  return { line, column, offset };\n}\nfunction createLocation(start, end, source) {\n  const loc = { start, end };\n  if (source != null) {\n    loc.source = source;\n  }\n  return loc;\n}\nvar CHAR_SP = \" \";\nvar CHAR_CR = \"\\r\";\nvar CHAR_LF = \"\\n\";\nvar CHAR_LS = String.fromCharCode(8232);\nvar CHAR_PS = String.fromCharCode(8233);\nfunction createScanner(str) {\n  const _buf = str;\n  let _index = 0;\n  let _line = 1;\n  let _column = 1;\n  let _peekOffset = 0;\n  const isCRLF = (index2) => _buf[index2] === CHAR_CR && _buf[index2 + 1] === CHAR_LF;\n  const isLF = (index2) => _buf[index2] === CHAR_LF;\n  const isPS = (index2) => _buf[index2] === CHAR_PS;\n  const isLS = (index2) => _buf[index2] === CHAR_LS;\n  const isLineEnd = (index2) => isCRLF(index2) || isLF(index2) || isPS(index2) || isLS(index2);\n  const index = () => _index;\n  const line = () => _line;\n  const column = () => _column;\n  const peekOffset = () => _peekOffset;\n  const charAt = (offset) => isCRLF(offset) || isPS(offset) || isLS(offset) ? CHAR_LF : _buf[offset];\n  const currentChar = () => charAt(_index);\n  const currentPeek = () => charAt(_index + _peekOffset);\n  function next() {\n    _peekOffset = 0;\n    if (isLineEnd(_index)) {\n      _line++;\n      _column = 0;\n    }\n    if (isCRLF(_index)) {\n      _index++;\n    }\n    _index++;\n    _column++;\n    return _buf[_index];\n  }\n  function peek() {\n    if (isCRLF(_index + _peekOffset)) {\n      _peekOffset++;\n    }\n    _peekOffset++;\n    return _buf[_index + _peekOffset];\n  }\n  function reset() {\n    _index = 0;\n    _line = 1;\n    _column = 1;\n    _peekOffset = 0;\n  }\n  function resetPeek(offset = 0) {\n    _peekOffset = offset;\n  }\n  function skipToPeek() {\n    const target = _index + _peekOffset;\n    while (target !== _index) {\n      next();\n    }\n    _peekOffset = 0;\n  }\n  return {\n    index,\n    line,\n    column,\n    peekOffset,\n    charAt,\n    currentChar,\n    currentPeek,\n    next,\n    peek,\n    reset,\n    resetPeek,\n    skipToPeek\n  };\n}\nvar EOF = void 0;\nvar LITERAL_DELIMITER = \"'\";\nvar ERROR_DOMAIN$1 = \"tokenizer\";\nfunction createTokenizer(source, options = {}) {\n  const location = options.location !== false;\n  const _scnr = createScanner(source);\n  const currentOffset = () => _scnr.index();\n  const currentPosition = () => createPosition(_scnr.line(), _scnr.column(), _scnr.index());\n  const _initLoc = currentPosition();\n  const _initOffset = currentOffset();\n  const _context = {\n    currentType: 14,\n    offset: _initOffset,\n    startLoc: _initLoc,\n    endLoc: _initLoc,\n    lastType: 14,\n    lastOffset: _initOffset,\n    lastStartLoc: _initLoc,\n    lastEndLoc: _initLoc,\n    braceNest: 0,\n    inLinked: false,\n    text: \"\"\n  };\n  const context = () => _context;\n  const { onError } = options;\n  function emitError(code3, pos, offset, ...args) {\n    const ctx = context();\n    pos.column += offset;\n    pos.offset += offset;\n    if (onError) {\n      const loc = createLocation(ctx.startLoc, pos);\n      const err = createCompileError(code3, loc, {\n        domain: ERROR_DOMAIN$1,\n        args\n      });\n      onError(err);\n    }\n  }\n  function getToken(context2, type, value) {\n    context2.endLoc = currentPosition();\n    context2.currentType = type;\n    const token = { type };\n    if (location) {\n      token.loc = createLocation(context2.startLoc, context2.endLoc);\n    }\n    if (value != null) {\n      token.value = value;\n    }\n    return token;\n  }\n  const getEndToken = (context2) => getToken(context2, 14);\n  function eat(scnr, ch) {\n    if (scnr.currentChar() === ch) {\n      scnr.next();\n      return ch;\n    } else {\n      emitError(CompileErrorCodes.EXPECTED_TOKEN, currentPosition(), 0, ch);\n      return \"\";\n    }\n  }\n  function peekSpaces(scnr) {\n    let buf = \"\";\n    while (scnr.currentPeek() === CHAR_SP || scnr.currentPeek() === CHAR_LF) {\n      buf += scnr.currentPeek();\n      scnr.peek();\n    }\n    return buf;\n  }\n  function skipSpaces(scnr) {\n    const buf = peekSpaces(scnr);\n    scnr.skipToPeek();\n    return buf;\n  }\n  function isIdentifierStart(ch) {\n    if (ch === EOF) {\n      return false;\n    }\n    const cc = ch.charCodeAt(0);\n    return cc >= 97 && cc <= 122 || cc >= 65 && cc <= 90 || cc === 95;\n  }\n  function isNumberStart(ch) {\n    if (ch === EOF) {\n      return false;\n    }\n    const cc = ch.charCodeAt(0);\n    return cc >= 48 && cc <= 57;\n  }\n  function isNamedIdentifierStart(scnr, context2) {\n    const { currentType } = context2;\n    if (currentType !== 2) {\n      return false;\n    }\n    peekSpaces(scnr);\n    const ret = isIdentifierStart(scnr.currentPeek());\n    scnr.resetPeek();\n    return ret;\n  }\n  function isListIdentifierStart(scnr, context2) {\n    const { currentType } = context2;\n    if (currentType !== 2) {\n      return false;\n    }\n    peekSpaces(scnr);\n    const ch = scnr.currentPeek() === \"-\" ? scnr.peek() : scnr.currentPeek();\n    const ret = isNumberStart(ch);\n    scnr.resetPeek();\n    return ret;\n  }\n  function isLiteralStart(scnr, context2) {\n    const { currentType } = context2;\n    if (currentType !== 2) {\n      return false;\n    }\n    peekSpaces(scnr);\n    const ret = scnr.currentPeek() === LITERAL_DELIMITER;\n    scnr.resetPeek();\n    return ret;\n  }\n  function isLinkedDotStart(scnr, context2) {\n    const { currentType } = context2;\n    if (currentType !== 8) {\n      return false;\n    }\n    peekSpaces(scnr);\n    const ret = scnr.currentPeek() === \".\";\n    scnr.resetPeek();\n    return ret;\n  }\n  function isLinkedModifierStart(scnr, context2) {\n    const { currentType } = context2;\n    if (currentType !== 9) {\n      return false;\n    }\n    peekSpaces(scnr);\n    const ret = isIdentifierStart(scnr.currentPeek());\n    scnr.resetPeek();\n    return ret;\n  }\n  function isLinkedDelimiterStart(scnr, context2) {\n    const { currentType } = context2;\n    if (!(currentType === 8 || currentType === 12)) {\n      return false;\n    }\n    peekSpaces(scnr);\n    const ret = scnr.currentPeek() === \":\";\n    scnr.resetPeek();\n    return ret;\n  }\n  function isLinkedReferStart(scnr, context2) {\n    const { currentType } = context2;\n    if (currentType !== 10) {\n      return false;\n    }\n    const fn = () => {\n      const ch = scnr.currentPeek();\n      if (ch === \"{\") {\n        return isIdentifierStart(scnr.peek());\n      } else if (ch === \"@\" || ch === \"%\" || ch === \"|\" || ch === \":\" || ch === \".\" || ch === CHAR_SP || !ch) {\n        return false;\n      } else if (ch === CHAR_LF) {\n        scnr.peek();\n        return fn();\n      } else {\n        return isIdentifierStart(ch);\n      }\n    };\n    const ret = fn();\n    scnr.resetPeek();\n    return ret;\n  }\n  function isPluralStart(scnr) {\n    peekSpaces(scnr);\n    const ret = scnr.currentPeek() === \"|\";\n    scnr.resetPeek();\n    return ret;\n  }\n  function detectModuloStart(scnr) {\n    const spaces = peekSpaces(scnr);\n    const ret = scnr.currentPeek() === \"%\" && scnr.peek() === \"{\";\n    scnr.resetPeek();\n    return {\n      isModulo: ret,\n      hasSpace: spaces.length > 0\n    };\n  }\n  function isTextStart(scnr, reset = true) {\n    const fn = (hasSpace = false, prev = \"\", detectModulo = false) => {\n      const ch = scnr.currentPeek();\n      if (ch === \"{\") {\n        return prev === \"%\" ? false : hasSpace;\n      } else if (ch === \"@\" || !ch) {\n        return prev === \"%\" ? true : hasSpace;\n      } else if (ch === \"%\") {\n        scnr.peek();\n        return fn(hasSpace, \"%\", true);\n      } else if (ch === \"|\") {\n        return prev === \"%\" || detectModulo ? true : !(prev === CHAR_SP || prev === CHAR_LF);\n      } else if (ch === CHAR_SP) {\n        scnr.peek();\n        return fn(true, CHAR_SP, detectModulo);\n      } else if (ch === CHAR_LF) {\n        scnr.peek();\n        return fn(true, CHAR_LF, detectModulo);\n      } else {\n        return true;\n      }\n    };\n    const ret = fn();\n    reset && scnr.resetPeek();\n    return ret;\n  }\n  function takeChar(scnr, fn) {\n    const ch = scnr.currentChar();\n    if (ch === EOF) {\n      return EOF;\n    }\n    if (fn(ch)) {\n      scnr.next();\n      return ch;\n    }\n    return null;\n  }\n  function takeIdentifierChar(scnr) {\n    const closure = (ch) => {\n      const cc = ch.charCodeAt(0);\n      return cc >= 97 && cc <= 122 || cc >= 65 && cc <= 90 || cc >= 48 && cc <= 57 || cc === 95 || cc === 36;\n    };\n    return takeChar(scnr, closure);\n  }\n  function takeDigit(scnr) {\n    const closure = (ch) => {\n      const cc = ch.charCodeAt(0);\n      return cc >= 48 && cc <= 57;\n    };\n    return takeChar(scnr, closure);\n  }\n  function takeHexDigit(scnr) {\n    const closure = (ch) => {\n      const cc = ch.charCodeAt(0);\n      return cc >= 48 && cc <= 57 || cc >= 65 && cc <= 70 || cc >= 97 && cc <= 102;\n    };\n    return takeChar(scnr, closure);\n  }\n  function getDigits(scnr) {\n    let ch = \"\";\n    let num = \"\";\n    while (ch = takeDigit(scnr)) {\n      num += ch;\n    }\n    return num;\n  }\n  function readModulo(scnr) {\n    skipSpaces(scnr);\n    const ch = scnr.currentChar();\n    if (ch !== \"%\") {\n      emitError(CompileErrorCodes.EXPECTED_TOKEN, currentPosition(), 0, ch);\n    }\n    scnr.next();\n    return \"%\";\n  }\n  function readText(scnr) {\n    let buf = \"\";\n    while (true) {\n      const ch = scnr.currentChar();\n      if (ch === \"{\" || ch === \"}\" || ch === \"@\" || ch === \"|\" || !ch) {\n        break;\n      } else if (ch === \"%\") {\n        if (isTextStart(scnr)) {\n          buf += ch;\n          scnr.next();\n        } else {\n          break;\n        }\n      } else if (ch === CHAR_SP || ch === CHAR_LF) {\n        if (isTextStart(scnr)) {\n          buf += ch;\n          scnr.next();\n        } else if (isPluralStart(scnr)) {\n          break;\n        } else {\n          buf += ch;\n          scnr.next();\n        }\n      } else {\n        buf += ch;\n        scnr.next();\n      }\n    }\n    return buf;\n  }\n  function readNamedIdentifier(scnr) {\n    skipSpaces(scnr);\n    let ch = \"\";\n    let name = \"\";\n    while (ch = takeIdentifierChar(scnr)) {\n      name += ch;\n    }\n    if (scnr.currentChar() === EOF) {\n      emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n    }\n    return name;\n  }\n  function readListIdentifier(scnr) {\n    skipSpaces(scnr);\n    let value = \"\";\n    if (scnr.currentChar() === \"-\") {\n      scnr.next();\n      value += `-${getDigits(scnr)}`;\n    } else {\n      value += getDigits(scnr);\n    }\n    if (scnr.currentChar() === EOF) {\n      emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n    }\n    return value;\n  }\n  function readLiteral(scnr) {\n    skipSpaces(scnr);\n    eat(scnr, `'`);\n    let ch = \"\";\n    let literal = \"\";\n    const fn = (x) => x !== LITERAL_DELIMITER && x !== CHAR_LF;\n    while (ch = takeChar(scnr, fn)) {\n      if (ch === \"\\\\\") {\n        literal += readEscapeSequence(scnr);\n      } else {\n        literal += ch;\n      }\n    }\n    const current = scnr.currentChar();\n    if (current === CHAR_LF || current === EOF) {\n      emitError(CompileErrorCodes.UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER, currentPosition(), 0);\n      if (current === CHAR_LF) {\n        scnr.next();\n        eat(scnr, `'`);\n      }\n      return literal;\n    }\n    eat(scnr, `'`);\n    return literal;\n  }\n  function readEscapeSequence(scnr) {\n    const ch = scnr.currentChar();\n    switch (ch) {\n      case \"\\\\\":\n      case `'`:\n        scnr.next();\n        return `\\\\${ch}`;\n      case \"u\":\n        return readUnicodeEscapeSequence(scnr, ch, 4);\n      case \"U\":\n        return readUnicodeEscapeSequence(scnr, ch, 6);\n      default:\n        emitError(CompileErrorCodes.UNKNOWN_ESCAPE_SEQUENCE, currentPosition(), 0, ch);\n        return \"\";\n    }\n  }\n  function readUnicodeEscapeSequence(scnr, unicode, digits) {\n    eat(scnr, unicode);\n    let sequence = \"\";\n    for (let i = 0; i < digits; i++) {\n      const ch = takeHexDigit(scnr);\n      if (!ch) {\n        emitError(CompileErrorCodes.INVALID_UNICODE_ESCAPE_SEQUENCE, currentPosition(), 0, `\\\\${unicode}${sequence}${scnr.currentChar()}`);\n        break;\n      }\n      sequence += ch;\n    }\n    return `\\\\${unicode}${sequence}`;\n  }\n  function readInvalidIdentifier(scnr) {\n    skipSpaces(scnr);\n    let ch = \"\";\n    let identifiers = \"\";\n    const closure = (ch2) => ch2 !== \"{\" && ch2 !== \"}\" && ch2 !== CHAR_SP && ch2 !== CHAR_LF;\n    while (ch = takeChar(scnr, closure)) {\n      identifiers += ch;\n    }\n    return identifiers;\n  }\n  function readLinkedModifier(scnr) {\n    let ch = \"\";\n    let name = \"\";\n    while (ch = takeIdentifierChar(scnr)) {\n      name += ch;\n    }\n    return name;\n  }\n  function readLinkedRefer(scnr) {\n    const fn = (detect = false, buf) => {\n      const ch = scnr.currentChar();\n      if (ch === \"{\" || ch === \"%\" || ch === \"@\" || ch === \"|\" || !ch) {\n        return buf;\n      } else if (ch === CHAR_SP) {\n        return buf;\n      } else if (ch === CHAR_LF) {\n        buf += ch;\n        scnr.next();\n        return fn(detect, buf);\n      } else {\n        buf += ch;\n        scnr.next();\n        return fn(true, buf);\n      }\n    };\n    return fn(false, \"\");\n  }\n  function readPlural(scnr) {\n    skipSpaces(scnr);\n    const plural = eat(scnr, \"|\");\n    skipSpaces(scnr);\n    return plural;\n  }\n  function readTokenInPlaceholder(scnr, context2) {\n    let token = null;\n    const ch = scnr.currentChar();\n    switch (ch) {\n      case \"{\":\n        if (context2.braceNest >= 1) {\n          emitError(CompileErrorCodes.NOT_ALLOW_NEST_PLACEHOLDER, currentPosition(), 0);\n        }\n        scnr.next();\n        token = getToken(context2, 2, \"{\");\n        skipSpaces(scnr);\n        context2.braceNest++;\n        return token;\n      case \"}\":\n        if (context2.braceNest > 0 && context2.currentType === 2) {\n          emitError(CompileErrorCodes.EMPTY_PLACEHOLDER, currentPosition(), 0);\n        }\n        scnr.next();\n        token = getToken(context2, 3, \"}\");\n        context2.braceNest--;\n        context2.braceNest > 0 && skipSpaces(scnr);\n        if (context2.inLinked && context2.braceNest === 0) {\n          context2.inLinked = false;\n        }\n        return token;\n      case \"@\":\n        if (context2.braceNest > 0) {\n          emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n        }\n        token = readTokenInLinked(scnr, context2) || getEndToken(context2);\n        context2.braceNest = 0;\n        return token;\n      default:\n        let validNamedIdentifier = true;\n        let validListIdentifier = true;\n        let validLiteral = true;\n        if (isPluralStart(scnr)) {\n          if (context2.braceNest > 0) {\n            emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n          }\n          token = getToken(context2, 1, readPlural(scnr));\n          context2.braceNest = 0;\n          context2.inLinked = false;\n          return token;\n        }\n        if (context2.braceNest > 0 && (context2.currentType === 5 || context2.currentType === 6 || context2.currentType === 7)) {\n          emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n          context2.braceNest = 0;\n          return readToken(scnr, context2);\n        }\n        if (validNamedIdentifier = isNamedIdentifierStart(scnr, context2)) {\n          token = getToken(context2, 5, readNamedIdentifier(scnr));\n          skipSpaces(scnr);\n          return token;\n        }\n        if (validListIdentifier = isListIdentifierStart(scnr, context2)) {\n          token = getToken(context2, 6, readListIdentifier(scnr));\n          skipSpaces(scnr);\n          return token;\n        }\n        if (validLiteral = isLiteralStart(scnr, context2)) {\n          token = getToken(context2, 7, readLiteral(scnr));\n          skipSpaces(scnr);\n          return token;\n        }\n        if (!validNamedIdentifier && !validListIdentifier && !validLiteral) {\n          token = getToken(context2, 13, readInvalidIdentifier(scnr));\n          emitError(CompileErrorCodes.INVALID_TOKEN_IN_PLACEHOLDER, currentPosition(), 0, token.value);\n          skipSpaces(scnr);\n          return token;\n        }\n        break;\n    }\n    return token;\n  }\n  function readTokenInLinked(scnr, context2) {\n    const { currentType } = context2;\n    let token = null;\n    const ch = scnr.currentChar();\n    if ((currentType === 8 || currentType === 9 || currentType === 12 || currentType === 10) && (ch === CHAR_LF || ch === CHAR_SP)) {\n      emitError(CompileErrorCodes.INVALID_LINKED_FORMAT, currentPosition(), 0);\n    }\n    switch (ch) {\n      case \"@\":\n        scnr.next();\n        token = getToken(context2, 8, \"@\");\n        context2.inLinked = true;\n        return token;\n      case \".\":\n        skipSpaces(scnr);\n        scnr.next();\n        return getToken(context2, 9, \".\");\n      case \":\":\n        skipSpaces(scnr);\n        scnr.next();\n        return getToken(context2, 10, \":\");\n      default:\n        if (isPluralStart(scnr)) {\n          token = getToken(context2, 1, readPlural(scnr));\n          context2.braceNest = 0;\n          context2.inLinked = false;\n          return token;\n        }\n        if (isLinkedDotStart(scnr, context2) || isLinkedDelimiterStart(scnr, context2)) {\n          skipSpaces(scnr);\n          return readTokenInLinked(scnr, context2);\n        }\n        if (isLinkedModifierStart(scnr, context2)) {\n          skipSpaces(scnr);\n          return getToken(context2, 12, readLinkedModifier(scnr));\n        }\n        if (isLinkedReferStart(scnr, context2)) {\n          skipSpaces(scnr);\n          if (ch === \"{\") {\n            return readTokenInPlaceholder(scnr, context2) || token;\n          } else {\n            return getToken(context2, 11, readLinkedRefer(scnr));\n          }\n        }\n        if (currentType === 8) {\n          emitError(CompileErrorCodes.INVALID_LINKED_FORMAT, currentPosition(), 0);\n        }\n        context2.braceNest = 0;\n        context2.inLinked = false;\n        return readToken(scnr, context2);\n    }\n  }\n  function readToken(scnr, context2) {\n    let token = { type: 14 };\n    if (context2.braceNest > 0) {\n      return readTokenInPlaceholder(scnr, context2) || getEndToken(context2);\n    }\n    if (context2.inLinked) {\n      return readTokenInLinked(scnr, context2) || getEndToken(context2);\n    }\n    const ch = scnr.currentChar();\n    switch (ch) {\n      case \"{\":\n        return readTokenInPlaceholder(scnr, context2) || getEndToken(context2);\n      case \"}\":\n        emitError(CompileErrorCodes.UNBALANCED_CLOSING_BRACE, currentPosition(), 0);\n        scnr.next();\n        return getToken(context2, 3, \"}\");\n      case \"@\":\n        return readTokenInLinked(scnr, context2) || getEndToken(context2);\n      default:\n        if (isPluralStart(scnr)) {\n          token = getToken(context2, 1, readPlural(scnr));\n          context2.braceNest = 0;\n          context2.inLinked = false;\n          return token;\n        }\n        const { isModulo, hasSpace } = detectModuloStart(scnr);\n        if (isModulo) {\n          return hasSpace ? getToken(context2, 0, readText(scnr)) : getToken(context2, 4, readModulo(scnr));\n        }\n        if (isTextStart(scnr)) {\n          return getToken(context2, 0, readText(scnr));\n        }\n        break;\n    }\n    return token;\n  }\n  function nextToken() {\n    const { currentType, offset, startLoc, endLoc } = _context;\n    _context.lastType = currentType;\n    _context.lastOffset = offset;\n    _context.lastStartLoc = startLoc;\n    _context.lastEndLoc = endLoc;\n    _context.offset = currentOffset();\n    _context.startLoc = currentPosition();\n    if (_scnr.currentChar() === EOF) {\n      return getToken(_context, 14);\n    }\n    return readToken(_scnr, _context);\n  }\n  return {\n    nextToken,\n    currentOffset,\n    currentPosition,\n    context\n  };\n}\nvar ERROR_DOMAIN = \"parser\";\nvar KNOWN_ESCAPES = /(?:\\\\\\\\|\\\\'|\\\\u([0-9a-fA-F]{4})|\\\\U([0-9a-fA-F]{6}))/g;\nfunction fromEscapeSequence(match, codePoint4, codePoint6) {\n  switch (match) {\n    case `\\\\\\\\`:\n      return `\\\\`;\n    case `\\\\'`:\n      return `'`;\n    default: {\n      const codePoint = parseInt(codePoint4 || codePoint6, 16);\n      if (codePoint <= 55295 || codePoint >= 57344) {\n        return String.fromCodePoint(codePoint);\n      }\n      return \"\\uFFFD\";\n    }\n  }\n}\nfunction createParser(options = {}) {\n  const location = options.location !== false;\n  const { onError } = options;\n  function emitError(tokenzer, code3, start, offset, ...args) {\n    const end = tokenzer.currentPosition();\n    end.offset += offset;\n    end.column += offset;\n    if (onError) {\n      const loc = createLocation(start, end);\n      const err = createCompileError(code3, loc, {\n        domain: ERROR_DOMAIN,\n        args\n      });\n      onError(err);\n    }\n  }\n  function startNode(type, offset, loc) {\n    const node = {\n      type,\n      start: offset,\n      end: offset\n    };\n    if (location) {\n      node.loc = { start: loc, end: loc };\n    }\n    return node;\n  }\n  function endNode(node, offset, pos, type) {\n    node.end = offset;\n    if (type) {\n      node.type = type;\n    }\n    if (location && node.loc) {\n      node.loc.end = pos;\n    }\n  }\n  function parseText(tokenizer, value) {\n    const context = tokenizer.context();\n    const node = startNode(3, context.offset, context.startLoc);\n    node.value = value;\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseList(tokenizer, index) {\n    const context = tokenizer.context();\n    const { lastOffset: offset, lastStartLoc: loc } = context;\n    const node = startNode(5, offset, loc);\n    node.index = parseInt(index, 10);\n    tokenizer.nextToken();\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseNamed(tokenizer, key) {\n    const context = tokenizer.context();\n    const { lastOffset: offset, lastStartLoc: loc } = context;\n    const node = startNode(4, offset, loc);\n    node.key = key;\n    tokenizer.nextToken();\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseLiteral(tokenizer, value) {\n    const context = tokenizer.context();\n    const { lastOffset: offset, lastStartLoc: loc } = context;\n    const node = startNode(9, offset, loc);\n    node.value = value.replace(KNOWN_ESCAPES, fromEscapeSequence);\n    tokenizer.nextToken();\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseLinkedModifier(tokenizer) {\n    const token = tokenizer.nextToken();\n    const context = tokenizer.context();\n    const { lastOffset: offset, lastStartLoc: loc } = context;\n    const node = startNode(8, offset, loc);\n    if (token.type !== 12) {\n      emitError(tokenizer, CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_MODIFIER, context.lastStartLoc, 0);\n      node.value = \"\";\n      endNode(node, offset, loc);\n      return {\n        nextConsumeToken: token,\n        node\n      };\n    }\n    if (token.value == null) {\n      emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n    }\n    node.value = token.value || \"\";\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return {\n      node\n    };\n  }\n  function parseLinkedKey(tokenizer, value) {\n    const context = tokenizer.context();\n    const node = startNode(7, context.offset, context.startLoc);\n    node.value = value;\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseLinked(tokenizer) {\n    const context = tokenizer.context();\n    const linkedNode = startNode(6, context.offset, context.startLoc);\n    let token = tokenizer.nextToken();\n    if (token.type === 9) {\n      const parsed = parseLinkedModifier(tokenizer);\n      linkedNode.modifier = parsed.node;\n      token = parsed.nextConsumeToken || tokenizer.nextToken();\n    }\n    if (token.type !== 10) {\n      emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n    }\n    token = tokenizer.nextToken();\n    if (token.type === 2) {\n      token = tokenizer.nextToken();\n    }\n    switch (token.type) {\n      case 11:\n        if (token.value == null) {\n          emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n        }\n        linkedNode.key = parseLinkedKey(tokenizer, token.value || \"\");\n        break;\n      case 5:\n        if (token.value == null) {\n          emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n        }\n        linkedNode.key = parseNamed(tokenizer, token.value || \"\");\n        break;\n      case 6:\n        if (token.value == null) {\n          emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n        }\n        linkedNode.key = parseList(tokenizer, token.value || \"\");\n        break;\n      case 7:\n        if (token.value == null) {\n          emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n        }\n        linkedNode.key = parseLiteral(tokenizer, token.value || \"\");\n        break;\n      default:\n        emitError(tokenizer, CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_KEY, context.lastStartLoc, 0);\n        const nextContext = tokenizer.context();\n        const emptyLinkedKeyNode = startNode(7, nextContext.offset, nextContext.startLoc);\n        emptyLinkedKeyNode.value = \"\";\n        endNode(emptyLinkedKeyNode, nextContext.offset, nextContext.startLoc);\n        linkedNode.key = emptyLinkedKeyNode;\n        endNode(linkedNode, nextContext.offset, nextContext.startLoc);\n        return {\n          nextConsumeToken: token,\n          node: linkedNode\n        };\n    }\n    endNode(linkedNode, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return {\n      node: linkedNode\n    };\n  }\n  function parseMessage(tokenizer) {\n    const context = tokenizer.context();\n    const startOffset = context.currentType === 1 ? tokenizer.currentOffset() : context.offset;\n    const startLoc = context.currentType === 1 ? context.endLoc : context.startLoc;\n    const node = startNode(2, startOffset, startLoc);\n    node.items = [];\n    let nextToken = null;\n    do {\n      const token = nextToken || tokenizer.nextToken();\n      nextToken = null;\n      switch (token.type) {\n        case 0:\n          if (token.value == null) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n          }\n          node.items.push(parseText(tokenizer, token.value || \"\"));\n          break;\n        case 6:\n          if (token.value == null) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n          }\n          node.items.push(parseList(tokenizer, token.value || \"\"));\n          break;\n        case 5:\n          if (token.value == null) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n          }\n          node.items.push(parseNamed(tokenizer, token.value || \"\"));\n          break;\n        case 7:\n          if (token.value == null) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n          }\n          node.items.push(parseLiteral(tokenizer, token.value || \"\"));\n          break;\n        case 8:\n          const parsed = parseLinked(tokenizer);\n          node.items.push(parsed.node);\n          nextToken = parsed.nextConsumeToken || null;\n          break;\n      }\n    } while (context.currentType !== 14 && context.currentType !== 1);\n    const endOffset = context.currentType === 1 ? context.lastOffset : tokenizer.currentOffset();\n    const endLoc = context.currentType === 1 ? context.lastEndLoc : tokenizer.currentPosition();\n    endNode(node, endOffset, endLoc);\n    return node;\n  }\n  function parsePlural(tokenizer, offset, loc, msgNode) {\n    const context = tokenizer.context();\n    let hasEmptyMessage = msgNode.items.length === 0;\n    const node = startNode(1, offset, loc);\n    node.cases = [];\n    node.cases.push(msgNode);\n    do {\n      const msg = parseMessage(tokenizer);\n      if (!hasEmptyMessage) {\n        hasEmptyMessage = msg.items.length === 0;\n      }\n      node.cases.push(msg);\n    } while (context.currentType !== 14);\n    if (hasEmptyMessage) {\n      emitError(tokenizer, CompileErrorCodes.MUST_HAVE_MESSAGES_IN_PLURAL, loc, 0);\n    }\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseResource(tokenizer) {\n    const context = tokenizer.context();\n    const { offset, startLoc } = context;\n    const msgNode = parseMessage(tokenizer);\n    if (context.currentType === 14) {\n      return msgNode;\n    } else {\n      return parsePlural(tokenizer, offset, startLoc, msgNode);\n    }\n  }\n  function parse2(source) {\n    const tokenizer = createTokenizer(source, assign({}, options));\n    const context = tokenizer.context();\n    const node = startNode(0, context.offset, context.startLoc);\n    if (location && node.loc) {\n      node.loc.source = source;\n    }\n    node.body = parseResource(tokenizer);\n    if (context.currentType !== 14) {\n      emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, source[context.offset] || \"\");\n    }\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  return { parse: parse2 };\n}\nfunction getTokenCaption(token) {\n  if (token.type === 14) {\n    return \"EOF\";\n  }\n  const name = (token.value || \"\").replace(/\\r?\\n/gu, \"\\\\n\");\n  return name.length > 10 ? name.slice(0, 9) + \"\\u2026\" : name;\n}\nfunction createTransformer(ast, options = {}) {\n  const _context = {\n    ast,\n    helpers: /* @__PURE__ */ new Set()\n  };\n  const context = () => _context;\n  const helper = (name) => {\n    _context.helpers.add(name);\n    return name;\n  };\n  return { context, helper };\n}\nfunction traverseNodes(nodes, transformer) {\n  for (let i = 0; i < nodes.length; i++) {\n    traverseNode(nodes[i], transformer);\n  }\n}\nfunction traverseNode(node, transformer) {\n  switch (node.type) {\n    case 1:\n      traverseNodes(node.cases, transformer);\n      transformer.helper(\"plural\");\n      break;\n    case 2:\n      traverseNodes(node.items, transformer);\n      break;\n    case 6:\n      const linked = node;\n      traverseNode(linked.key, transformer);\n      transformer.helper(\"linked\");\n      transformer.helper(\"type\");\n      break;\n    case 5:\n      transformer.helper(\"interpolate\");\n      transformer.helper(\"list\");\n      break;\n    case 4:\n      transformer.helper(\"interpolate\");\n      transformer.helper(\"named\");\n      break;\n  }\n}\nfunction transform(ast, options = {}) {\n  const transformer = createTransformer(ast);\n  transformer.helper(\"normalize\");\n  ast.body && traverseNode(ast.body, transformer);\n  const context = transformer.context();\n  ast.helpers = Array.from(context.helpers);\n}\nfunction createCodeGenerator(ast, options) {\n  const { sourceMap, filename, breakLineCode, needIndent: _needIndent } = options;\n  const _context = {\n    source: ast.loc.source,\n    filename,\n    code: \"\",\n    column: 1,\n    line: 1,\n    offset: 0,\n    map: void 0,\n    breakLineCode,\n    needIndent: _needIndent,\n    indentLevel: 0\n  };\n  const context = () => _context;\n  function push(code3, node) {\n    _context.code += code3;\n  }\n  function _newline(n, withBreakLine = true) {\n    const _breakLineCode = withBreakLine ? breakLineCode : \"\";\n    push(_needIndent ? _breakLineCode + `  `.repeat(n) : _breakLineCode);\n  }\n  function indent(withNewLine = true) {\n    const level = ++_context.indentLevel;\n    withNewLine && _newline(level);\n  }\n  function deindent(withNewLine = true) {\n    const level = --_context.indentLevel;\n    withNewLine && _newline(level);\n  }\n  function newline() {\n    _newline(_context.indentLevel);\n  }\n  const helper = (key) => `_${key}`;\n  const needIndent = () => _context.needIndent;\n  return {\n    context,\n    push,\n    indent,\n    deindent,\n    newline,\n    helper,\n    needIndent\n  };\n}\nfunction generateLinkedNode(generator, node) {\n  const { helper } = generator;\n  generator.push(`${helper(\"linked\")}(`);\n  generateNode(generator, node.key);\n  if (node.modifier) {\n    generator.push(`, `);\n    generateNode(generator, node.modifier);\n    generator.push(`, _type`);\n  } else {\n    generator.push(`, undefined, _type`);\n  }\n  generator.push(`)`);\n}\nfunction generateMessageNode(generator, node) {\n  const { helper, needIndent } = generator;\n  generator.push(`${helper(\"normalize\")}([`);\n  generator.indent(needIndent());\n  const length = node.items.length;\n  for (let i = 0; i < length; i++) {\n    generateNode(generator, node.items[i]);\n    if (i === length - 1) {\n      break;\n    }\n    generator.push(\", \");\n  }\n  generator.deindent(needIndent());\n  generator.push(\"])\");\n}\nfunction generatePluralNode(generator, node) {\n  const { helper, needIndent } = generator;\n  if (node.cases.length > 1) {\n    generator.push(`${helper(\"plural\")}([`);\n    generator.indent(needIndent());\n    const length = node.cases.length;\n    for (let i = 0; i < length; i++) {\n      generateNode(generator, node.cases[i]);\n      if (i === length - 1) {\n        break;\n      }\n      generator.push(\", \");\n    }\n    generator.deindent(needIndent());\n    generator.push(`])`);\n  }\n}\nfunction generateResource(generator, node) {\n  if (node.body) {\n    generateNode(generator, node.body);\n  } else {\n    generator.push(\"null\");\n  }\n}\nfunction generateNode(generator, node) {\n  const { helper } = generator;\n  switch (node.type) {\n    case 0:\n      generateResource(generator, node);\n      break;\n    case 1:\n      generatePluralNode(generator, node);\n      break;\n    case 2:\n      generateMessageNode(generator, node);\n      break;\n    case 6:\n      generateLinkedNode(generator, node);\n      break;\n    case 8:\n      generator.push(JSON.stringify(node.value), node);\n      break;\n    case 7:\n      generator.push(JSON.stringify(node.value), node);\n      break;\n    case 5:\n      generator.push(`${helper(\"interpolate\")}(${helper(\"list\")}(${node.index}))`, node);\n      break;\n    case 4:\n      generator.push(`${helper(\"interpolate\")}(${helper(\"named\")}(${JSON.stringify(node.key)}))`, node);\n      break;\n    case 9:\n      generator.push(JSON.stringify(node.value), node);\n      break;\n    case 3:\n      generator.push(JSON.stringify(node.value), node);\n      break;\n    default:\n      if (true) {\n        throw new Error(`unhandled codegen node type: ${node.type}`);\n      }\n  }\n}\nvar generate = (ast, options = {}) => {\n  const mode = isString(options.mode) ? options.mode : \"normal\";\n  const filename = isString(options.filename) ? options.filename : \"message.intl\";\n  const sourceMap = !!options.sourceMap;\n  const breakLineCode = options.breakLineCode != null ? options.breakLineCode : mode === \"arrow\" ? \";\" : \"\\n\";\n  const needIndent = options.needIndent ? options.needIndent : mode !== \"arrow\";\n  const helpers = ast.helpers || [];\n  const generator = createCodeGenerator(ast, {\n    mode,\n    filename,\n    sourceMap,\n    breakLineCode,\n    needIndent\n  });\n  generator.push(mode === \"normal\" ? `function __msg__ (ctx) {` : `(ctx) => {`);\n  generator.indent(needIndent);\n  if (helpers.length > 0) {\n    generator.push(`const { ${helpers.map((s) => `${s}: _${s}`).join(\", \")} } = ctx`);\n    generator.newline();\n  }\n  generator.push(`return `);\n  generateNode(generator, ast);\n  generator.deindent(needIndent);\n  generator.push(`}`);\n  const { code: code3, map } = generator.context();\n  return {\n    ast,\n    code: code3,\n    map: map ? map.toJSON() : void 0\n  };\n};\nfunction baseCompile(source, options = {}) {\n  const assignedOptions = assign({}, options);\n  const parser = createParser(assignedOptions);\n  const ast = parser.parse(source);\n  transform(ast, assignedOptions);\n  return generate(ast, assignedOptions);\n}\n\n// node_modules/.pnpm/@intlify+devtools-if@9.2.2/node_modules/@intlify/devtools-if/dist/devtools-if.esm-bundler.js\nvar IntlifyDevToolsHooks = {\n  I18nInit: \"i18n:init\",\n  FunctionTranslate: \"function:translate\"\n};\n\n// node_modules/.pnpm/@intlify+core-base@9.2.2/node_modules/@intlify/core-base/dist/core-base.esm-bundler.js\nvar pathStateMachine = [];\npathStateMachine[0] = {\n  [\"w\"]: [0],\n  [\"i\"]: [3, 0],\n  [\"[\"]: [4],\n  [\"o\"]: [7]\n};\npathStateMachine[1] = {\n  [\"w\"]: [1],\n  [\".\"]: [2],\n  [\"[\"]: [4],\n  [\"o\"]: [7]\n};\npathStateMachine[2] = {\n  [\"w\"]: [2],\n  [\"i\"]: [3, 0],\n  [\"0\"]: [3, 0]\n};\npathStateMachine[3] = {\n  [\"i\"]: [3, 0],\n  [\"0\"]: [3, 0],\n  [\"w\"]: [1, 1],\n  [\".\"]: [2, 1],\n  [\"[\"]: [4, 1],\n  [\"o\"]: [7, 1]\n};\npathStateMachine[4] = {\n  [\"'\"]: [5, 0],\n  ['\"']: [6, 0],\n  [\"[\"]: [\n    4,\n    2\n  ],\n  [\"]\"]: [1, 3],\n  [\"o\"]: 8,\n  [\"l\"]: [4, 0]\n};\npathStateMachine[5] = {\n  [\"'\"]: [4, 0],\n  [\"o\"]: 8,\n  [\"l\"]: [5, 0]\n};\npathStateMachine[6] = {\n  ['\"']: [4, 0],\n  [\"o\"]: 8,\n  [\"l\"]: [6, 0]\n};\nvar literalValueRE = /^\\s?(?:true|false|-?[\\d.]+|'[^']*'|\"[^\"]*\")\\s?$/;\nfunction isLiteral(exp) {\n  return literalValueRE.test(exp);\n}\nfunction stripQuotes(str) {\n  const a = str.charCodeAt(0);\n  const b = str.charCodeAt(str.length - 1);\n  return a === b && (a === 34 || a === 39) ? str.slice(1, -1) : str;\n}\nfunction getPathCharType(ch) {\n  if (ch === void 0 || ch === null) {\n    return \"o\";\n  }\n  const code3 = ch.charCodeAt(0);\n  switch (code3) {\n    case 91:\n    case 93:\n    case 46:\n    case 34:\n    case 39:\n      return ch;\n    case 95:\n    case 36:\n    case 45:\n      return \"i\";\n    case 9:\n    case 10:\n    case 13:\n    case 160:\n    case 65279:\n    case 8232:\n    case 8233:\n      return \"w\";\n  }\n  return \"i\";\n}\nfunction formatSubPath(path) {\n  const trimmed = path.trim();\n  if (path.charAt(0) === \"0\" && isNaN(parseInt(path))) {\n    return false;\n  }\n  return isLiteral(trimmed) ? stripQuotes(trimmed) : \"*\" + trimmed;\n}\nfunction parse(path) {\n  const keys = [];\n  let index = -1;\n  let mode = 0;\n  let subPathDepth = 0;\n  let c;\n  let key;\n  let newChar;\n  let type;\n  let transition;\n  let action;\n  let typeMap;\n  const actions = [];\n  actions[0] = () => {\n    if (key === void 0) {\n      key = newChar;\n    } else {\n      key += newChar;\n    }\n  };\n  actions[1] = () => {\n    if (key !== void 0) {\n      keys.push(key);\n      key = void 0;\n    }\n  };\n  actions[2] = () => {\n    actions[0]();\n    subPathDepth++;\n  };\n  actions[3] = () => {\n    if (subPathDepth > 0) {\n      subPathDepth--;\n      mode = 4;\n      actions[0]();\n    } else {\n      subPathDepth = 0;\n      if (key === void 0) {\n        return false;\n      }\n      key = formatSubPath(key);\n      if (key === false) {\n        return false;\n      } else {\n        actions[1]();\n      }\n    }\n  };\n  function maybeUnescapeQuote() {\n    const nextChar = path[index + 1];\n    if (mode === 5 && nextChar === \"'\" || mode === 6 && nextChar === '\"') {\n      index++;\n      newChar = \"\\\\\" + nextChar;\n      actions[0]();\n      return true;\n    }\n  }\n  while (mode !== null) {\n    index++;\n    c = path[index];\n    if (c === \"\\\\\" && maybeUnescapeQuote()) {\n      continue;\n    }\n    type = getPathCharType(c);\n    typeMap = pathStateMachine[mode];\n    transition = typeMap[type] || typeMap[\"l\"] || 8;\n    if (transition === 8) {\n      return;\n    }\n    mode = transition[0];\n    if (transition[1] !== void 0) {\n      action = actions[transition[1]];\n      if (action) {\n        newChar = c;\n        if (action() === false) {\n          return;\n        }\n      }\n    }\n    if (mode === 7) {\n      return keys;\n    }\n  }\n}\nvar cache = /* @__PURE__ */ new Map();\nfunction resolveWithKeyValue(obj, path) {\n  return isObject(obj) ? obj[path] : null;\n}\nfunction resolveValue(obj, path) {\n  if (!isObject(obj)) {\n    return null;\n  }\n  let hit = cache.get(path);\n  if (!hit) {\n    hit = parse(path);\n    if (hit) {\n      cache.set(path, hit);\n    }\n  }\n  if (!hit) {\n    return null;\n  }\n  const len = hit.length;\n  let last = obj;\n  let i = 0;\n  while (i < len) {\n    const val = last[hit[i]];\n    if (val === void 0) {\n      return null;\n    }\n    last = val;\n    i++;\n  }\n  return last;\n}\nvar DEFAULT_MODIFIER = (str) => str;\nvar DEFAULT_MESSAGE = (ctx) => \"\";\nvar DEFAULT_MESSAGE_DATA_TYPE = \"text\";\nvar DEFAULT_NORMALIZE = (values) => values.length === 0 ? \"\" : values.join(\"\");\nvar DEFAULT_INTERPOLATE = toDisplayString;\nfunction pluralDefault(choice, choicesLength) {\n  choice = Math.abs(choice);\n  if (choicesLength === 2) {\n    return choice ? choice > 1 ? 1 : 0 : 1;\n  }\n  return choice ? Math.min(choice, 2) : 0;\n}\nfunction getPluralIndex(options) {\n  const index = isNumber(options.pluralIndex) ? options.pluralIndex : -1;\n  return options.named && (isNumber(options.named.count) || isNumber(options.named.n)) ? isNumber(options.named.count) ? options.named.count : isNumber(options.named.n) ? options.named.n : index : index;\n}\nfunction normalizeNamed(pluralIndex, props) {\n  if (!props.count) {\n    props.count = pluralIndex;\n  }\n  if (!props.n) {\n    props.n = pluralIndex;\n  }\n}\nfunction createMessageContext(options = {}) {\n  const locale = options.locale;\n  const pluralIndex = getPluralIndex(options);\n  const pluralRule = isObject(options.pluralRules) && isString(locale) && isFunction(options.pluralRules[locale]) ? options.pluralRules[locale] : pluralDefault;\n  const orgPluralRule = isObject(options.pluralRules) && isString(locale) && isFunction(options.pluralRules[locale]) ? pluralDefault : void 0;\n  const plural = (messages) => {\n    return messages[pluralRule(pluralIndex, messages.length, orgPluralRule)];\n  };\n  const _list = options.list || [];\n  const list = (index) => _list[index];\n  const _named = options.named || {};\n  isNumber(options.pluralIndex) && normalizeNamed(pluralIndex, _named);\n  const named = (key) => _named[key];\n  function message(key) {\n    const msg = isFunction(options.messages) ? options.messages(key) : isObject(options.messages) ? options.messages[key] : false;\n    return !msg ? options.parent ? options.parent.message(key) : DEFAULT_MESSAGE : msg;\n  }\n  const _modifier = (name) => options.modifiers ? options.modifiers[name] : DEFAULT_MODIFIER;\n  const normalize = isPlainObject(options.processor) && isFunction(options.processor.normalize) ? options.processor.normalize : DEFAULT_NORMALIZE;\n  const interpolate = isPlainObject(options.processor) && isFunction(options.processor.interpolate) ? options.processor.interpolate : DEFAULT_INTERPOLATE;\n  const type = isPlainObject(options.processor) && isString(options.processor.type) ? options.processor.type : DEFAULT_MESSAGE_DATA_TYPE;\n  const linked = (key, ...args) => {\n    const [arg1, arg2] = args;\n    let type2 = \"text\";\n    let modifier = \"\";\n    if (args.length === 1) {\n      if (isObject(arg1)) {\n        modifier = arg1.modifier || modifier;\n        type2 = arg1.type || type2;\n      } else if (isString(arg1)) {\n        modifier = arg1 || modifier;\n      }\n    } else if (args.length === 2) {\n      if (isString(arg1)) {\n        modifier = arg1 || modifier;\n      }\n      if (isString(arg2)) {\n        type2 = arg2 || type2;\n      }\n    }\n    let msg = message(key)(ctx);\n    if (type2 === \"vnode\" && isArray(msg) && modifier) {\n      msg = msg[0];\n    }\n    return modifier ? _modifier(modifier)(msg, type2) : msg;\n  };\n  const ctx = {\n    [\"list\"]: list,\n    [\"named\"]: named,\n    [\"plural\"]: plural,\n    [\"linked\"]: linked,\n    [\"message\"]: message,\n    [\"type\"]: type,\n    [\"interpolate\"]: interpolate,\n    [\"normalize\"]: normalize\n  };\n  return ctx;\n}\nvar devtools = null;\nfunction setDevToolsHook(hook) {\n  devtools = hook;\n}\nfunction initI18nDevTools(i18n, version, meta) {\n  devtools && devtools.emit(IntlifyDevToolsHooks.I18nInit, {\n    timestamp: Date.now(),\n    i18n,\n    version,\n    meta\n  });\n}\nvar translateDevTools = createDevToolsHook(IntlifyDevToolsHooks.FunctionTranslate);\nfunction createDevToolsHook(hook) {\n  return (payloads) => devtools && devtools.emit(hook, payloads);\n}\nvar CoreWarnCodes = {\n  NOT_FOUND_KEY: 1,\n  FALLBACK_TO_TRANSLATE: 2,\n  CANNOT_FORMAT_NUMBER: 3,\n  FALLBACK_TO_NUMBER_FORMAT: 4,\n  CANNOT_FORMAT_DATE: 5,\n  FALLBACK_TO_DATE_FORMAT: 6,\n  __EXTEND_POINT__: 7\n};\nvar warnMessages = {\n  [CoreWarnCodes.NOT_FOUND_KEY]: `Not found '{key}' key in '{locale}' locale messages.`,\n  [CoreWarnCodes.FALLBACK_TO_TRANSLATE]: `Fall back to translate '{key}' key with '{target}' locale.`,\n  [CoreWarnCodes.CANNOT_FORMAT_NUMBER]: `Cannot format a number value due to not supported Intl.NumberFormat.`,\n  [CoreWarnCodes.FALLBACK_TO_NUMBER_FORMAT]: `Fall back to number format '{key}' key with '{target}' locale.`,\n  [CoreWarnCodes.CANNOT_FORMAT_DATE]: `Cannot format a date value due to not supported Intl.DateTimeFormat.`,\n  [CoreWarnCodes.FALLBACK_TO_DATE_FORMAT]: `Fall back to datetime format '{key}' key with '{target}' locale.`\n};\nfunction getWarnMessage(code3, ...args) {\n  return format(warnMessages[code3], ...args);\n}\nfunction fallbackWithSimple(ctx, fallback, start) {\n  return [.../* @__PURE__ */ new Set([\n    start,\n    ...isArray(fallback) ? fallback : isObject(fallback) ? Object.keys(fallback) : isString(fallback) ? [fallback] : [start]\n  ])];\n}\nfunction fallbackWithLocaleChain(ctx, fallback, start) {\n  const startLocale = isString(start) ? start : DEFAULT_LOCALE;\n  const context = ctx;\n  if (!context.__localeChainCache) {\n    context.__localeChainCache = /* @__PURE__ */ new Map();\n  }\n  let chain = context.__localeChainCache.get(startLocale);\n  if (!chain) {\n    chain = [];\n    let block = [start];\n    while (isArray(block)) {\n      block = appendBlockToChain(chain, block, fallback);\n    }\n    const defaults = isArray(fallback) || !isPlainObject(fallback) ? fallback : fallback[\"default\"] ? fallback[\"default\"] : null;\n    block = isString(defaults) ? [defaults] : defaults;\n    if (isArray(block)) {\n      appendBlockToChain(chain, block, false);\n    }\n    context.__localeChainCache.set(startLocale, chain);\n  }\n  return chain;\n}\nfunction appendBlockToChain(chain, block, blocks) {\n  let follow = true;\n  for (let i = 0; i < block.length && isBoolean(follow); i++) {\n    const locale = block[i];\n    if (isString(locale)) {\n      follow = appendLocaleToChain(chain, block[i], blocks);\n    }\n  }\n  return follow;\n}\nfunction appendLocaleToChain(chain, locale, blocks) {\n  let follow;\n  const tokens = locale.split(\"-\");\n  do {\n    const target = tokens.join(\"-\");\n    follow = appendItemToChain(chain, target, blocks);\n    tokens.splice(-1, 1);\n  } while (tokens.length && follow === true);\n  return follow;\n}\nfunction appendItemToChain(chain, target, blocks) {\n  let follow = false;\n  if (!chain.includes(target)) {\n    follow = true;\n    if (target) {\n      follow = target[target.length - 1] !== \"!\";\n      const locale = target.replace(/!/g, \"\");\n      chain.push(locale);\n      if ((isArray(blocks) || isPlainObject(blocks)) && blocks[locale]) {\n        follow = blocks[locale];\n      }\n    }\n  }\n  return follow;\n}\nvar VERSION = \"9.2.2\";\nvar NOT_REOSLVED = -1;\nvar DEFAULT_LOCALE = \"en-US\";\nvar MISSING_RESOLVE_VALUE = \"\";\nvar capitalize = (str) => `${str.charAt(0).toLocaleUpperCase()}${str.substr(1)}`;\nfunction getDefaultLinkedModifiers() {\n  return {\n    upper: (val, type) => {\n      return type === \"text\" && isString(val) ? val.toUpperCase() : type === \"vnode\" && isObject(val) && \"__v_isVNode\" in val ? val.children.toUpperCase() : val;\n    },\n    lower: (val, type) => {\n      return type === \"text\" && isString(val) ? val.toLowerCase() : type === \"vnode\" && isObject(val) && \"__v_isVNode\" in val ? val.children.toLowerCase() : val;\n    },\n    capitalize: (val, type) => {\n      return type === \"text\" && isString(val) ? capitalize(val) : type === \"vnode\" && isObject(val) && \"__v_isVNode\" in val ? capitalize(val.children) : val;\n    }\n  };\n}\nvar _compiler;\nfunction registerMessageCompiler(compiler) {\n  _compiler = compiler;\n}\nvar _resolver;\nfunction registerMessageResolver(resolver) {\n  _resolver = resolver;\n}\nvar _fallbacker;\nfunction registerLocaleFallbacker(fallbacker) {\n  _fallbacker = fallbacker;\n}\nvar _additionalMeta = null;\nvar setAdditionalMeta = (meta) => {\n  _additionalMeta = meta;\n};\nvar getAdditionalMeta = () => _additionalMeta;\nvar _fallbackContext = null;\nvar setFallbackContext = (context) => {\n  _fallbackContext = context;\n};\nvar getFallbackContext = () => _fallbackContext;\nvar _cid = 0;\nfunction createCoreContext(options = {}) {\n  const version = isString(options.version) ? options.version : VERSION;\n  const locale = isString(options.locale) ? options.locale : DEFAULT_LOCALE;\n  const fallbackLocale = isArray(options.fallbackLocale) || isPlainObject(options.fallbackLocale) || isString(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : locale;\n  const messages = isPlainObject(options.messages) ? options.messages : { [locale]: {} };\n  const datetimeFormats = isPlainObject(options.datetimeFormats) ? options.datetimeFormats : { [locale]: {} };\n  const numberFormats = isPlainObject(options.numberFormats) ? options.numberFormats : { [locale]: {} };\n  const modifiers = assign({}, options.modifiers || {}, getDefaultLinkedModifiers());\n  const pluralRules = options.pluralRules || {};\n  const missing = isFunction(options.missing) ? options.missing : null;\n  const missingWarn = isBoolean(options.missingWarn) || isRegExp(options.missingWarn) ? options.missingWarn : true;\n  const fallbackWarn = isBoolean(options.fallbackWarn) || isRegExp(options.fallbackWarn) ? options.fallbackWarn : true;\n  const fallbackFormat = !!options.fallbackFormat;\n  const unresolving = !!options.unresolving;\n  const postTranslation = isFunction(options.postTranslation) ? options.postTranslation : null;\n  const processor = isPlainObject(options.processor) ? options.processor : null;\n  const warnHtmlMessage = isBoolean(options.warnHtmlMessage) ? options.warnHtmlMessage : true;\n  const escapeParameter = !!options.escapeParameter;\n  const messageCompiler = isFunction(options.messageCompiler) ? options.messageCompiler : _compiler;\n  const messageResolver = isFunction(options.messageResolver) ? options.messageResolver : _resolver || resolveWithKeyValue;\n  const localeFallbacker = isFunction(options.localeFallbacker) ? options.localeFallbacker : _fallbacker || fallbackWithSimple;\n  const fallbackContext = isObject(options.fallbackContext) ? options.fallbackContext : void 0;\n  const onWarn = isFunction(options.onWarn) ? options.onWarn : warn;\n  const internalOptions = options;\n  const __datetimeFormatters = isObject(internalOptions.__datetimeFormatters) ? internalOptions.__datetimeFormatters : /* @__PURE__ */ new Map();\n  const __numberFormatters = isObject(internalOptions.__numberFormatters) ? internalOptions.__numberFormatters : /* @__PURE__ */ new Map();\n  const __meta = isObject(internalOptions.__meta) ? internalOptions.__meta : {};\n  _cid++;\n  const context = {\n    version,\n    cid: _cid,\n    locale,\n    fallbackLocale,\n    messages,\n    modifiers,\n    pluralRules,\n    missing,\n    missingWarn,\n    fallbackWarn,\n    fallbackFormat,\n    unresolving,\n    postTranslation,\n    processor,\n    warnHtmlMessage,\n    escapeParameter,\n    messageCompiler,\n    messageResolver,\n    localeFallbacker,\n    fallbackContext,\n    onWarn,\n    __meta\n  };\n  {\n    context.datetimeFormats = datetimeFormats;\n    context.numberFormats = numberFormats;\n    context.__datetimeFormatters = __datetimeFormatters;\n    context.__numberFormatters = __numberFormatters;\n  }\n  if (true) {\n    context.__v_emitter = internalOptions.__v_emitter != null ? internalOptions.__v_emitter : void 0;\n  }\n  if (true) {\n    initI18nDevTools(context, version, __meta);\n  }\n  return context;\n}\nfunction isTranslateFallbackWarn(fallback, key) {\n  return fallback instanceof RegExp ? fallback.test(key) : fallback;\n}\nfunction isTranslateMissingWarn(missing, key) {\n  return missing instanceof RegExp ? missing.test(key) : missing;\n}\nfunction handleMissing(context, key, locale, missingWarn, type) {\n  const { missing, onWarn } = context;\n  if (true) {\n    const emitter = context.__v_emitter;\n    if (emitter) {\n      emitter.emit(\"missing\", {\n        locale,\n        key,\n        type,\n        groupId: `${type}:${key}`\n      });\n    }\n  }\n  if (missing !== null) {\n    const ret = missing(context, locale, key, type);\n    return isString(ret) ? ret : key;\n  } else {\n    if (isTranslateMissingWarn(missingWarn, key)) {\n      onWarn(getWarnMessage(CoreWarnCodes.NOT_FOUND_KEY, { key, locale }));\n    }\n    return key;\n  }\n}\nfunction updateFallbackLocale(ctx, locale, fallback) {\n  const context = ctx;\n  context.__localeChainCache = /* @__PURE__ */ new Map();\n  ctx.localeFallbacker(ctx, fallback, locale);\n}\nvar RE_HTML_TAG = /<\\/?[\\w\\s=\"/.':;#-\\/]+>/;\nvar WARN_MESSAGE = `Detected HTML in '{source}' message. Recommend not using HTML messages to avoid XSS.`;\nfunction checkHtmlMessage(source, options) {\n  const warnHtmlMessage = isBoolean(options.warnHtmlMessage) ? options.warnHtmlMessage : true;\n  if (warnHtmlMessage && RE_HTML_TAG.test(source)) {\n    warn(format(WARN_MESSAGE, { source }));\n  }\n}\nvar defaultOnCacheKey = (source) => source;\nvar compileCache = /* @__PURE__ */ Object.create(null);\nfunction compileToFunction(source, options = {}) {\n  {\n    checkHtmlMessage(source, options);\n    const onCacheKey = options.onCacheKey || defaultOnCacheKey;\n    const key = onCacheKey(source);\n    const cached = compileCache[key];\n    if (cached) {\n      return cached;\n    }\n    let occurred = false;\n    const onError = options.onError || defaultOnError;\n    options.onError = (err) => {\n      occurred = true;\n      onError(err);\n    };\n    const { code: code3 } = baseCompile(source, options);\n    const msg = new Function(`return ${code3}`)();\n    return !occurred ? compileCache[key] = msg : msg;\n  }\n}\nvar code = CompileErrorCodes.__EXTEND_POINT__;\nvar inc = () => ++code;\nvar CoreErrorCodes = {\n  INVALID_ARGUMENT: code,\n  INVALID_DATE_ARGUMENT: inc(),\n  INVALID_ISO_DATE_ARGUMENT: inc(),\n  __EXTEND_POINT__: inc()\n};\nfunction createCoreError(code3) {\n  return createCompileError(code3, null, true ? { messages: errorMessages2 } : void 0);\n}\nvar errorMessages2 = {\n  [CoreErrorCodes.INVALID_ARGUMENT]: \"Invalid arguments\",\n  [CoreErrorCodes.INVALID_DATE_ARGUMENT]: \"The date provided is an invalid Date object.Make sure your Date represents a valid date.\",\n  [CoreErrorCodes.INVALID_ISO_DATE_ARGUMENT]: \"The argument provided is not a valid ISO date string\"\n};\nvar NOOP_MESSAGE_FUNCTION = () => \"\";\nvar isMessageFunction = (val) => isFunction(val);\nfunction translate(context, ...args) {\n  const { fallbackFormat, postTranslation, unresolving, messageCompiler, fallbackLocale, messages } = context;\n  const [key, options] = parseTranslateArgs(...args);\n  const missingWarn = isBoolean(options.missingWarn) ? options.missingWarn : context.missingWarn;\n  const fallbackWarn = isBoolean(options.fallbackWarn) ? options.fallbackWarn : context.fallbackWarn;\n  const escapeParameter = isBoolean(options.escapeParameter) ? options.escapeParameter : context.escapeParameter;\n  const resolvedMessage = !!options.resolvedMessage;\n  const defaultMsgOrKey = isString(options.default) || isBoolean(options.default) ? !isBoolean(options.default) ? options.default : !messageCompiler ? () => key : key : fallbackFormat ? !messageCompiler ? () => key : key : \"\";\n  const enableDefaultMsg = fallbackFormat || defaultMsgOrKey !== \"\";\n  const locale = isString(options.locale) ? options.locale : context.locale;\n  escapeParameter && escapeParams(options);\n  let [formatScope, targetLocale, message] = !resolvedMessage ? resolveMessageFormat(context, key, locale, fallbackLocale, fallbackWarn, missingWarn) : [\n    key,\n    locale,\n    messages[locale] || {}\n  ];\n  let format2 = formatScope;\n  let cacheBaseKey = key;\n  if (!resolvedMessage && !(isString(format2) || isMessageFunction(format2))) {\n    if (enableDefaultMsg) {\n      format2 = defaultMsgOrKey;\n      cacheBaseKey = format2;\n    }\n  }\n  if (!resolvedMessage && (!(isString(format2) || isMessageFunction(format2)) || !isString(targetLocale))) {\n    return unresolving ? NOT_REOSLVED : key;\n  }\n  if (isString(format2) && context.messageCompiler == null) {\n    warn(`The message format compilation is not supported in this build. Because message compiler isn't included. You need to pre-compilation all message format. So translate function return '${key}'.`);\n    return key;\n  }\n  let occurred = false;\n  const errorDetector = () => {\n    occurred = true;\n  };\n  const msg = !isMessageFunction(format2) ? compileMessageFormat(context, key, targetLocale, format2, cacheBaseKey, errorDetector) : format2;\n  if (occurred) {\n    return format2;\n  }\n  const ctxOptions = getMessageContextOptions(context, targetLocale, message, options);\n  const msgContext = createMessageContext(ctxOptions);\n  const messaged = evaluateMessage(context, msg, msgContext);\n  const ret = postTranslation ? postTranslation(messaged, key) : messaged;\n  if (true) {\n    const payloads = {\n      timestamp: Date.now(),\n      key: isString(key) ? key : isMessageFunction(format2) ? format2.key : \"\",\n      locale: targetLocale || (isMessageFunction(format2) ? format2.locale : \"\"),\n      format: isString(format2) ? format2 : isMessageFunction(format2) ? format2.source : \"\",\n      message: ret\n    };\n    payloads.meta = assign({}, context.__meta, getAdditionalMeta() || {});\n    translateDevTools(payloads);\n  }\n  return ret;\n}\nfunction escapeParams(options) {\n  if (isArray(options.list)) {\n    options.list = options.list.map((item) => isString(item) ? escapeHtml(item) : item);\n  } else if (isObject(options.named)) {\n    Object.keys(options.named).forEach((key) => {\n      if (isString(options.named[key])) {\n        options.named[key] = escapeHtml(options.named[key]);\n      }\n    });\n  }\n}\nfunction resolveMessageFormat(context, key, locale, fallbackLocale, fallbackWarn, missingWarn) {\n  const { messages, onWarn, messageResolver: resolveValue2, localeFallbacker } = context;\n  const locales = localeFallbacker(context, fallbackLocale, locale);\n  let message = {};\n  let targetLocale;\n  let format2 = null;\n  let from = locale;\n  let to = null;\n  const type = \"translate\";\n  for (let i = 0; i < locales.length; i++) {\n    targetLocale = to = locales[i];\n    if (locale !== targetLocale && isTranslateFallbackWarn(fallbackWarn, key)) {\n      onWarn(getWarnMessage(CoreWarnCodes.FALLBACK_TO_TRANSLATE, {\n        key,\n        target: targetLocale\n      }));\n    }\n    if (locale !== targetLocale) {\n      const emitter = context.__v_emitter;\n      if (emitter) {\n        emitter.emit(\"fallback\", {\n          type,\n          key,\n          from,\n          to,\n          groupId: `${type}:${key}`\n        });\n      }\n    }\n    message = messages[targetLocale] || {};\n    let start = null;\n    let startTag;\n    let endTag;\n    if (inBrowser) {\n      start = window.performance.now();\n      startTag = \"intlify-message-resolve-start\";\n      endTag = \"intlify-message-resolve-end\";\n      mark && mark(startTag);\n    }\n    if ((format2 = resolveValue2(message, key)) === null) {\n      format2 = message[key];\n    }\n    if (inBrowser) {\n      const end = window.performance.now();\n      const emitter = context.__v_emitter;\n      if (emitter && start && format2) {\n        emitter.emit(\"message-resolve\", {\n          type: \"message-resolve\",\n          key,\n          message: format2,\n          time: end - start,\n          groupId: `${type}:${key}`\n        });\n      }\n      if (startTag && endTag && mark && measure) {\n        mark(endTag);\n        measure(\"intlify message resolve\", startTag, endTag);\n      }\n    }\n    if (isString(format2) || isFunction(format2))\n      break;\n    const missingRet = handleMissing(\n      context,\n      key,\n      targetLocale,\n      missingWarn,\n      type\n    );\n    if (missingRet !== key) {\n      format2 = missingRet;\n    }\n    from = to;\n  }\n  return [format2, targetLocale, message];\n}\nfunction compileMessageFormat(context, key, targetLocale, format2, cacheBaseKey, errorDetector) {\n  const { messageCompiler, warnHtmlMessage } = context;\n  if (isMessageFunction(format2)) {\n    const msg2 = format2;\n    msg2.locale = msg2.locale || targetLocale;\n    msg2.key = msg2.key || key;\n    return msg2;\n  }\n  if (messageCompiler == null) {\n    const msg2 = () => format2;\n    msg2.locale = targetLocale;\n    msg2.key = key;\n    return msg2;\n  }\n  let start = null;\n  let startTag;\n  let endTag;\n  if (inBrowser) {\n    start = window.performance.now();\n    startTag = \"intlify-message-compilation-start\";\n    endTag = \"intlify-message-compilation-end\";\n    mark && mark(startTag);\n  }\n  const msg = messageCompiler(format2, getCompileOptions(context, targetLocale, cacheBaseKey, format2, warnHtmlMessage, errorDetector));\n  if (inBrowser) {\n    const end = window.performance.now();\n    const emitter = context.__v_emitter;\n    if (emitter && start) {\n      emitter.emit(\"message-compilation\", {\n        type: \"message-compilation\",\n        message: format2,\n        time: end - start,\n        groupId: `${\"translate\"}:${key}`\n      });\n    }\n    if (startTag && endTag && mark && measure) {\n      mark(endTag);\n      measure(\"intlify message compilation\", startTag, endTag);\n    }\n  }\n  msg.locale = targetLocale;\n  msg.key = key;\n  msg.source = format2;\n  return msg;\n}\nfunction evaluateMessage(context, msg, msgCtx) {\n  let start = null;\n  let startTag;\n  let endTag;\n  if (inBrowser) {\n    start = window.performance.now();\n    startTag = \"intlify-message-evaluation-start\";\n    endTag = \"intlify-message-evaluation-end\";\n    mark && mark(startTag);\n  }\n  const messaged = msg(msgCtx);\n  if (inBrowser) {\n    const end = window.performance.now();\n    const emitter = context.__v_emitter;\n    if (emitter && start) {\n      emitter.emit(\"message-evaluation\", {\n        type: \"message-evaluation\",\n        value: messaged,\n        time: end - start,\n        groupId: `${\"translate\"}:${msg.key}`\n      });\n    }\n    if (startTag && endTag && mark && measure) {\n      mark(endTag);\n      measure(\"intlify message evaluation\", startTag, endTag);\n    }\n  }\n  return messaged;\n}\nfunction parseTranslateArgs(...args) {\n  const [arg1, arg2, arg3] = args;\n  const options = {};\n  if (!isString(arg1) && !isNumber(arg1) && !isMessageFunction(arg1)) {\n    throw createCoreError(CoreErrorCodes.INVALID_ARGUMENT);\n  }\n  const key = isNumber(arg1) ? String(arg1) : isMessageFunction(arg1) ? arg1 : arg1;\n  if (isNumber(arg2)) {\n    options.plural = arg2;\n  } else if (isString(arg2)) {\n    options.default = arg2;\n  } else if (isPlainObject(arg2) && !isEmptyObject(arg2)) {\n    options.named = arg2;\n  } else if (isArray(arg2)) {\n    options.list = arg2;\n  }\n  if (isNumber(arg3)) {\n    options.plural = arg3;\n  } else if (isString(arg3)) {\n    options.default = arg3;\n  } else if (isPlainObject(arg3)) {\n    assign(options, arg3);\n  }\n  return [key, options];\n}\nfunction getCompileOptions(context, locale, key, source, warnHtmlMessage, errorDetector) {\n  return {\n    warnHtmlMessage,\n    onError: (err) => {\n      errorDetector && errorDetector(err);\n      if (true) {\n        const message = `Message compilation error: ${err.message}`;\n        const codeFrame = err.location && generateCodeFrame(source, err.location.start.offset, err.location.end.offset);\n        const emitter = context.__v_emitter;\n        if (emitter) {\n          emitter.emit(\"compile-error\", {\n            message: source,\n            error: err.message,\n            start: err.location && err.location.start.offset,\n            end: err.location && err.location.end.offset,\n            groupId: `${\"translate\"}:${key}`\n          });\n        }\n        console.error(codeFrame ? `${message}\n${codeFrame}` : message);\n      } else {\n        throw err;\n      }\n    },\n    onCacheKey: (source2) => generateFormatCacheKey(locale, key, source2)\n  };\n}\nfunction getMessageContextOptions(context, locale, message, options) {\n  const { modifiers, pluralRules, messageResolver: resolveValue2, fallbackLocale, fallbackWarn, missingWarn, fallbackContext } = context;\n  const resolveMessage = (key) => {\n    let val = resolveValue2(message, key);\n    if (val == null && fallbackContext) {\n      const [, , message2] = resolveMessageFormat(fallbackContext, key, locale, fallbackLocale, fallbackWarn, missingWarn);\n      val = resolveValue2(message2, key);\n    }\n    if (isString(val)) {\n      let occurred = false;\n      const errorDetector = () => {\n        occurred = true;\n      };\n      const msg = compileMessageFormat(context, key, locale, val, key, errorDetector);\n      return !occurred ? msg : NOOP_MESSAGE_FUNCTION;\n    } else if (isMessageFunction(val)) {\n      return val;\n    } else {\n      return NOOP_MESSAGE_FUNCTION;\n    }\n  };\n  const ctxOptions = {\n    locale,\n    modifiers,\n    pluralRules,\n    messages: resolveMessage\n  };\n  if (context.processor) {\n    ctxOptions.processor = context.processor;\n  }\n  if (options.list) {\n    ctxOptions.list = options.list;\n  }\n  if (options.named) {\n    ctxOptions.named = options.named;\n  }\n  if (isNumber(options.plural)) {\n    ctxOptions.pluralIndex = options.plural;\n  }\n  return ctxOptions;\n}\nvar intlDefined = typeof Intl !== \"undefined\";\nvar Availabilities = {\n  dateTimeFormat: intlDefined && typeof Intl.DateTimeFormat !== \"undefined\",\n  numberFormat: intlDefined && typeof Intl.NumberFormat !== \"undefined\"\n};\nfunction datetime(context, ...args) {\n  const { datetimeFormats, unresolving, fallbackLocale, onWarn, localeFallbacker } = context;\n  const { __datetimeFormatters } = context;\n  if (!Availabilities.dateTimeFormat) {\n    onWarn(getWarnMessage(CoreWarnCodes.CANNOT_FORMAT_DATE));\n    return MISSING_RESOLVE_VALUE;\n  }\n  const [key, value, options, overrides] = parseDateTimeArgs(...args);\n  const missingWarn = isBoolean(options.missingWarn) ? options.missingWarn : context.missingWarn;\n  const fallbackWarn = isBoolean(options.fallbackWarn) ? options.fallbackWarn : context.fallbackWarn;\n  const part = !!options.part;\n  const locale = isString(options.locale) ? options.locale : context.locale;\n  const locales = localeFallbacker(\n    context,\n    fallbackLocale,\n    locale\n  );\n  if (!isString(key) || key === \"\") {\n    return new Intl.DateTimeFormat(locale, overrides).format(value);\n  }\n  let datetimeFormat = {};\n  let targetLocale;\n  let format2 = null;\n  let from = locale;\n  let to = null;\n  const type = \"datetime format\";\n  for (let i = 0; i < locales.length; i++) {\n    targetLocale = to = locales[i];\n    if (locale !== targetLocale && isTranslateFallbackWarn(fallbackWarn, key)) {\n      onWarn(getWarnMessage(CoreWarnCodes.FALLBACK_TO_DATE_FORMAT, {\n        key,\n        target: targetLocale\n      }));\n    }\n    if (locale !== targetLocale) {\n      const emitter = context.__v_emitter;\n      if (emitter) {\n        emitter.emit(\"fallback\", {\n          type,\n          key,\n          from,\n          to,\n          groupId: `${type}:${key}`\n        });\n      }\n    }\n    datetimeFormat = datetimeFormats[targetLocale] || {};\n    format2 = datetimeFormat[key];\n    if (isPlainObject(format2))\n      break;\n    handleMissing(context, key, targetLocale, missingWarn, type);\n    from = to;\n  }\n  if (!isPlainObject(format2) || !isString(targetLocale)) {\n    return unresolving ? NOT_REOSLVED : key;\n  }\n  let id = `${targetLocale}__${key}`;\n  if (!isEmptyObject(overrides)) {\n    id = `${id}__${JSON.stringify(overrides)}`;\n  }\n  let formatter = __datetimeFormatters.get(id);\n  if (!formatter) {\n    formatter = new Intl.DateTimeFormat(targetLocale, assign({}, format2, overrides));\n    __datetimeFormatters.set(id, formatter);\n  }\n  return !part ? formatter.format(value) : formatter.formatToParts(value);\n}\nvar DATETIME_FORMAT_OPTIONS_KEYS = [\n  \"localeMatcher\",\n  \"weekday\",\n  \"era\",\n  \"year\",\n  \"month\",\n  \"day\",\n  \"hour\",\n  \"minute\",\n  \"second\",\n  \"timeZoneName\",\n  \"formatMatcher\",\n  \"hour12\",\n  \"timeZone\",\n  \"dateStyle\",\n  \"timeStyle\",\n  \"calendar\",\n  \"dayPeriod\",\n  \"numberingSystem\",\n  \"hourCycle\",\n  \"fractionalSecondDigits\"\n];\nfunction parseDateTimeArgs(...args) {\n  const [arg1, arg2, arg3, arg4] = args;\n  const options = {};\n  let overrides = {};\n  let value;\n  if (isString(arg1)) {\n    const matches = arg1.match(/(\\d{4}-\\d{2}-\\d{2})(T|\\s)?(.*)/);\n    if (!matches) {\n      throw createCoreError(CoreErrorCodes.INVALID_ISO_DATE_ARGUMENT);\n    }\n    const dateTime = matches[3] ? matches[3].trim().startsWith(\"T\") ? `${matches[1].trim()}${matches[3].trim()}` : `${matches[1].trim()}T${matches[3].trim()}` : matches[1].trim();\n    value = new Date(dateTime);\n    try {\n      value.toISOString();\n    } catch (e) {\n      throw createCoreError(CoreErrorCodes.INVALID_ISO_DATE_ARGUMENT);\n    }\n  } else if (isDate(arg1)) {\n    if (isNaN(arg1.getTime())) {\n      throw createCoreError(CoreErrorCodes.INVALID_DATE_ARGUMENT);\n    }\n    value = arg1;\n  } else if (isNumber(arg1)) {\n    value = arg1;\n  } else {\n    throw createCoreError(CoreErrorCodes.INVALID_ARGUMENT);\n  }\n  if (isString(arg2)) {\n    options.key = arg2;\n  } else if (isPlainObject(arg2)) {\n    Object.keys(arg2).forEach((key) => {\n      if (DATETIME_FORMAT_OPTIONS_KEYS.includes(key)) {\n        overrides[key] = arg2[key];\n      } else {\n        options[key] = arg2[key];\n      }\n    });\n  }\n  if (isString(arg3)) {\n    options.locale = arg3;\n  } else if (isPlainObject(arg3)) {\n    overrides = arg3;\n  }\n  if (isPlainObject(arg4)) {\n    overrides = arg4;\n  }\n  return [options.key || \"\", value, options, overrides];\n}\nfunction clearDateTimeFormat(ctx, locale, format2) {\n  const context = ctx;\n  for (const key in format2) {\n    const id = `${locale}__${key}`;\n    if (!context.__datetimeFormatters.has(id)) {\n      continue;\n    }\n    context.__datetimeFormatters.delete(id);\n  }\n}\nfunction number(context, ...args) {\n  const { numberFormats, unresolving, fallbackLocale, onWarn, localeFallbacker } = context;\n  const { __numberFormatters } = context;\n  if (!Availabilities.numberFormat) {\n    onWarn(getWarnMessage(CoreWarnCodes.CANNOT_FORMAT_NUMBER));\n    return MISSING_RESOLVE_VALUE;\n  }\n  const [key, value, options, overrides] = parseNumberArgs(...args);\n  const missingWarn = isBoolean(options.missingWarn) ? options.missingWarn : context.missingWarn;\n  const fallbackWarn = isBoolean(options.fallbackWarn) ? options.fallbackWarn : context.fallbackWarn;\n  const part = !!options.part;\n  const locale = isString(options.locale) ? options.locale : context.locale;\n  const locales = localeFallbacker(\n    context,\n    fallbackLocale,\n    locale\n  );\n  if (!isString(key) || key === \"\") {\n    return new Intl.NumberFormat(locale, overrides).format(value);\n  }\n  let numberFormat = {};\n  let targetLocale;\n  let format2 = null;\n  let from = locale;\n  let to = null;\n  const type = \"number format\";\n  for (let i = 0; i < locales.length; i++) {\n    targetLocale = to = locales[i];\n    if (locale !== targetLocale && isTranslateFallbackWarn(fallbackWarn, key)) {\n      onWarn(getWarnMessage(CoreWarnCodes.FALLBACK_TO_NUMBER_FORMAT, {\n        key,\n        target: targetLocale\n      }));\n    }\n    if (locale !== targetLocale) {\n      const emitter = context.__v_emitter;\n      if (emitter) {\n        emitter.emit(\"fallback\", {\n          type,\n          key,\n          from,\n          to,\n          groupId: `${type}:${key}`\n        });\n      }\n    }\n    numberFormat = numberFormats[targetLocale] || {};\n    format2 = numberFormat[key];\n    if (isPlainObject(format2))\n      break;\n    handleMissing(context, key, targetLocale, missingWarn, type);\n    from = to;\n  }\n  if (!isPlainObject(format2) || !isString(targetLocale)) {\n    return unresolving ? NOT_REOSLVED : key;\n  }\n  let id = `${targetLocale}__${key}`;\n  if (!isEmptyObject(overrides)) {\n    id = `${id}__${JSON.stringify(overrides)}`;\n  }\n  let formatter = __numberFormatters.get(id);\n  if (!formatter) {\n    formatter = new Intl.NumberFormat(targetLocale, assign({}, format2, overrides));\n    __numberFormatters.set(id, formatter);\n  }\n  return !part ? formatter.format(value) : formatter.formatToParts(value);\n}\nvar NUMBER_FORMAT_OPTIONS_KEYS = [\n  \"localeMatcher\",\n  \"style\",\n  \"currency\",\n  \"currencyDisplay\",\n  \"currencySign\",\n  \"useGrouping\",\n  \"minimumIntegerDigits\",\n  \"minimumFractionDigits\",\n  \"maximumFractionDigits\",\n  \"minimumSignificantDigits\",\n  \"maximumSignificantDigits\",\n  \"compactDisplay\",\n  \"notation\",\n  \"signDisplay\",\n  \"unit\",\n  \"unitDisplay\",\n  \"roundingMode\",\n  \"roundingPriority\",\n  \"roundingIncrement\",\n  \"trailingZeroDisplay\"\n];\nfunction parseNumberArgs(...args) {\n  const [arg1, arg2, arg3, arg4] = args;\n  const options = {};\n  let overrides = {};\n  if (!isNumber(arg1)) {\n    throw createCoreError(CoreErrorCodes.INVALID_ARGUMENT);\n  }\n  const value = arg1;\n  if (isString(arg2)) {\n    options.key = arg2;\n  } else if (isPlainObject(arg2)) {\n    Object.keys(arg2).forEach((key) => {\n      if (NUMBER_FORMAT_OPTIONS_KEYS.includes(key)) {\n        overrides[key] = arg2[key];\n      } else {\n        options[key] = arg2[key];\n      }\n    });\n  }\n  if (isString(arg3)) {\n    options.locale = arg3;\n  } else if (isPlainObject(arg3)) {\n    overrides = arg3;\n  }\n  if (isPlainObject(arg4)) {\n    overrides = arg4;\n  }\n  return [options.key || \"\", value, options, overrides];\n}\nfunction clearNumberFormat(ctx, locale, format2) {\n  const context = ctx;\n  for (const key in format2) {\n    const id = `${locale}__${key}`;\n    if (!context.__numberFormatters.has(id)) {\n      continue;\n    }\n    context.__numberFormatters.delete(id);\n  }\n}\n{\n  if (typeof __INTLIFY_PROD_DEVTOOLS__ !== \"boolean\") {\n    getGlobalThis().__INTLIFY_PROD_DEVTOOLS__ = false;\n  }\n}\n\n// node_modules/.pnpm/@intlify+vue-devtools@9.2.2/node_modules/@intlify/vue-devtools/dist/vue-devtools.esm-bundler.js\nvar VueDevToolsLabels = {\n  [\"vue-devtools-plugin-vue-i18n\"]: \"Vue I18n devtools\",\n  [\"vue-i18n-resource-inspector\"]: \"I18n Resources\",\n  [\"vue-i18n-timeline\"]: \"Vue I18n\"\n};\nvar VueDevToolsPlaceholders = {\n  [\"vue-i18n-resource-inspector\"]: \"Search for scopes ...\"\n};\nvar VueDevToolsTimelineColors = {\n  [\"vue-i18n-timeline\"]: 16764185\n};\n\n// node_modules/.pnpm/vue-i18n@9.2.2_vue@3.2.39/node_modules/vue-i18n/dist/vue-i18n.esm-bundler.js\nvar VERSION2 = \"9.2.2\";\nfunction initFeatureFlags() {\n  let needWarn = false;\n  if (typeof __VUE_I18N_FULL_INSTALL__ !== \"boolean\") {\n    needWarn = true;\n    getGlobalThis().__VUE_I18N_FULL_INSTALL__ = true;\n  }\n  if (typeof __VUE_I18N_LEGACY_API__ !== \"boolean\") {\n    needWarn = true;\n    getGlobalThis().__VUE_I18N_LEGACY_API__ = true;\n  }\n  if (typeof __INTLIFY_PROD_DEVTOOLS__ !== \"boolean\") {\n    getGlobalThis().__INTLIFY_PROD_DEVTOOLS__ = false;\n  }\n  if (needWarn) {\n    console.warn(`You are running the esm-bundler build of vue-i18n. It is recommended to configure your bundler to explicitly replace feature flag globals with boolean literals to get proper tree-shaking in the final bundle.`);\n  }\n}\nvar code$1 = CoreWarnCodes.__EXTEND_POINT__;\nvar inc$1 = () => ++code$1;\nvar I18nWarnCodes = {\n  FALLBACK_TO_ROOT: code$1,\n  NOT_SUPPORTED_PRESERVE: inc$1(),\n  NOT_SUPPORTED_FORMATTER: inc$1(),\n  NOT_SUPPORTED_PRESERVE_DIRECTIVE: inc$1(),\n  NOT_SUPPORTED_GET_CHOICE_INDEX: inc$1(),\n  COMPONENT_NAME_LEGACY_COMPATIBLE: inc$1(),\n  NOT_FOUND_PARENT_SCOPE: inc$1()\n};\nvar warnMessages2 = {\n  [I18nWarnCodes.FALLBACK_TO_ROOT]: `Fall back to {type} '{key}' with root locale.`,\n  [I18nWarnCodes.NOT_SUPPORTED_PRESERVE]: `Not supported 'preserve'.`,\n  [I18nWarnCodes.NOT_SUPPORTED_FORMATTER]: `Not supported 'formatter'.`,\n  [I18nWarnCodes.NOT_SUPPORTED_PRESERVE_DIRECTIVE]: `Not supported 'preserveDirectiveContent'.`,\n  [I18nWarnCodes.NOT_SUPPORTED_GET_CHOICE_INDEX]: `Not supported 'getChoiceIndex'.`,\n  [I18nWarnCodes.COMPONENT_NAME_LEGACY_COMPATIBLE]: `Component name legacy compatible: '{name}' -> 'i18n'`,\n  [I18nWarnCodes.NOT_FOUND_PARENT_SCOPE]: `Not found parent scope. use the global scope.`\n};\nfunction getWarnMessage2(code3, ...args) {\n  return format(warnMessages2[code3], ...args);\n}\nvar code2 = CompileErrorCodes.__EXTEND_POINT__;\nvar inc2 = () => ++code2;\nvar I18nErrorCodes = {\n  UNEXPECTED_RETURN_TYPE: code2,\n  INVALID_ARGUMENT: inc2(),\n  MUST_BE_CALL_SETUP_TOP: inc2(),\n  NOT_INSLALLED: inc2(),\n  NOT_AVAILABLE_IN_LEGACY_MODE: inc2(),\n  REQUIRED_VALUE: inc2(),\n  INVALID_VALUE: inc2(),\n  CANNOT_SETUP_VUE_DEVTOOLS_PLUGIN: inc2(),\n  NOT_INSLALLED_WITH_PROVIDE: inc2(),\n  UNEXPECTED_ERROR: inc2(),\n  NOT_COMPATIBLE_LEGACY_VUE_I18N: inc2(),\n  BRIDGE_SUPPORT_VUE_2_ONLY: inc2(),\n  MUST_DEFINE_I18N_OPTION_IN_ALLOW_COMPOSITION: inc2(),\n  NOT_AVAILABLE_COMPOSITION_IN_LEGACY: inc2(),\n  __EXTEND_POINT__: inc2()\n};\nfunction createI18nError(code3, ...args) {\n  return createCompileError(code3, null, true ? { messages: errorMessages3, args } : void 0);\n}\nvar errorMessages3 = {\n  [I18nErrorCodes.UNEXPECTED_RETURN_TYPE]: \"Unexpected return type in composer\",\n  [I18nErrorCodes.INVALID_ARGUMENT]: \"Invalid argument\",\n  [I18nErrorCodes.MUST_BE_CALL_SETUP_TOP]: \"Must be called at the top of a `setup` function\",\n  [I18nErrorCodes.NOT_INSLALLED]: \"Need to install with `app.use` function\",\n  [I18nErrorCodes.UNEXPECTED_ERROR]: \"Unexpected error\",\n  [I18nErrorCodes.NOT_AVAILABLE_IN_LEGACY_MODE]: \"Not available in legacy mode\",\n  [I18nErrorCodes.REQUIRED_VALUE]: `Required in value: {0}`,\n  [I18nErrorCodes.INVALID_VALUE]: `Invalid value`,\n  [I18nErrorCodes.CANNOT_SETUP_VUE_DEVTOOLS_PLUGIN]: `Cannot setup vue-devtools plugin`,\n  [I18nErrorCodes.NOT_INSLALLED_WITH_PROVIDE]: \"Need to install with `provide` function\",\n  [I18nErrorCodes.NOT_COMPATIBLE_LEGACY_VUE_I18N]: \"Not compatible legacy VueI18n.\",\n  [I18nErrorCodes.BRIDGE_SUPPORT_VUE_2_ONLY]: \"vue-i18n-bridge support Vue 2.x only\",\n  [I18nErrorCodes.MUST_DEFINE_I18N_OPTION_IN_ALLOW_COMPOSITION]: \"Must define \\u2018i18n\\u2019 option or custom block in Composition API with using local scope in Legacy API mode\",\n  [I18nErrorCodes.NOT_AVAILABLE_COMPOSITION_IN_LEGACY]: \"Not available Compostion API in Legacy API mode. Please make sure that the legacy API mode is working properly\"\n};\nvar TransrateVNodeSymbol = makeSymbol(\"__transrateVNode\");\nvar DatetimePartsSymbol = makeSymbol(\"__datetimeParts\");\nvar NumberPartsSymbol = makeSymbol(\"__numberParts\");\nvar EnableEmitter = makeSymbol(\"__enableEmitter\");\nvar DisableEmitter = makeSymbol(\"__disableEmitter\");\nvar SetPluralRulesSymbol = makeSymbol(\"__setPluralRules\");\nmakeSymbol(\"__intlifyMeta\");\nvar InejctWithOption = makeSymbol(\"__injectWithOption\");\nvar __VUE_I18N_BRIDGE__ = \"__VUE_I18N_BRIDGE__\";\nfunction handleFlatJson(obj) {\n  if (!isObject(obj)) {\n    return obj;\n  }\n  for (const key in obj) {\n    if (!hasOwn(obj, key)) {\n      continue;\n    }\n    if (!key.includes(\".\")) {\n      if (isObject(obj[key])) {\n        handleFlatJson(obj[key]);\n      }\n    } else {\n      const subKeys = key.split(\".\");\n      const lastIndex = subKeys.length - 1;\n      let currentObj = obj;\n      for (let i = 0; i < lastIndex; i++) {\n        if (!(subKeys[i] in currentObj)) {\n          currentObj[subKeys[i]] = {};\n        }\n        currentObj = currentObj[subKeys[i]];\n      }\n      currentObj[subKeys[lastIndex]] = obj[key];\n      delete obj[key];\n      if (isObject(currentObj[subKeys[lastIndex]])) {\n        handleFlatJson(currentObj[subKeys[lastIndex]]);\n      }\n    }\n  }\n  return obj;\n}\nfunction getLocaleMessages(locale, options) {\n  const { messages, __i18n, messageResolver, flatJson } = options;\n  const ret = isPlainObject(messages) ? messages : isArray(__i18n) ? {} : { [locale]: {} };\n  if (isArray(__i18n)) {\n    __i18n.forEach((custom) => {\n      if (\"locale\" in custom && \"resource\" in custom) {\n        const { locale: locale2, resource } = custom;\n        if (locale2) {\n          ret[locale2] = ret[locale2] || {};\n          deepCopy(resource, ret[locale2]);\n        } else {\n          deepCopy(resource, ret);\n        }\n      } else {\n        isString(custom) && deepCopy(JSON.parse(custom), ret);\n      }\n    });\n  }\n  if (messageResolver == null && flatJson) {\n    for (const key in ret) {\n      if (hasOwn(ret, key)) {\n        handleFlatJson(ret[key]);\n      }\n    }\n  }\n  return ret;\n}\nvar isNotObjectOrIsArray = (val) => !isObject(val) || isArray(val);\nfunction deepCopy(src, des) {\n  if (isNotObjectOrIsArray(src) || isNotObjectOrIsArray(des)) {\n    throw createI18nError(I18nErrorCodes.INVALID_VALUE);\n  }\n  for (const key in src) {\n    if (hasOwn(src, key)) {\n      if (isNotObjectOrIsArray(src[key]) || isNotObjectOrIsArray(des[key])) {\n        des[key] = src[key];\n      } else {\n        deepCopy(src[key], des[key]);\n      }\n    }\n  }\n}\nfunction getComponentOptions(instance) {\n  return instance.type;\n}\nfunction adjustI18nResources(global2, options, componentOptions) {\n  let messages = isObject(options.messages) ? options.messages : {};\n  if (\"__i18nGlobal\" in componentOptions) {\n    messages = getLocaleMessages(global2.locale.value, {\n      messages,\n      __i18n: componentOptions.__i18nGlobal\n    });\n  }\n  const locales = Object.keys(messages);\n  if (locales.length) {\n    locales.forEach((locale) => {\n      global2.mergeLocaleMessage(locale, messages[locale]);\n    });\n  }\n  {\n    if (isObject(options.datetimeFormats)) {\n      const locales2 = Object.keys(options.datetimeFormats);\n      if (locales2.length) {\n        locales2.forEach((locale) => {\n          global2.mergeDateTimeFormat(locale, options.datetimeFormats[locale]);\n        });\n      }\n    }\n    if (isObject(options.numberFormats)) {\n      const locales2 = Object.keys(options.numberFormats);\n      if (locales2.length) {\n        locales2.forEach((locale) => {\n          global2.mergeNumberFormat(locale, options.numberFormats[locale]);\n        });\n      }\n    }\n  }\n}\nfunction createTextNode(key) {\n  return createVNode(Text, null, key, 0);\n}\nvar DEVTOOLS_META = \"__INTLIFY_META__\";\nvar composerID = 0;\nfunction defineCoreMissingHandler(missing) {\n  return (ctx, locale, key, type) => {\n    return missing(locale, key, getCurrentInstance() || void 0, type);\n  };\n}\nvar getMetaInfo = () => {\n  const instance = getCurrentInstance();\n  let meta = null;\n  return instance && (meta = getComponentOptions(instance)[DEVTOOLS_META]) ? { [DEVTOOLS_META]: meta } : null;\n};\nfunction createComposer(options = {}, VueI18nLegacy) {\n  const { __root } = options;\n  const _isGlobal = __root === void 0;\n  let _inheritLocale = isBoolean(options.inheritLocale) ? options.inheritLocale : true;\n  const _locale = ref(\n    __root && _inheritLocale ? __root.locale.value : isString(options.locale) ? options.locale : DEFAULT_LOCALE\n  );\n  const _fallbackLocale = ref(\n    __root && _inheritLocale ? __root.fallbackLocale.value : isString(options.fallbackLocale) || isArray(options.fallbackLocale) || isPlainObject(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : _locale.value\n  );\n  const _messages = ref(getLocaleMessages(_locale.value, options));\n  const _datetimeFormats = ref(isPlainObject(options.datetimeFormats) ? options.datetimeFormats : { [_locale.value]: {} });\n  const _numberFormats = ref(isPlainObject(options.numberFormats) ? options.numberFormats : { [_locale.value]: {} });\n  let _missingWarn = __root ? __root.missingWarn : isBoolean(options.missingWarn) || isRegExp(options.missingWarn) ? options.missingWarn : true;\n  let _fallbackWarn = __root ? __root.fallbackWarn : isBoolean(options.fallbackWarn) || isRegExp(options.fallbackWarn) ? options.fallbackWarn : true;\n  let _fallbackRoot = __root ? __root.fallbackRoot : isBoolean(options.fallbackRoot) ? options.fallbackRoot : true;\n  let _fallbackFormat = !!options.fallbackFormat;\n  let _missing = isFunction(options.missing) ? options.missing : null;\n  let _runtimeMissing = isFunction(options.missing) ? defineCoreMissingHandler(options.missing) : null;\n  let _postTranslation = isFunction(options.postTranslation) ? options.postTranslation : null;\n  let _warnHtmlMessage = __root ? __root.warnHtmlMessage : isBoolean(options.warnHtmlMessage) ? options.warnHtmlMessage : true;\n  let _escapeParameter = !!options.escapeParameter;\n  const _modifiers = __root ? __root.modifiers : isPlainObject(options.modifiers) ? options.modifiers : {};\n  let _pluralRules = options.pluralRules || __root && __root.pluralRules;\n  let _context;\n  const getCoreContext = () => {\n    _isGlobal && setFallbackContext(null);\n    const ctxOptions = {\n      version: VERSION2,\n      locale: _locale.value,\n      fallbackLocale: _fallbackLocale.value,\n      messages: _messages.value,\n      modifiers: _modifiers,\n      pluralRules: _pluralRules,\n      missing: _runtimeMissing === null ? void 0 : _runtimeMissing,\n      missingWarn: _missingWarn,\n      fallbackWarn: _fallbackWarn,\n      fallbackFormat: _fallbackFormat,\n      unresolving: true,\n      postTranslation: _postTranslation === null ? void 0 : _postTranslation,\n      warnHtmlMessage: _warnHtmlMessage,\n      escapeParameter: _escapeParameter,\n      messageResolver: options.messageResolver,\n      __meta: { framework: \"vue\" }\n    };\n    {\n      ctxOptions.datetimeFormats = _datetimeFormats.value;\n      ctxOptions.numberFormats = _numberFormats.value;\n      ctxOptions.__datetimeFormatters = isPlainObject(_context) ? _context.__datetimeFormatters : void 0;\n      ctxOptions.__numberFormatters = isPlainObject(_context) ? _context.__numberFormatters : void 0;\n    }\n    if (true) {\n      ctxOptions.__v_emitter = isPlainObject(_context) ? _context.__v_emitter : void 0;\n    }\n    const ctx = createCoreContext(ctxOptions);\n    _isGlobal && setFallbackContext(ctx);\n    return ctx;\n  };\n  _context = getCoreContext();\n  updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);\n  function trackReactivityValues() {\n    return [\n      _locale.value,\n      _fallbackLocale.value,\n      _messages.value,\n      _datetimeFormats.value,\n      _numberFormats.value\n    ];\n  }\n  const locale = computed({\n    get: () => _locale.value,\n    set: (val) => {\n      _locale.value = val;\n      _context.locale = _locale.value;\n    }\n  });\n  const fallbackLocale = computed({\n    get: () => _fallbackLocale.value,\n    set: (val) => {\n      _fallbackLocale.value = val;\n      _context.fallbackLocale = _fallbackLocale.value;\n      updateFallbackLocale(_context, _locale.value, val);\n    }\n  });\n  const messages = computed(() => _messages.value);\n  const datetimeFormats = computed(() => _datetimeFormats.value);\n  const numberFormats = computed(() => _numberFormats.value);\n  function getPostTranslationHandler() {\n    return isFunction(_postTranslation) ? _postTranslation : null;\n  }\n  function setPostTranslationHandler(handler) {\n    _postTranslation = handler;\n    _context.postTranslation = handler;\n  }\n  function getMissingHandler() {\n    return _missing;\n  }\n  function setMissingHandler(handler) {\n    if (handler !== null) {\n      _runtimeMissing = defineCoreMissingHandler(handler);\n    }\n    _missing = handler;\n    _context.missing = _runtimeMissing;\n  }\n  function isResolvedTranslateMessage(type, arg) {\n    return type !== \"translate\" || !arg.resolvedMessage;\n  }\n  const wrapWithDeps = (fn, argumentParser, warnType, fallbackSuccess, fallbackFail, successCondition) => {\n    trackReactivityValues();\n    let ret;\n    if (true) {\n      try {\n        setAdditionalMeta(getMetaInfo());\n        if (!_isGlobal) {\n          _context.fallbackContext = __root ? getFallbackContext() : void 0;\n        }\n        ret = fn(_context);\n      } finally {\n        setAdditionalMeta(null);\n        if (!_isGlobal) {\n          _context.fallbackContext = void 0;\n        }\n      }\n    } else {\n      ret = fn(_context);\n    }\n    if (isNumber(ret) && ret === NOT_REOSLVED) {\n      const [key, arg2] = argumentParser();\n      if (__root && isString(key) && isResolvedTranslateMessage(warnType, arg2)) {\n        if (_fallbackRoot && (isTranslateFallbackWarn(_fallbackWarn, key) || isTranslateMissingWarn(_missingWarn, key))) {\n          warn(getWarnMessage2(I18nWarnCodes.FALLBACK_TO_ROOT, {\n            key,\n            type: warnType\n          }));\n        }\n        if (true) {\n          const { __v_emitter: emitter } = _context;\n          if (emitter && _fallbackRoot) {\n            emitter.emit(\"fallback\", {\n              type: warnType,\n              key,\n              to: \"global\",\n              groupId: `${warnType}:${key}`\n            });\n          }\n        }\n      }\n      return __root && _fallbackRoot ? fallbackSuccess(__root) : fallbackFail(key);\n    } else if (successCondition(ret)) {\n      return ret;\n    } else {\n      throw createI18nError(I18nErrorCodes.UNEXPECTED_RETURN_TYPE);\n    }\n  };\n  function t(...args) {\n    return wrapWithDeps((context) => Reflect.apply(translate, null, [context, ...args]), () => parseTranslateArgs(...args), \"translate\", (root) => Reflect.apply(root.t, root, [...args]), (key) => key, (val) => isString(val));\n  }\n  function rt(...args) {\n    const [arg1, arg2, arg3] = args;\n    if (arg3 && !isObject(arg3)) {\n      throw createI18nError(I18nErrorCodes.INVALID_ARGUMENT);\n    }\n    return t(...[arg1, arg2, assign({ resolvedMessage: true }, arg3 || {})]);\n  }\n  function d(...args) {\n    return wrapWithDeps((context) => Reflect.apply(datetime, null, [context, ...args]), () => parseDateTimeArgs(...args), \"datetime format\", (root) => Reflect.apply(root.d, root, [...args]), () => MISSING_RESOLVE_VALUE, (val) => isString(val));\n  }\n  function n(...args) {\n    return wrapWithDeps((context) => Reflect.apply(number, null, [context, ...args]), () => parseNumberArgs(...args), \"number format\", (root) => Reflect.apply(root.n, root, [...args]), () => MISSING_RESOLVE_VALUE, (val) => isString(val));\n  }\n  function normalize(values) {\n    return values.map((val) => isString(val) || isNumber(val) || isBoolean(val) ? createTextNode(String(val)) : val);\n  }\n  const interpolate = (val) => val;\n  const processor = {\n    normalize,\n    interpolate,\n    type: \"vnode\"\n  };\n  function transrateVNode(...args) {\n    return wrapWithDeps(\n      (context) => {\n        let ret;\n        const _context2 = context;\n        try {\n          _context2.processor = processor;\n          ret = Reflect.apply(translate, null, [_context2, ...args]);\n        } finally {\n          _context2.processor = null;\n        }\n        return ret;\n      },\n      () => parseTranslateArgs(...args),\n      \"translate\",\n      (root) => root[TransrateVNodeSymbol](...args),\n      (key) => [createTextNode(key)],\n      (val) => isArray(val)\n    );\n  }\n  function numberParts(...args) {\n    return wrapWithDeps(\n      (context) => Reflect.apply(number, null, [context, ...args]),\n      () => parseNumberArgs(...args),\n      \"number format\",\n      (root) => root[NumberPartsSymbol](...args),\n      () => [],\n      (val) => isString(val) || isArray(val)\n    );\n  }\n  function datetimeParts(...args) {\n    return wrapWithDeps(\n      (context) => Reflect.apply(datetime, null, [context, ...args]),\n      () => parseDateTimeArgs(...args),\n      \"datetime format\",\n      (root) => root[DatetimePartsSymbol](...args),\n      () => [],\n      (val) => isString(val) || isArray(val)\n    );\n  }\n  function setPluralRules(rules) {\n    _pluralRules = rules;\n    _context.pluralRules = _pluralRules;\n  }\n  function te(key, locale2) {\n    const targetLocale = isString(locale2) ? locale2 : _locale.value;\n    const message = getLocaleMessage(targetLocale);\n    return _context.messageResolver(message, key) !== null;\n  }\n  function resolveMessages(key) {\n    let messages2 = null;\n    const locales = fallbackWithLocaleChain(_context, _fallbackLocale.value, _locale.value);\n    for (let i = 0; i < locales.length; i++) {\n      const targetLocaleMessages = _messages.value[locales[i]] || {};\n      const messageValue = _context.messageResolver(targetLocaleMessages, key);\n      if (messageValue != null) {\n        messages2 = messageValue;\n        break;\n      }\n    }\n    return messages2;\n  }\n  function tm(key) {\n    const messages2 = resolveMessages(key);\n    return messages2 != null ? messages2 : __root ? __root.tm(key) || {} : {};\n  }\n  function getLocaleMessage(locale2) {\n    return _messages.value[locale2] || {};\n  }\n  function setLocaleMessage(locale2, message) {\n    _messages.value[locale2] = message;\n    _context.messages = _messages.value;\n  }\n  function mergeLocaleMessage(locale2, message) {\n    _messages.value[locale2] = _messages.value[locale2] || {};\n    deepCopy(message, _messages.value[locale2]);\n    _context.messages = _messages.value;\n  }\n  function getDateTimeFormat(locale2) {\n    return _datetimeFormats.value[locale2] || {};\n  }\n  function setDateTimeFormat(locale2, format2) {\n    _datetimeFormats.value[locale2] = format2;\n    _context.datetimeFormats = _datetimeFormats.value;\n    clearDateTimeFormat(_context, locale2, format2);\n  }\n  function mergeDateTimeFormat(locale2, format2) {\n    _datetimeFormats.value[locale2] = assign(_datetimeFormats.value[locale2] || {}, format2);\n    _context.datetimeFormats = _datetimeFormats.value;\n    clearDateTimeFormat(_context, locale2, format2);\n  }\n  function getNumberFormat(locale2) {\n    return _numberFormats.value[locale2] || {};\n  }\n  function setNumberFormat(locale2, format2) {\n    _numberFormats.value[locale2] = format2;\n    _context.numberFormats = _numberFormats.value;\n    clearNumberFormat(_context, locale2, format2);\n  }\n  function mergeNumberFormat(locale2, format2) {\n    _numberFormats.value[locale2] = assign(_numberFormats.value[locale2] || {}, format2);\n    _context.numberFormats = _numberFormats.value;\n    clearNumberFormat(_context, locale2, format2);\n  }\n  composerID++;\n  if (__root && inBrowser) {\n    watch(__root.locale, (val) => {\n      if (_inheritLocale) {\n        _locale.value = val;\n        _context.locale = val;\n        updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);\n      }\n    });\n    watch(__root.fallbackLocale, (val) => {\n      if (_inheritLocale) {\n        _fallbackLocale.value = val;\n        _context.fallbackLocale = val;\n        updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);\n      }\n    });\n  }\n  const composer = {\n    id: composerID,\n    locale,\n    fallbackLocale,\n    get inheritLocale() {\n      return _inheritLocale;\n    },\n    set inheritLocale(val) {\n      _inheritLocale = val;\n      if (val && __root) {\n        _locale.value = __root.locale.value;\n        _fallbackLocale.value = __root.fallbackLocale.value;\n        updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);\n      }\n    },\n    get availableLocales() {\n      return Object.keys(_messages.value).sort();\n    },\n    messages,\n    get modifiers() {\n      return _modifiers;\n    },\n    get pluralRules() {\n      return _pluralRules || {};\n    },\n    get isGlobal() {\n      return _isGlobal;\n    },\n    get missingWarn() {\n      return _missingWarn;\n    },\n    set missingWarn(val) {\n      _missingWarn = val;\n      _context.missingWarn = _missingWarn;\n    },\n    get fallbackWarn() {\n      return _fallbackWarn;\n    },\n    set fallbackWarn(val) {\n      _fallbackWarn = val;\n      _context.fallbackWarn = _fallbackWarn;\n    },\n    get fallbackRoot() {\n      return _fallbackRoot;\n    },\n    set fallbackRoot(val) {\n      _fallbackRoot = val;\n    },\n    get fallbackFormat() {\n      return _fallbackFormat;\n    },\n    set fallbackFormat(val) {\n      _fallbackFormat = val;\n      _context.fallbackFormat = _fallbackFormat;\n    },\n    get warnHtmlMessage() {\n      return _warnHtmlMessage;\n    },\n    set warnHtmlMessage(val) {\n      _warnHtmlMessage = val;\n      _context.warnHtmlMessage = val;\n    },\n    get escapeParameter() {\n      return _escapeParameter;\n    },\n    set escapeParameter(val) {\n      _escapeParameter = val;\n      _context.escapeParameter = val;\n    },\n    t,\n    getLocaleMessage,\n    setLocaleMessage,\n    mergeLocaleMessage,\n    getPostTranslationHandler,\n    setPostTranslationHandler,\n    getMissingHandler,\n    setMissingHandler,\n    [SetPluralRulesSymbol]: setPluralRules\n  };\n  {\n    composer.datetimeFormats = datetimeFormats;\n    composer.numberFormats = numberFormats;\n    composer.rt = rt;\n    composer.te = te;\n    composer.tm = tm;\n    composer.d = d;\n    composer.n = n;\n    composer.getDateTimeFormat = getDateTimeFormat;\n    composer.setDateTimeFormat = setDateTimeFormat;\n    composer.mergeDateTimeFormat = mergeDateTimeFormat;\n    composer.getNumberFormat = getNumberFormat;\n    composer.setNumberFormat = setNumberFormat;\n    composer.mergeNumberFormat = mergeNumberFormat;\n    composer[InejctWithOption] = options.__injectWithOption;\n    composer[TransrateVNodeSymbol] = transrateVNode;\n    composer[DatetimePartsSymbol] = datetimeParts;\n    composer[NumberPartsSymbol] = numberParts;\n  }\n  if (true) {\n    composer[EnableEmitter] = (emitter) => {\n      _context.__v_emitter = emitter;\n    };\n    composer[DisableEmitter] = () => {\n      _context.__v_emitter = void 0;\n    };\n  }\n  return composer;\n}\nfunction convertComposerOptions(options) {\n  const locale = isString(options.locale) ? options.locale : DEFAULT_LOCALE;\n  const fallbackLocale = isString(options.fallbackLocale) || isArray(options.fallbackLocale) || isPlainObject(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : locale;\n  const missing = isFunction(options.missing) ? options.missing : void 0;\n  const missingWarn = isBoolean(options.silentTranslationWarn) || isRegExp(options.silentTranslationWarn) ? !options.silentTranslationWarn : true;\n  const fallbackWarn = isBoolean(options.silentFallbackWarn) || isRegExp(options.silentFallbackWarn) ? !options.silentFallbackWarn : true;\n  const fallbackRoot = isBoolean(options.fallbackRoot) ? options.fallbackRoot : true;\n  const fallbackFormat = !!options.formatFallbackMessages;\n  const modifiers = isPlainObject(options.modifiers) ? options.modifiers : {};\n  const pluralizationRules = options.pluralizationRules;\n  const postTranslation = isFunction(options.postTranslation) ? options.postTranslation : void 0;\n  const warnHtmlMessage = isString(options.warnHtmlInMessage) ? options.warnHtmlInMessage !== \"off\" : true;\n  const escapeParameter = !!options.escapeParameterHtml;\n  const inheritLocale = isBoolean(options.sync) ? options.sync : true;\n  if (options.formatter) {\n    warn(getWarnMessage2(I18nWarnCodes.NOT_SUPPORTED_FORMATTER));\n  }\n  if (options.preserveDirectiveContent) {\n    warn(getWarnMessage2(I18nWarnCodes.NOT_SUPPORTED_PRESERVE_DIRECTIVE));\n  }\n  let messages = options.messages;\n  if (isPlainObject(options.sharedMessages)) {\n    const sharedMessages = options.sharedMessages;\n    const locales = Object.keys(sharedMessages);\n    messages = locales.reduce((messages2, locale2) => {\n      const message = messages2[locale2] || (messages2[locale2] = {});\n      assign(message, sharedMessages[locale2]);\n      return messages2;\n    }, messages || {});\n  }\n  const { __i18n, __root, __injectWithOption } = options;\n  const datetimeFormats = options.datetimeFormats;\n  const numberFormats = options.numberFormats;\n  const flatJson = options.flatJson;\n  return {\n    locale,\n    fallbackLocale,\n    messages,\n    flatJson,\n    datetimeFormats,\n    numberFormats,\n    missing,\n    missingWarn,\n    fallbackWarn,\n    fallbackRoot,\n    fallbackFormat,\n    modifiers,\n    pluralRules: pluralizationRules,\n    postTranslation,\n    warnHtmlMessage,\n    escapeParameter,\n    messageResolver: options.messageResolver,\n    inheritLocale,\n    __i18n,\n    __root,\n    __injectWithOption\n  };\n}\nfunction createVueI18n(options = {}, VueI18nLegacy) {\n  {\n    const composer = createComposer(convertComposerOptions(options));\n    const vueI18n = {\n      id: composer.id,\n      get locale() {\n        return composer.locale.value;\n      },\n      set locale(val) {\n        composer.locale.value = val;\n      },\n      get fallbackLocale() {\n        return composer.fallbackLocale.value;\n      },\n      set fallbackLocale(val) {\n        composer.fallbackLocale.value = val;\n      },\n      get messages() {\n        return composer.messages.value;\n      },\n      get datetimeFormats() {\n        return composer.datetimeFormats.value;\n      },\n      get numberFormats() {\n        return composer.numberFormats.value;\n      },\n      get availableLocales() {\n        return composer.availableLocales;\n      },\n      get formatter() {\n        warn(getWarnMessage2(I18nWarnCodes.NOT_SUPPORTED_FORMATTER));\n        return {\n          interpolate() {\n            return [];\n          }\n        };\n      },\n      set formatter(val) {\n        warn(getWarnMessage2(I18nWarnCodes.NOT_SUPPORTED_FORMATTER));\n      },\n      get missing() {\n        return composer.getMissingHandler();\n      },\n      set missing(handler) {\n        composer.setMissingHandler(handler);\n      },\n      get silentTranslationWarn() {\n        return isBoolean(composer.missingWarn) ? !composer.missingWarn : composer.missingWarn;\n      },\n      set silentTranslationWarn(val) {\n        composer.missingWarn = isBoolean(val) ? !val : val;\n      },\n      get silentFallbackWarn() {\n        return isBoolean(composer.fallbackWarn) ? !composer.fallbackWarn : composer.fallbackWarn;\n      },\n      set silentFallbackWarn(val) {\n        composer.fallbackWarn = isBoolean(val) ? !val : val;\n      },\n      get modifiers() {\n        return composer.modifiers;\n      },\n      get formatFallbackMessages() {\n        return composer.fallbackFormat;\n      },\n      set formatFallbackMessages(val) {\n        composer.fallbackFormat = val;\n      },\n      get postTranslation() {\n        return composer.getPostTranslationHandler();\n      },\n      set postTranslation(handler) {\n        composer.setPostTranslationHandler(handler);\n      },\n      get sync() {\n        return composer.inheritLocale;\n      },\n      set sync(val) {\n        composer.inheritLocale = val;\n      },\n      get warnHtmlInMessage() {\n        return composer.warnHtmlMessage ? \"warn\" : \"off\";\n      },\n      set warnHtmlInMessage(val) {\n        composer.warnHtmlMessage = val !== \"off\";\n      },\n      get escapeParameterHtml() {\n        return composer.escapeParameter;\n      },\n      set escapeParameterHtml(val) {\n        composer.escapeParameter = val;\n      },\n      get preserveDirectiveContent() {\n        warn(getWarnMessage2(I18nWarnCodes.NOT_SUPPORTED_PRESERVE_DIRECTIVE));\n        return true;\n      },\n      set preserveDirectiveContent(val) {\n        warn(getWarnMessage2(I18nWarnCodes.NOT_SUPPORTED_PRESERVE_DIRECTIVE));\n      },\n      get pluralizationRules() {\n        return composer.pluralRules || {};\n      },\n      __composer: composer,\n      t(...args) {\n        const [arg1, arg2, arg3] = args;\n        const options2 = {};\n        let list = null;\n        let named = null;\n        if (!isString(arg1)) {\n          throw createI18nError(I18nErrorCodes.INVALID_ARGUMENT);\n        }\n        const key = arg1;\n        if (isString(arg2)) {\n          options2.locale = arg2;\n        } else if (isArray(arg2)) {\n          list = arg2;\n        } else if (isPlainObject(arg2)) {\n          named = arg2;\n        }\n        if (isArray(arg3)) {\n          list = arg3;\n        } else if (isPlainObject(arg3)) {\n          named = arg3;\n        }\n        return Reflect.apply(composer.t, composer, [\n          key,\n          list || named || {},\n          options2\n        ]);\n      },\n      rt(...args) {\n        return Reflect.apply(composer.rt, composer, [...args]);\n      },\n      tc(...args) {\n        const [arg1, arg2, arg3] = args;\n        const options2 = { plural: 1 };\n        let list = null;\n        let named = null;\n        if (!isString(arg1)) {\n          throw createI18nError(I18nErrorCodes.INVALID_ARGUMENT);\n        }\n        const key = arg1;\n        if (isString(arg2)) {\n          options2.locale = arg2;\n        } else if (isNumber(arg2)) {\n          options2.plural = arg2;\n        } else if (isArray(arg2)) {\n          list = arg2;\n        } else if (isPlainObject(arg2)) {\n          named = arg2;\n        }\n        if (isString(arg3)) {\n          options2.locale = arg3;\n        } else if (isArray(arg3)) {\n          list = arg3;\n        } else if (isPlainObject(arg3)) {\n          named = arg3;\n        }\n        return Reflect.apply(composer.t, composer, [\n          key,\n          list || named || {},\n          options2\n        ]);\n      },\n      te(key, locale) {\n        return composer.te(key, locale);\n      },\n      tm(key) {\n        return composer.tm(key);\n      },\n      getLocaleMessage(locale) {\n        return composer.getLocaleMessage(locale);\n      },\n      setLocaleMessage(locale, message) {\n        composer.setLocaleMessage(locale, message);\n      },\n      mergeLocaleMessage(locale, message) {\n        composer.mergeLocaleMessage(locale, message);\n      },\n      d(...args) {\n        return Reflect.apply(composer.d, composer, [...args]);\n      },\n      getDateTimeFormat(locale) {\n        return composer.getDateTimeFormat(locale);\n      },\n      setDateTimeFormat(locale, format2) {\n        composer.setDateTimeFormat(locale, format2);\n      },\n      mergeDateTimeFormat(locale, format2) {\n        composer.mergeDateTimeFormat(locale, format2);\n      },\n      n(...args) {\n        return Reflect.apply(composer.n, composer, [...args]);\n      },\n      getNumberFormat(locale) {\n        return composer.getNumberFormat(locale);\n      },\n      setNumberFormat(locale, format2) {\n        composer.setNumberFormat(locale, format2);\n      },\n      mergeNumberFormat(locale, format2) {\n        composer.mergeNumberFormat(locale, format2);\n      },\n      getChoiceIndex(choice, choicesLength) {\n        warn(getWarnMessage2(I18nWarnCodes.NOT_SUPPORTED_GET_CHOICE_INDEX));\n        return -1;\n      },\n      __onComponentInstanceCreated(target) {\n        const { componentInstanceCreatedListener } = options;\n        if (componentInstanceCreatedListener) {\n          componentInstanceCreatedListener(target, vueI18n);\n        }\n      }\n    };\n    if (true) {\n      vueI18n.__enableEmitter = (emitter) => {\n        const __composer = composer;\n        __composer[EnableEmitter] && __composer[EnableEmitter](emitter);\n      };\n      vueI18n.__disableEmitter = () => {\n        const __composer = composer;\n        __composer[DisableEmitter] && __composer[DisableEmitter]();\n      };\n    }\n    return vueI18n;\n  }\n}\nvar baseFormatProps = {\n  tag: {\n    type: [String, Object]\n  },\n  locale: {\n    type: String\n  },\n  scope: {\n    type: String,\n    validator: (val) => val === \"parent\" || val === \"global\",\n    default: \"parent\"\n  },\n  i18n: {\n    type: Object\n  }\n};\nfunction getInterpolateArg({ slots }, keys) {\n  if (keys.length === 1 && keys[0] === \"default\") {\n    const ret = slots.default ? slots.default() : [];\n    return ret.reduce((slot, current) => {\n      return slot = [\n        ...slot,\n        ...isArray(current.children) ? current.children : [current]\n      ];\n    }, []);\n  } else {\n    return keys.reduce((arg, key) => {\n      const slot = slots[key];\n      if (slot) {\n        arg[key] = slot();\n      }\n      return arg;\n    }, {});\n  }\n}\nfunction getFragmentableTag(tag) {\n  return Fragment;\n}\nvar Translation = {\n  name: \"i18n-t\",\n  props: assign({\n    keypath: {\n      type: String,\n      required: true\n    },\n    plural: {\n      type: [Number, String],\n      validator: (val) => isNumber(val) || !isNaN(val)\n    }\n  }, baseFormatProps),\n  setup(props, context) {\n    const { slots, attrs } = context;\n    const i18n = props.i18n || useI18n({\n      useScope: props.scope,\n      __useComponent: true\n    });\n    return () => {\n      const keys = Object.keys(slots).filter((key) => key !== \"_\");\n      const options = {};\n      if (props.locale) {\n        options.locale = props.locale;\n      }\n      if (props.plural !== void 0) {\n        options.plural = isString(props.plural) ? +props.plural : props.plural;\n      }\n      const arg = getInterpolateArg(context, keys);\n      const children = i18n[TransrateVNodeSymbol](props.keypath, arg, options);\n      const assignedAttrs = assign({}, attrs);\n      const tag = isString(props.tag) || isObject(props.tag) ? props.tag : getFragmentableTag();\n      return h(tag, assignedAttrs, children);\n    };\n  }\n};\nfunction isVNode(target) {\n  return isArray(target) && !isString(target[0]);\n}\nfunction renderFormatter(props, context, slotKeys, partFormatter) {\n  const { slots, attrs } = context;\n  return () => {\n    const options = { part: true };\n    let overrides = {};\n    if (props.locale) {\n      options.locale = props.locale;\n    }\n    if (isString(props.format)) {\n      options.key = props.format;\n    } else if (isObject(props.format)) {\n      if (isString(props.format.key)) {\n        options.key = props.format.key;\n      }\n      overrides = Object.keys(props.format).reduce((options2, prop) => {\n        return slotKeys.includes(prop) ? assign({}, options2, { [prop]: props.format[prop] }) : options2;\n      }, {});\n    }\n    const parts = partFormatter(...[props.value, options, overrides]);\n    let children = [options.key];\n    if (isArray(parts)) {\n      children = parts.map((part, index) => {\n        const slot = slots[part.type];\n        const node = slot ? slot({ [part.type]: part.value, index, parts }) : [part.value];\n        if (isVNode(node)) {\n          node[0].key = `${part.type}-${index}`;\n        }\n        return node;\n      });\n    } else if (isString(parts)) {\n      children = [parts];\n    }\n    const assignedAttrs = assign({}, attrs);\n    const tag = isString(props.tag) || isObject(props.tag) ? props.tag : getFragmentableTag();\n    return h(tag, assignedAttrs, children);\n  };\n}\nvar NumberFormat = {\n  name: \"i18n-n\",\n  props: assign({\n    value: {\n      type: Number,\n      required: true\n    },\n    format: {\n      type: [String, Object]\n    }\n  }, baseFormatProps),\n  setup(props, context) {\n    const i18n = props.i18n || useI18n({ useScope: \"parent\", __useComponent: true });\n    return renderFormatter(props, context, NUMBER_FORMAT_OPTIONS_KEYS, (...args) => i18n[NumberPartsSymbol](...args));\n  }\n};\nvar DatetimeFormat = {\n  name: \"i18n-d\",\n  props: assign({\n    value: {\n      type: [Number, Date],\n      required: true\n    },\n    format: {\n      type: [String, Object]\n    }\n  }, baseFormatProps),\n  setup(props, context) {\n    const i18n = props.i18n || useI18n({ useScope: \"parent\", __useComponent: true });\n    return renderFormatter(props, context, DATETIME_FORMAT_OPTIONS_KEYS, (...args) => i18n[DatetimePartsSymbol](...args));\n  }\n};\nfunction getComposer$2(i18n, instance) {\n  const i18nInternal = i18n;\n  if (i18n.mode === \"composition\") {\n    return i18nInternal.__getInstance(instance) || i18n.global;\n  } else {\n    const vueI18n = i18nInternal.__getInstance(instance);\n    return vueI18n != null ? vueI18n.__composer : i18n.global.__composer;\n  }\n}\nfunction vTDirective(i18n) {\n  const _process = (binding) => {\n    const { instance, modifiers, value } = binding;\n    if (!instance || !instance.$) {\n      throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);\n    }\n    const composer = getComposer$2(i18n, instance.$);\n    if (modifiers.preserve) {\n      warn(getWarnMessage2(I18nWarnCodes.NOT_SUPPORTED_PRESERVE));\n    }\n    const parsedValue = parseValue(value);\n    return [\n      Reflect.apply(composer.t, composer, [...makeParams(parsedValue)]),\n      composer\n    ];\n  };\n  const register = (el, binding) => {\n    const [textContent, composer] = _process(binding);\n    if (inBrowser && i18n.global === composer) {\n      el.__i18nWatcher = watch(composer.locale, () => {\n        binding.instance && binding.instance.$forceUpdate();\n      });\n    }\n    el.__composer = composer;\n    el.textContent = textContent;\n  };\n  const unregister = (el) => {\n    if (inBrowser && el.__i18nWatcher) {\n      el.__i18nWatcher();\n      el.__i18nWatcher = void 0;\n      delete el.__i18nWatcher;\n    }\n    if (el.__composer) {\n      el.__composer = void 0;\n      delete el.__composer;\n    }\n  };\n  const update = (el, { value }) => {\n    if (el.__composer) {\n      const composer = el.__composer;\n      const parsedValue = parseValue(value);\n      el.textContent = Reflect.apply(composer.t, composer, [\n        ...makeParams(parsedValue)\n      ]);\n    }\n  };\n  const getSSRProps = (binding) => {\n    const [textContent] = _process(binding);\n    return { textContent };\n  };\n  return {\n    created: register,\n    unmounted: unregister,\n    beforeUpdate: update,\n    getSSRProps\n  };\n}\nfunction parseValue(value) {\n  if (isString(value)) {\n    return { path: value };\n  } else if (isPlainObject(value)) {\n    if (!(\"path\" in value)) {\n      throw createI18nError(I18nErrorCodes.REQUIRED_VALUE, \"path\");\n    }\n    return value;\n  } else {\n    throw createI18nError(I18nErrorCodes.INVALID_VALUE);\n  }\n}\nfunction makeParams(value) {\n  const { path, locale, args, choice, plural } = value;\n  const options = {};\n  const named = args || {};\n  if (isString(locale)) {\n    options.locale = locale;\n  }\n  if (isNumber(choice)) {\n    options.plural = choice;\n  }\n  if (isNumber(plural)) {\n    options.plural = plural;\n  }\n  return [path, named, options];\n}\nfunction apply(app, i18n, ...options) {\n  const pluginOptions = isPlainObject(options[0]) ? options[0] : {};\n  const useI18nComponentName = !!pluginOptions.useI18nComponentName;\n  const globalInstall = isBoolean(pluginOptions.globalInstall) ? pluginOptions.globalInstall : true;\n  if (globalInstall && useI18nComponentName) {\n    warn(getWarnMessage2(I18nWarnCodes.COMPONENT_NAME_LEGACY_COMPATIBLE, {\n      name: Translation.name\n    }));\n  }\n  if (globalInstall) {\n    app.component(!useI18nComponentName ? Translation.name : \"i18n\", Translation);\n    app.component(NumberFormat.name, NumberFormat);\n    app.component(DatetimeFormat.name, DatetimeFormat);\n  }\n  {\n    app.directive(\"t\", vTDirective(i18n));\n  }\n}\nvar VUE_I18N_COMPONENT_TYPES = \"vue-i18n: composer properties\";\nvar devtoolsApi;\nasync function enableDevTools(app, i18n) {\n  return new Promise((resolve, reject) => {\n    try {\n      setupDevtoolsPlugin({\n        id: \"vue-devtools-plugin-vue-i18n\",\n        label: VueDevToolsLabels[\"vue-devtools-plugin-vue-i18n\"],\n        packageName: \"vue-i18n\",\n        homepage: \"https://vue-i18n.intlify.dev\",\n        logo: \"https://vue-i18n.intlify.dev/vue-i18n-devtools-logo.png\",\n        componentStateTypes: [VUE_I18N_COMPONENT_TYPES],\n        app\n      }, (api) => {\n        devtoolsApi = api;\n        api.on.visitComponentTree(({ componentInstance, treeNode }) => {\n          updateComponentTreeTags(componentInstance, treeNode, i18n);\n        });\n        api.on.inspectComponent(({ componentInstance, instanceData }) => {\n          if (componentInstance.vnode.el && componentInstance.vnode.el.__VUE_I18N__ && instanceData) {\n            if (i18n.mode === \"legacy\") {\n              if (componentInstance.vnode.el.__VUE_I18N__ !== i18n.global.__composer) {\n                inspectComposer(instanceData, componentInstance.vnode.el.__VUE_I18N__);\n              }\n            } else {\n              inspectComposer(instanceData, componentInstance.vnode.el.__VUE_I18N__);\n            }\n          }\n        });\n        api.addInspector({\n          id: \"vue-i18n-resource-inspector\",\n          label: VueDevToolsLabels[\"vue-i18n-resource-inspector\"],\n          icon: \"language\",\n          treeFilterPlaceholder: VueDevToolsPlaceholders[\"vue-i18n-resource-inspector\"]\n        });\n        api.on.getInspectorTree((payload) => {\n          if (payload.app === app && payload.inspectorId === \"vue-i18n-resource-inspector\") {\n            registerScope(payload, i18n);\n          }\n        });\n        const roots = /* @__PURE__ */ new Map();\n        api.on.getInspectorState(async (payload) => {\n          if (payload.app === app && payload.inspectorId === \"vue-i18n-resource-inspector\") {\n            api.unhighlightElement();\n            inspectScope(payload, i18n);\n            if (payload.nodeId === \"global\") {\n              if (!roots.has(payload.app)) {\n                const [root] = await api.getComponentInstances(payload.app);\n                roots.set(payload.app, root);\n              }\n              api.highlightElement(roots.get(payload.app));\n            } else {\n              const instance = getComponentInstance(payload.nodeId, i18n);\n              instance && api.highlightElement(instance);\n            }\n          }\n        });\n        api.on.editInspectorState((payload) => {\n          if (payload.app === app && payload.inspectorId === \"vue-i18n-resource-inspector\") {\n            editScope(payload, i18n);\n          }\n        });\n        api.addTimelineLayer({\n          id: \"vue-i18n-timeline\",\n          label: VueDevToolsLabels[\"vue-i18n-timeline\"],\n          color: VueDevToolsTimelineColors[\"vue-i18n-timeline\"]\n        });\n        resolve(true);\n      });\n    } catch (e) {\n      console.error(e);\n      reject(false);\n    }\n  });\n}\nfunction getI18nScopeLable(instance) {\n  return instance.type.name || instance.type.displayName || instance.type.__file || \"Anonymous\";\n}\nfunction updateComponentTreeTags(instance, treeNode, i18n) {\n  const global2 = i18n.mode === \"composition\" ? i18n.global : i18n.global.__composer;\n  if (instance && instance.vnode.el && instance.vnode.el.__VUE_I18N__) {\n    if (instance.vnode.el.__VUE_I18N__ !== global2) {\n      const tag = {\n        label: `i18n (${getI18nScopeLable(instance)} Scope)`,\n        textColor: 0,\n        backgroundColor: 16764185\n      };\n      treeNode.tags.push(tag);\n    }\n  }\n}\nfunction inspectComposer(instanceData, composer) {\n  const type = VUE_I18N_COMPONENT_TYPES;\n  instanceData.state.push({\n    type,\n    key: \"locale\",\n    editable: true,\n    value: composer.locale.value\n  });\n  instanceData.state.push({\n    type,\n    key: \"availableLocales\",\n    editable: false,\n    value: composer.availableLocales\n  });\n  instanceData.state.push({\n    type,\n    key: \"fallbackLocale\",\n    editable: true,\n    value: composer.fallbackLocale.value\n  });\n  instanceData.state.push({\n    type,\n    key: \"inheritLocale\",\n    editable: true,\n    value: composer.inheritLocale\n  });\n  instanceData.state.push({\n    type,\n    key: \"messages\",\n    editable: false,\n    value: getLocaleMessageValue(composer.messages.value)\n  });\n  {\n    instanceData.state.push({\n      type,\n      key: \"datetimeFormats\",\n      editable: false,\n      value: composer.datetimeFormats.value\n    });\n    instanceData.state.push({\n      type,\n      key: \"numberFormats\",\n      editable: false,\n      value: composer.numberFormats.value\n    });\n  }\n}\nfunction getLocaleMessageValue(messages) {\n  const value = {};\n  Object.keys(messages).forEach((key) => {\n    const v = messages[key];\n    if (isFunction(v) && \"source\" in v) {\n      value[key] = getMessageFunctionDetails(v);\n    } else if (isObject(v)) {\n      value[key] = getLocaleMessageValue(v);\n    } else {\n      value[key] = v;\n    }\n  });\n  return value;\n}\nvar ESC = {\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': \"&quot;\",\n  \"&\": \"&amp;\"\n};\nfunction escape(s) {\n  return s.replace(/[<>\"&]/g, escapeChar);\n}\nfunction escapeChar(a) {\n  return ESC[a] || a;\n}\nfunction getMessageFunctionDetails(func) {\n  const argString = func.source ? `(\"${escape(func.source)}\")` : `(?)`;\n  return {\n    _custom: {\n      type: \"function\",\n      display: `<span>\\u0192</span> ${argString}`\n    }\n  };\n}\nfunction registerScope(payload, i18n) {\n  payload.rootNodes.push({\n    id: \"global\",\n    label: \"Global Scope\"\n  });\n  const global2 = i18n.mode === \"composition\" ? i18n.global : i18n.global.__composer;\n  for (const [keyInstance, instance] of i18n.__instances) {\n    const composer = i18n.mode === \"composition\" ? instance : instance.__composer;\n    if (global2 === composer) {\n      continue;\n    }\n    payload.rootNodes.push({\n      id: composer.id.toString(),\n      label: `${getI18nScopeLable(keyInstance)} Scope`\n    });\n  }\n}\nfunction getComponentInstance(nodeId, i18n) {\n  let instance = null;\n  if (nodeId !== \"global\") {\n    for (const [component, composer] of i18n.__instances.entries()) {\n      if (composer.id.toString() === nodeId) {\n        instance = component;\n        break;\n      }\n    }\n  }\n  return instance;\n}\nfunction getComposer$1(nodeId, i18n) {\n  if (nodeId === \"global\") {\n    return i18n.mode === \"composition\" ? i18n.global : i18n.global.__composer;\n  } else {\n    const instance = Array.from(i18n.__instances.values()).find((item) => item.id.toString() === nodeId);\n    if (instance) {\n      return i18n.mode === \"composition\" ? instance : instance.__composer;\n    } else {\n      return null;\n    }\n  }\n}\nfunction inspectScope(payload, i18n) {\n  const composer = getComposer$1(payload.nodeId, i18n);\n  if (composer) {\n    payload.state = makeScopeInspectState(composer);\n  }\n  return null;\n}\nfunction makeScopeInspectState(composer) {\n  const state = {};\n  const localeType = \"Locale related info\";\n  const localeStates = [\n    {\n      type: localeType,\n      key: \"locale\",\n      editable: true,\n      value: composer.locale.value\n    },\n    {\n      type: localeType,\n      key: \"fallbackLocale\",\n      editable: true,\n      value: composer.fallbackLocale.value\n    },\n    {\n      type: localeType,\n      key: \"availableLocales\",\n      editable: false,\n      value: composer.availableLocales\n    },\n    {\n      type: localeType,\n      key: \"inheritLocale\",\n      editable: true,\n      value: composer.inheritLocale\n    }\n  ];\n  state[localeType] = localeStates;\n  const localeMessagesType = \"Locale messages info\";\n  const localeMessagesStates = [\n    {\n      type: localeMessagesType,\n      key: \"messages\",\n      editable: false,\n      value: getLocaleMessageValue(composer.messages.value)\n    }\n  ];\n  state[localeMessagesType] = localeMessagesStates;\n  {\n    const datetimeFormatsType = \"Datetime formats info\";\n    const datetimeFormatsStates = [\n      {\n        type: datetimeFormatsType,\n        key: \"datetimeFormats\",\n        editable: false,\n        value: composer.datetimeFormats.value\n      }\n    ];\n    state[datetimeFormatsType] = datetimeFormatsStates;\n    const numberFormatsType = \"Datetime formats info\";\n    const numberFormatsStates = [\n      {\n        type: numberFormatsType,\n        key: \"numberFormats\",\n        editable: false,\n        value: composer.numberFormats.value\n      }\n    ];\n    state[numberFormatsType] = numberFormatsStates;\n  }\n  return state;\n}\nfunction addTimelineEvent(event, payload) {\n  if (devtoolsApi) {\n    let groupId;\n    if (payload && \"groupId\" in payload) {\n      groupId = payload.groupId;\n      delete payload.groupId;\n    }\n    devtoolsApi.addTimelineEvent({\n      layerId: \"vue-i18n-timeline\",\n      event: {\n        title: event,\n        groupId,\n        time: Date.now(),\n        meta: {},\n        data: payload || {},\n        logType: event === \"compile-error\" ? \"error\" : event === \"fallback\" || event === \"missing\" ? \"warning\" : \"default\"\n      }\n    });\n  }\n}\nfunction editScope(payload, i18n) {\n  const composer = getComposer$1(payload.nodeId, i18n);\n  if (composer) {\n    const [field] = payload.path;\n    if (field === \"locale\" && isString(payload.state.value)) {\n      composer.locale.value = payload.state.value;\n    } else if (field === \"fallbackLocale\" && (isString(payload.state.value) || isArray(payload.state.value) || isObject(payload.state.value))) {\n      composer.fallbackLocale.value = payload.state.value;\n    } else if (field === \"inheritLocale\" && isBoolean(payload.state.value)) {\n      composer.inheritLocale = payload.state.value;\n    }\n  }\n}\nfunction defineMixin(vuei18n, composer, i18n) {\n  return {\n    beforeCreate() {\n      const instance = getCurrentInstance();\n      if (!instance) {\n        throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);\n      }\n      const options = this.$options;\n      if (options.i18n) {\n        const optionsI18n = options.i18n;\n        if (options.__i18n) {\n          optionsI18n.__i18n = options.__i18n;\n        }\n        optionsI18n.__root = composer;\n        if (this === this.$root) {\n          this.$i18n = mergeToRoot(vuei18n, optionsI18n);\n        } else {\n          optionsI18n.__injectWithOption = true;\n          this.$i18n = createVueI18n(optionsI18n);\n        }\n      } else if (options.__i18n) {\n        if (this === this.$root) {\n          this.$i18n = mergeToRoot(vuei18n, options);\n        } else {\n          this.$i18n = createVueI18n({\n            __i18n: options.__i18n,\n            __injectWithOption: true,\n            __root: composer\n          });\n        }\n      } else {\n        this.$i18n = vuei18n;\n      }\n      if (options.__i18nGlobal) {\n        adjustI18nResources(composer, options, options);\n      }\n      vuei18n.__onComponentInstanceCreated(this.$i18n);\n      i18n.__setInstance(instance, this.$i18n);\n      this.$t = (...args) => this.$i18n.t(...args);\n      this.$rt = (...args) => this.$i18n.rt(...args);\n      this.$tc = (...args) => this.$i18n.tc(...args);\n      this.$te = (key, locale) => this.$i18n.te(key, locale);\n      this.$d = (...args) => this.$i18n.d(...args);\n      this.$n = (...args) => this.$i18n.n(...args);\n      this.$tm = (key) => this.$i18n.tm(key);\n    },\n    mounted() {\n      if (this.$el && this.$i18n) {\n        this.$el.__VUE_I18N__ = this.$i18n.__composer;\n        const emitter = this.__v_emitter = createEmitter();\n        const _vueI18n = this.$i18n;\n        _vueI18n.__enableEmitter && _vueI18n.__enableEmitter(emitter);\n        emitter.on(\"*\", addTimelineEvent);\n      }\n    },\n    unmounted() {\n      const instance = getCurrentInstance();\n      if (!instance) {\n        throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);\n      }\n      if (this.$el && this.$el.__VUE_I18N__) {\n        if (this.__v_emitter) {\n          this.__v_emitter.off(\"*\", addTimelineEvent);\n          delete this.__v_emitter;\n        }\n        if (this.$i18n) {\n          const _vueI18n = this.$i18n;\n          _vueI18n.__disableEmitter && _vueI18n.__disableEmitter();\n          delete this.$el.__VUE_I18N__;\n        }\n      }\n      delete this.$t;\n      delete this.$rt;\n      delete this.$tc;\n      delete this.$te;\n      delete this.$d;\n      delete this.$n;\n      delete this.$tm;\n      i18n.__deleteInstance(instance);\n      delete this.$i18n;\n    }\n  };\n}\nfunction mergeToRoot(root, options) {\n  root.locale = options.locale || root.locale;\n  root.fallbackLocale = options.fallbackLocale || root.fallbackLocale;\n  root.missing = options.missing || root.missing;\n  root.silentTranslationWarn = options.silentTranslationWarn || root.silentFallbackWarn;\n  root.silentFallbackWarn = options.silentFallbackWarn || root.silentFallbackWarn;\n  root.formatFallbackMessages = options.formatFallbackMessages || root.formatFallbackMessages;\n  root.postTranslation = options.postTranslation || root.postTranslation;\n  root.warnHtmlInMessage = options.warnHtmlInMessage || root.warnHtmlInMessage;\n  root.escapeParameterHtml = options.escapeParameterHtml || root.escapeParameterHtml;\n  root.sync = options.sync || root.sync;\n  root.__composer[SetPluralRulesSymbol](options.pluralizationRules || root.pluralizationRules);\n  const messages = getLocaleMessages(root.locale, {\n    messages: options.messages,\n    __i18n: options.__i18n\n  });\n  Object.keys(messages).forEach((locale) => root.mergeLocaleMessage(locale, messages[locale]));\n  if (options.datetimeFormats) {\n    Object.keys(options.datetimeFormats).forEach((locale) => root.mergeDateTimeFormat(locale, options.datetimeFormats[locale]));\n  }\n  if (options.numberFormats) {\n    Object.keys(options.numberFormats).forEach((locale) => root.mergeNumberFormat(locale, options.numberFormats[locale]));\n  }\n  return root;\n}\nvar I18nInjectionKey = makeSymbol(\"global-vue-i18n\");\nfunction createI18n(options = {}, VueI18nLegacy) {\n  const __legacyMode = __VUE_I18N_LEGACY_API__ && isBoolean(options.legacy) ? options.legacy : __VUE_I18N_LEGACY_API__;\n  const __globalInjection = isBoolean(options.globalInjection) ? options.globalInjection : true;\n  const __allowComposition = __VUE_I18N_LEGACY_API__ && __legacyMode ? !!options.allowComposition : true;\n  const __instances = /* @__PURE__ */ new Map();\n  const [globalScope, __global] = createGlobal(options, __legacyMode);\n  const symbol = makeSymbol(true ? \"vue-i18n\" : \"\");\n  function __getInstance(component) {\n    return __instances.get(component) || null;\n  }\n  function __setInstance(component, instance) {\n    __instances.set(component, instance);\n  }\n  function __deleteInstance(component) {\n    __instances.delete(component);\n  }\n  {\n    const i18n = {\n      get mode() {\n        return __VUE_I18N_LEGACY_API__ && __legacyMode ? \"legacy\" : \"composition\";\n      },\n      get allowComposition() {\n        return __allowComposition;\n      },\n      async install(app, ...options2) {\n        if (true) {\n          app.__VUE_I18N__ = i18n;\n        }\n        app.__VUE_I18N_SYMBOL__ = symbol;\n        app.provide(app.__VUE_I18N_SYMBOL__, i18n);\n        if (!__legacyMode && __globalInjection) {\n          injectGlobalFields(app, i18n.global);\n        }\n        if (__VUE_I18N_FULL_INSTALL__) {\n          apply(app, i18n, ...options2);\n        }\n        if (__VUE_I18N_LEGACY_API__ && __legacyMode) {\n          app.mixin(defineMixin(__global, __global.__composer, i18n));\n        }\n        const unmountApp = app.unmount;\n        app.unmount = () => {\n          i18n.dispose();\n          unmountApp();\n        };\n        if (true) {\n          const ret = await enableDevTools(app, i18n);\n          if (!ret) {\n            throw createI18nError(I18nErrorCodes.CANNOT_SETUP_VUE_DEVTOOLS_PLUGIN);\n          }\n          const emitter = createEmitter();\n          if (__legacyMode) {\n            const _vueI18n = __global;\n            _vueI18n.__enableEmitter && _vueI18n.__enableEmitter(emitter);\n          } else {\n            const _composer = __global;\n            _composer[EnableEmitter] && _composer[EnableEmitter](emitter);\n          }\n          emitter.on(\"*\", addTimelineEvent);\n        }\n      },\n      get global() {\n        return __global;\n      },\n      dispose() {\n        globalScope.stop();\n      },\n      __instances,\n      __getInstance,\n      __setInstance,\n      __deleteInstance\n    };\n    return i18n;\n  }\n}\nfunction useI18n(options = {}) {\n  const instance = getCurrentInstance();\n  if (instance == null) {\n    throw createI18nError(I18nErrorCodes.MUST_BE_CALL_SETUP_TOP);\n  }\n  if (!instance.isCE && instance.appContext.app != null && !instance.appContext.app.__VUE_I18N_SYMBOL__) {\n    throw createI18nError(I18nErrorCodes.NOT_INSLALLED);\n  }\n  const i18n = getI18nInstance(instance);\n  const global2 = getGlobalComposer(i18n);\n  const componentOptions = getComponentOptions(instance);\n  const scope = getScope(options, componentOptions);\n  if (__VUE_I18N_LEGACY_API__) {\n    if (i18n.mode === \"legacy\" && !options.__useComponent) {\n      if (!i18n.allowComposition) {\n        throw createI18nError(I18nErrorCodes.NOT_AVAILABLE_IN_LEGACY_MODE);\n      }\n      return useI18nForLegacy(instance, scope, global2, options);\n    }\n  }\n  if (scope === \"global\") {\n    adjustI18nResources(global2, options, componentOptions);\n    return global2;\n  }\n  if (scope === \"parent\") {\n    let composer2 = getComposer(i18n, instance, options.__useComponent);\n    if (composer2 == null) {\n      if (true) {\n        warn(getWarnMessage2(I18nWarnCodes.NOT_FOUND_PARENT_SCOPE));\n      }\n      composer2 = global2;\n    }\n    return composer2;\n  }\n  const i18nInternal = i18n;\n  let composer = i18nInternal.__getInstance(instance);\n  if (composer == null) {\n    const composerOptions = assign({}, options);\n    if (\"__i18n\" in componentOptions) {\n      composerOptions.__i18n = componentOptions.__i18n;\n    }\n    if (global2) {\n      composerOptions.__root = global2;\n    }\n    composer = createComposer(composerOptions);\n    setupLifeCycle(i18nInternal, instance, composer);\n    i18nInternal.__setInstance(instance, composer);\n  }\n  return composer;\n}\nvar castToVueI18n = (i18n) => {\n  if (!(__VUE_I18N_BRIDGE__ in i18n)) {\n    throw createI18nError(I18nErrorCodes.NOT_COMPATIBLE_LEGACY_VUE_I18N);\n  }\n  return i18n;\n};\nfunction createGlobal(options, legacyMode, VueI18nLegacy) {\n  const scope = effectScope();\n  {\n    const obj = __VUE_I18N_LEGACY_API__ && legacyMode ? scope.run(() => createVueI18n(options)) : scope.run(() => createComposer(options));\n    if (obj == null) {\n      throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);\n    }\n    return [scope, obj];\n  }\n}\nfunction getI18nInstance(instance) {\n  {\n    const i18n = inject(!instance.isCE ? instance.appContext.app.__VUE_I18N_SYMBOL__ : I18nInjectionKey);\n    if (!i18n) {\n      throw createI18nError(!instance.isCE ? I18nErrorCodes.UNEXPECTED_ERROR : I18nErrorCodes.NOT_INSLALLED_WITH_PROVIDE);\n    }\n    return i18n;\n  }\n}\nfunction getScope(options, componentOptions) {\n  return isEmptyObject(options) ? \"__i18n\" in componentOptions ? \"local\" : \"global\" : !options.useScope ? \"local\" : options.useScope;\n}\nfunction getGlobalComposer(i18n) {\n  return i18n.mode === \"composition\" ? i18n.global : i18n.global.__composer;\n}\nfunction getComposer(i18n, target, useComponent = false) {\n  let composer = null;\n  const root = target.root;\n  let current = target.parent;\n  while (current != null) {\n    const i18nInternal = i18n;\n    if (i18n.mode === \"composition\") {\n      composer = i18nInternal.__getInstance(current);\n    } else {\n      if (__VUE_I18N_LEGACY_API__) {\n        const vueI18n = i18nInternal.__getInstance(current);\n        if (vueI18n != null) {\n          composer = vueI18n.__composer;\n          if (useComponent && composer && !composer[InejctWithOption]) {\n            composer = null;\n          }\n        }\n      }\n    }\n    if (composer != null) {\n      break;\n    }\n    if (root === current) {\n      break;\n    }\n    current = current.parent;\n  }\n  return composer;\n}\nfunction setupLifeCycle(i18n, target, composer) {\n  let emitter = null;\n  {\n    onMounted(() => {\n      if (target.vnode.el) {\n        target.vnode.el.__VUE_I18N__ = composer;\n        emitter = createEmitter();\n        const _composer = composer;\n        _composer[EnableEmitter] && _composer[EnableEmitter](emitter);\n        emitter.on(\"*\", addTimelineEvent);\n      }\n    }, target);\n    onUnmounted(() => {\n      if (target.vnode.el && target.vnode.el.__VUE_I18N__) {\n        emitter && emitter.off(\"*\", addTimelineEvent);\n        const _composer = composer;\n        _composer[DisableEmitter] && _composer[DisableEmitter]();\n        delete target.vnode.el.__VUE_I18N__;\n      }\n      i18n.__deleteInstance(target);\n    }, target);\n  }\n}\nfunction useI18nForLegacy(instance, scope, root, options = {}) {\n  const isLocale = scope === \"local\";\n  const _composer = shallowRef(null);\n  if (isLocale && instance.proxy && !(instance.proxy.$options.i18n || instance.proxy.$options.__i18n)) {\n    throw createI18nError(I18nErrorCodes.MUST_DEFINE_I18N_OPTION_IN_ALLOW_COMPOSITION);\n  }\n  const _inheritLocale = isBoolean(options.inheritLocale) ? options.inheritLocale : true;\n  const _locale = ref(\n    isLocale && _inheritLocale ? root.locale.value : isString(options.locale) ? options.locale : DEFAULT_LOCALE\n  );\n  const _fallbackLocale = ref(\n    isLocale && _inheritLocale ? root.fallbackLocale.value : isString(options.fallbackLocale) || isArray(options.fallbackLocale) || isPlainObject(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : _locale.value\n  );\n  const _messages = ref(getLocaleMessages(_locale.value, options));\n  const _datetimeFormats = ref(isPlainObject(options.datetimeFormats) ? options.datetimeFormats : { [_locale.value]: {} });\n  const _numberFormats = ref(isPlainObject(options.numberFormats) ? options.numberFormats : { [_locale.value]: {} });\n  const _missingWarn = isLocale ? root.missingWarn : isBoolean(options.missingWarn) || isRegExp(options.missingWarn) ? options.missingWarn : true;\n  const _fallbackWarn = isLocale ? root.fallbackWarn : isBoolean(options.fallbackWarn) || isRegExp(options.fallbackWarn) ? options.fallbackWarn : true;\n  const _fallbackRoot = isLocale ? root.fallbackRoot : isBoolean(options.fallbackRoot) ? options.fallbackRoot : true;\n  const _fallbackFormat = !!options.fallbackFormat;\n  const _missing = isFunction(options.missing) ? options.missing : null;\n  const _postTranslation = isFunction(options.postTranslation) ? options.postTranslation : null;\n  const _warnHtmlMessage = isLocale ? root.warnHtmlMessage : isBoolean(options.warnHtmlMessage) ? options.warnHtmlMessage : true;\n  const _escapeParameter = !!options.escapeParameter;\n  const _modifiers = isLocale ? root.modifiers : isPlainObject(options.modifiers) ? options.modifiers : {};\n  const _pluralRules = options.pluralRules || isLocale && root.pluralRules;\n  function trackReactivityValues() {\n    return [\n      _locale.value,\n      _fallbackLocale.value,\n      _messages.value,\n      _datetimeFormats.value,\n      _numberFormats.value\n    ];\n  }\n  const locale = computed({\n    get: () => {\n      return _composer.value ? _composer.value.locale.value : _locale.value;\n    },\n    set: (val) => {\n      if (_composer.value) {\n        _composer.value.locale.value = val;\n      }\n      _locale.value = val;\n    }\n  });\n  const fallbackLocale = computed({\n    get: () => {\n      return _composer.value ? _composer.value.fallbackLocale.value : _fallbackLocale.value;\n    },\n    set: (val) => {\n      if (_composer.value) {\n        _composer.value.fallbackLocale.value = val;\n      }\n      _fallbackLocale.value = val;\n    }\n  });\n  const messages = computed(() => {\n    if (_composer.value) {\n      return _composer.value.messages.value;\n    } else {\n      return _messages.value;\n    }\n  });\n  const datetimeFormats = computed(() => _datetimeFormats.value);\n  const numberFormats = computed(() => _numberFormats.value);\n  function getPostTranslationHandler() {\n    return _composer.value ? _composer.value.getPostTranslationHandler() : _postTranslation;\n  }\n  function setPostTranslationHandler(handler) {\n    if (_composer.value) {\n      _composer.value.setPostTranslationHandler(handler);\n    }\n  }\n  function getMissingHandler() {\n    return _composer.value ? _composer.value.getMissingHandler() : _missing;\n  }\n  function setMissingHandler(handler) {\n    if (_composer.value) {\n      _composer.value.setMissingHandler(handler);\n    }\n  }\n  function warpWithDeps(fn) {\n    trackReactivityValues();\n    return fn();\n  }\n  function t(...args) {\n    return _composer.value ? warpWithDeps(() => Reflect.apply(_composer.value.t, null, [...args])) : warpWithDeps(() => \"\");\n  }\n  function rt(...args) {\n    return _composer.value ? Reflect.apply(_composer.value.rt, null, [...args]) : \"\";\n  }\n  function d(...args) {\n    return _composer.value ? warpWithDeps(() => Reflect.apply(_composer.value.d, null, [...args])) : warpWithDeps(() => \"\");\n  }\n  function n(...args) {\n    return _composer.value ? warpWithDeps(() => Reflect.apply(_composer.value.n, null, [...args])) : warpWithDeps(() => \"\");\n  }\n  function tm(key) {\n    return _composer.value ? _composer.value.tm(key) : {};\n  }\n  function te(key, locale2) {\n    return _composer.value ? _composer.value.te(key, locale2) : false;\n  }\n  function getLocaleMessage(locale2) {\n    return _composer.value ? _composer.value.getLocaleMessage(locale2) : {};\n  }\n  function setLocaleMessage(locale2, message) {\n    if (_composer.value) {\n      _composer.value.setLocaleMessage(locale2, message);\n      _messages.value[locale2] = message;\n    }\n  }\n  function mergeLocaleMessage(locale2, message) {\n    if (_composer.value) {\n      _composer.value.mergeLocaleMessage(locale2, message);\n    }\n  }\n  function getDateTimeFormat(locale2) {\n    return _composer.value ? _composer.value.getDateTimeFormat(locale2) : {};\n  }\n  function setDateTimeFormat(locale2, format2) {\n    if (_composer.value) {\n      _composer.value.setDateTimeFormat(locale2, format2);\n      _datetimeFormats.value[locale2] = format2;\n    }\n  }\n  function mergeDateTimeFormat(locale2, format2) {\n    if (_composer.value) {\n      _composer.value.mergeDateTimeFormat(locale2, format2);\n    }\n  }\n  function getNumberFormat(locale2) {\n    return _composer.value ? _composer.value.getNumberFormat(locale2) : {};\n  }\n  function setNumberFormat(locale2, format2) {\n    if (_composer.value) {\n      _composer.value.setNumberFormat(locale2, format2);\n      _numberFormats.value[locale2] = format2;\n    }\n  }\n  function mergeNumberFormat(locale2, format2) {\n    if (_composer.value) {\n      _composer.value.mergeNumberFormat(locale2, format2);\n    }\n  }\n  const wrapper = {\n    get id() {\n      return _composer.value ? _composer.value.id : -1;\n    },\n    locale,\n    fallbackLocale,\n    messages,\n    datetimeFormats,\n    numberFormats,\n    get inheritLocale() {\n      return _composer.value ? _composer.value.inheritLocale : _inheritLocale;\n    },\n    set inheritLocale(val) {\n      if (_composer.value) {\n        _composer.value.inheritLocale = val;\n      }\n    },\n    get availableLocales() {\n      return _composer.value ? _composer.value.availableLocales : Object.keys(_messages.value);\n    },\n    get modifiers() {\n      return _composer.value ? _composer.value.modifiers : _modifiers;\n    },\n    get pluralRules() {\n      return _composer.value ? _composer.value.pluralRules : _pluralRules;\n    },\n    get isGlobal() {\n      return _composer.value ? _composer.value.isGlobal : false;\n    },\n    get missingWarn() {\n      return _composer.value ? _composer.value.missingWarn : _missingWarn;\n    },\n    set missingWarn(val) {\n      if (_composer.value) {\n        _composer.value.missingWarn = val;\n      }\n    },\n    get fallbackWarn() {\n      return _composer.value ? _composer.value.fallbackWarn : _fallbackWarn;\n    },\n    set fallbackWarn(val) {\n      if (_composer.value) {\n        _composer.value.missingWarn = val;\n      }\n    },\n    get fallbackRoot() {\n      return _composer.value ? _composer.value.fallbackRoot : _fallbackRoot;\n    },\n    set fallbackRoot(val) {\n      if (_composer.value) {\n        _composer.value.fallbackRoot = val;\n      }\n    },\n    get fallbackFormat() {\n      return _composer.value ? _composer.value.fallbackFormat : _fallbackFormat;\n    },\n    set fallbackFormat(val) {\n      if (_composer.value) {\n        _composer.value.fallbackFormat = val;\n      }\n    },\n    get warnHtmlMessage() {\n      return _composer.value ? _composer.value.warnHtmlMessage : _warnHtmlMessage;\n    },\n    set warnHtmlMessage(val) {\n      if (_composer.value) {\n        _composer.value.warnHtmlMessage = val;\n      }\n    },\n    get escapeParameter() {\n      return _composer.value ? _composer.value.escapeParameter : _escapeParameter;\n    },\n    set escapeParameter(val) {\n      if (_composer.value) {\n        _composer.value.escapeParameter = val;\n      }\n    },\n    t,\n    getPostTranslationHandler,\n    setPostTranslationHandler,\n    getMissingHandler,\n    setMissingHandler,\n    rt,\n    d,\n    n,\n    tm,\n    te,\n    getLocaleMessage,\n    setLocaleMessage,\n    mergeLocaleMessage,\n    getDateTimeFormat,\n    setDateTimeFormat,\n    mergeDateTimeFormat,\n    getNumberFormat,\n    setNumberFormat,\n    mergeNumberFormat\n  };\n  function sync(composer) {\n    composer.locale.value = _locale.value;\n    composer.fallbackLocale.value = _fallbackLocale.value;\n    Object.keys(_messages.value).forEach((locale2) => {\n      composer.mergeLocaleMessage(locale2, _messages.value[locale2]);\n    });\n    Object.keys(_datetimeFormats.value).forEach((locale2) => {\n      composer.mergeDateTimeFormat(locale2, _datetimeFormats.value[locale2]);\n    });\n    Object.keys(_numberFormats.value).forEach((locale2) => {\n      composer.mergeNumberFormat(locale2, _numberFormats.value[locale2]);\n    });\n    composer.escapeParameter = _escapeParameter;\n    composer.fallbackFormat = _fallbackFormat;\n    composer.fallbackRoot = _fallbackRoot;\n    composer.fallbackWarn = _fallbackWarn;\n    composer.missingWarn = _missingWarn;\n    composer.warnHtmlMessage = _warnHtmlMessage;\n  }\n  onBeforeMount(() => {\n    if (instance.proxy == null || instance.proxy.$i18n == null) {\n      throw createI18nError(I18nErrorCodes.NOT_AVAILABLE_COMPOSITION_IN_LEGACY);\n    }\n    const composer = _composer.value = instance.proxy.$i18n.__composer;\n    if (scope === \"global\") {\n      _locale.value = composer.locale.value;\n      _fallbackLocale.value = composer.fallbackLocale.value;\n      _messages.value = composer.messages.value;\n      _datetimeFormats.value = composer.datetimeFormats.value;\n      _numberFormats.value = composer.numberFormats.value;\n    } else if (isLocale) {\n      sync(composer);\n    }\n  });\n  return wrapper;\n}\nvar globalExportProps = [\n  \"locale\",\n  \"fallbackLocale\",\n  \"availableLocales\"\n];\nvar globalExportMethods = [\"t\", \"rt\", \"d\", \"n\", \"tm\"];\nfunction injectGlobalFields(app, composer) {\n  const i18n = /* @__PURE__ */ Object.create(null);\n  globalExportProps.forEach((prop) => {\n    const desc = Object.getOwnPropertyDescriptor(composer, prop);\n    if (!desc) {\n      throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);\n    }\n    const wrap = isRef(desc.value) ? {\n      get() {\n        return desc.value.value;\n      },\n      set(val) {\n        desc.value.value = val;\n      }\n    } : {\n      get() {\n        return desc.get && desc.get();\n      }\n    };\n    Object.defineProperty(i18n, prop, wrap);\n  });\n  app.config.globalProperties.$i18n = i18n;\n  globalExportMethods.forEach((method) => {\n    const desc = Object.getOwnPropertyDescriptor(composer, method);\n    if (!desc || !desc.value) {\n      throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);\n    }\n    Object.defineProperty(app.config.globalProperties, `$${method}`, desc);\n  });\n}\nregisterMessageCompiler(compileToFunction);\nregisterMessageResolver(resolveValue);\nregisterLocaleFallbacker(fallbackWithLocaleChain);\n{\n  initFeatureFlags();\n}\nif (true) {\n  const target = getGlobalThis();\n  target.__INTLIFY__ = true;\n  setDevToolsHook(target.__INTLIFY_DEVTOOLS_GLOBAL_HOOK__);\n}\nif (true)\n  ;\nexport {\n  DatetimeFormat,\n  I18nInjectionKey,\n  NumberFormat,\n  Translation,\n  VERSION2 as VERSION,\n  castToVueI18n,\n  createI18n,\n  useI18n,\n  vTDirective\n};\n/*!\n  * core-base v9.2.2\n  * (c) 2022 kazuya kawaguchi\n  * Released under the MIT License.\n  */\n/*!\n  * devtools-if v9.2.2\n  * (c) 2022 kazuya kawaguchi\n  * Released under the MIT License.\n  */\n/*!\n  * message-compiler v9.2.2\n  * (c) 2022 kazuya kawaguchi\n  * Released under the MIT License.\n  */\n/*!\n  * shared v9.2.2\n  * (c) 2022 kazuya kawaguchi\n  * Released under the MIT License.\n  */\n/*!\n  * vue-devtools v9.2.2\n  * (c) 2022 kazuya kawaguchi\n  * Released under the MIT License.\n  */\n/*!\n  * vue-i18n v9.2.2\n  * (c) 2022 kazuya kawaguchi\n  * Released under the MIT License.\n  */\n//# sourceMappingURL=vue-i18n.js.map\n","start":1663662532177,"end":1663662532177,"order":"normal"},{"name":"vite:import-analysis","result":"import {\n  setupDevtoolsPlugin\n} from \"/node_modules/.vite/deps/chunk-XYHHE7SP.js?v=b1656508\";\nimport {\n  Fragment,\n  Text,\n  computed,\n  createVNode,\n  effectScope,\n  getCurrentInstance,\n  h,\n  inject,\n  isRef,\n  onBeforeMount,\n  onMounted,\n  onUnmounted,\n  ref,\n  shallowRef,\n  watch\n} from \"/node_modules/.vite/deps/chunk-2ST5CNOS.js?v=b1656508\";\nimport \"/node_modules/.vite/deps/chunk-TWLJ45QX.js?v=b1656508\";\n\n// node_modules/.pnpm/@intlify+shared@9.2.2/node_modules/@intlify/shared/dist/shared.esm-bundler.js\nvar inBrowser = typeof window !== \"undefined\";\nvar mark;\nvar measure;\nif (true) {\n  const perf = inBrowser && window.performance;\n  if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {\n    mark = (tag) => perf.mark(tag);\n    measure = (name, startTag, endTag) => {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n    };\n  }\n}\nvar RE_ARGS = /\\{([0-9a-zA-Z]+)\\}/g;\nfunction format(message, ...args) {\n  if (args.length === 1 && isObject(args[0])) {\n    args = args[0];\n  }\n  if (!args || !args.hasOwnProperty) {\n    args = {};\n  }\n  return message.replace(RE_ARGS, (match, identifier) => {\n    return args.hasOwnProperty(identifier) ? args[identifier] : \"\";\n  });\n}\nvar hasSymbol = typeof Symbol === \"function\" && typeof Symbol.toStringTag === \"symbol\";\nvar makeSymbol = (name) => hasSymbol ? Symbol(name) : name;\nvar generateFormatCacheKey = (locale, key, source) => friendlyJSONstringify({ l: locale, k: key, s: source });\nvar friendlyJSONstringify = (json) => JSON.stringify(json).replace(/\\u2028/g, \"\\\\u2028\").replace(/\\u2029/g, \"\\\\u2029\").replace(/\\u0027/g, \"\\\\u0027\");\nvar isNumber = (val) => typeof val === \"number\" && isFinite(val);\nvar isDate = (val) => toTypeString(val) === \"[object Date]\";\nvar isRegExp = (val) => toTypeString(val) === \"[object RegExp]\";\nvar isEmptyObject = (val) => isPlainObject(val) && Object.keys(val).length === 0;\nfunction warn(msg, err) {\n  if (typeof console !== \"undefined\") {\n    console.warn(`[intlify] ` + msg);\n    if (err) {\n      console.warn(err.stack);\n    }\n  }\n}\nvar assign = Object.assign;\nvar _globalThis;\nvar getGlobalThis = () => {\n  return _globalThis || (_globalThis = typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : {});\n};\nfunction escapeHtml(rawText) {\n  return rawText.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&apos;\");\n}\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\nvar isArray = Array.isArray;\nvar isFunction = (val) => typeof val === \"function\";\nvar isString = (val) => typeof val === \"string\";\nvar isBoolean = (val) => typeof val === \"boolean\";\nvar isObject = (val) => val !== null && typeof val === \"object\";\nvar objectToString = Object.prototype.toString;\nvar toTypeString = (value) => objectToString.call(value);\nvar isPlainObject = (val) => toTypeString(val) === \"[object Object]\";\nvar toDisplayString = (val) => {\n  return val == null ? \"\" : isArray(val) || isPlainObject(val) && val.toString === objectToString ? JSON.stringify(val, null, 2) : String(val);\n};\nvar RANGE = 2;\nfunction generateCodeFrame(source, start = 0, end = source.length) {\n  const lines = source.split(/\\r?\\n/);\n  let count = 0;\n  const res = [];\n  for (let i = 0; i < lines.length; i++) {\n    count += lines[i].length + 1;\n    if (count >= start) {\n      for (let j = i - RANGE; j <= i + RANGE || end > count; j++) {\n        if (j < 0 || j >= lines.length)\n          continue;\n        const line = j + 1;\n        res.push(`${line}${\" \".repeat(3 - String(line).length)}|  ${lines[j]}`);\n        const lineLength = lines[j].length;\n        if (j === i) {\n          const pad = start - (count - lineLength) + 1;\n          const length = Math.max(1, end > count ? lineLength - pad : end - start);\n          res.push(`   |  ` + \" \".repeat(pad) + \"^\".repeat(length));\n        } else if (j > i) {\n          if (end > count) {\n            const length = Math.max(Math.min(end - count, lineLength), 1);\n            res.push(`   |  ` + \"^\".repeat(length));\n          }\n          count += lineLength + 1;\n        }\n      }\n      break;\n    }\n  }\n  return res.join(\"\\n\");\n}\nfunction createEmitter() {\n  const events = /* @__PURE__ */ new Map();\n  const emitter = {\n    events,\n    on(event, handler) {\n      const handlers = events.get(event);\n      const added = handlers && handlers.push(handler);\n      if (!added) {\n        events.set(event, [handler]);\n      }\n    },\n    off(event, handler) {\n      const handlers = events.get(event);\n      if (handlers) {\n        handlers.splice(handlers.indexOf(handler) >>> 0, 1);\n      }\n    },\n    emit(event, payload) {\n      (events.get(event) || []).slice().map((handler) => handler(payload));\n      (events.get(\"*\") || []).slice().map((handler) => handler(event, payload));\n    }\n  };\n  return emitter;\n}\n\n// node_modules/.pnpm/@intlify+message-compiler@9.2.2/node_modules/@intlify/message-compiler/dist/message-compiler.esm-bundler.js\nvar CompileErrorCodes = {\n  EXPECTED_TOKEN: 1,\n  INVALID_TOKEN_IN_PLACEHOLDER: 2,\n  UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER: 3,\n  UNKNOWN_ESCAPE_SEQUENCE: 4,\n  INVALID_UNICODE_ESCAPE_SEQUENCE: 5,\n  UNBALANCED_CLOSING_BRACE: 6,\n  UNTERMINATED_CLOSING_BRACE: 7,\n  EMPTY_PLACEHOLDER: 8,\n  NOT_ALLOW_NEST_PLACEHOLDER: 9,\n  INVALID_LINKED_FORMAT: 10,\n  MUST_HAVE_MESSAGES_IN_PLURAL: 11,\n  UNEXPECTED_EMPTY_LINKED_MODIFIER: 12,\n  UNEXPECTED_EMPTY_LINKED_KEY: 13,\n  UNEXPECTED_LEXICAL_ANALYSIS: 14,\n  __EXTEND_POINT__: 15\n};\nvar errorMessages = {\n  [CompileErrorCodes.EXPECTED_TOKEN]: `Expected token: '{0}'`,\n  [CompileErrorCodes.INVALID_TOKEN_IN_PLACEHOLDER]: `Invalid token in placeholder: '{0}'`,\n  [CompileErrorCodes.UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER]: `Unterminated single quote in placeholder`,\n  [CompileErrorCodes.UNKNOWN_ESCAPE_SEQUENCE]: `Unknown escape sequence: \\\\{0}`,\n  [CompileErrorCodes.INVALID_UNICODE_ESCAPE_SEQUENCE]: `Invalid unicode escape sequence: {0}`,\n  [CompileErrorCodes.UNBALANCED_CLOSING_BRACE]: `Unbalanced closing brace`,\n  [CompileErrorCodes.UNTERMINATED_CLOSING_BRACE]: `Unterminated closing brace`,\n  [CompileErrorCodes.EMPTY_PLACEHOLDER]: `Empty placeholder`,\n  [CompileErrorCodes.NOT_ALLOW_NEST_PLACEHOLDER]: `Not allowed nest placeholder`,\n  [CompileErrorCodes.INVALID_LINKED_FORMAT]: `Invalid linked format`,\n  [CompileErrorCodes.MUST_HAVE_MESSAGES_IN_PLURAL]: `Plural must have messages`,\n  [CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_MODIFIER]: `Unexpected empty linked modifier`,\n  [CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_KEY]: `Unexpected empty linked key`,\n  [CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS]: `Unexpected lexical analysis in token: '{0}'`\n};\nfunction createCompileError(code3, loc, options = {}) {\n  const { domain, messages, args } = options;\n  const msg = true ? format((messages || errorMessages)[code3] || \"\", ...args || []) : code3;\n  const error = new SyntaxError(String(msg));\n  error.code = code3;\n  if (loc) {\n    error.location = loc;\n  }\n  error.domain = domain;\n  return error;\n}\nfunction defaultOnError(error) {\n  throw error;\n}\nfunction createPosition(line, column, offset) {\n  return { line, column, offset };\n}\nfunction createLocation(start, end, source) {\n  const loc = { start, end };\n  if (source != null) {\n    loc.source = source;\n  }\n  return loc;\n}\nvar CHAR_SP = \" \";\nvar CHAR_CR = \"\\r\";\nvar CHAR_LF = \"\\n\";\nvar CHAR_LS = String.fromCharCode(8232);\nvar CHAR_PS = String.fromCharCode(8233);\nfunction createScanner(str) {\n  const _buf = str;\n  let _index = 0;\n  let _line = 1;\n  let _column = 1;\n  let _peekOffset = 0;\n  const isCRLF = (index2) => _buf[index2] === CHAR_CR && _buf[index2 + 1] === CHAR_LF;\n  const isLF = (index2) => _buf[index2] === CHAR_LF;\n  const isPS = (index2) => _buf[index2] === CHAR_PS;\n  const isLS = (index2) => _buf[index2] === CHAR_LS;\n  const isLineEnd = (index2) => isCRLF(index2) || isLF(index2) || isPS(index2) || isLS(index2);\n  const index = () => _index;\n  const line = () => _line;\n  const column = () => _column;\n  const peekOffset = () => _peekOffset;\n  const charAt = (offset) => isCRLF(offset) || isPS(offset) || isLS(offset) ? CHAR_LF : _buf[offset];\n  const currentChar = () => charAt(_index);\n  const currentPeek = () => charAt(_index + _peekOffset);\n  function next() {\n    _peekOffset = 0;\n    if (isLineEnd(_index)) {\n      _line++;\n      _column = 0;\n    }\n    if (isCRLF(_index)) {\n      _index++;\n    }\n    _index++;\n    _column++;\n    return _buf[_index];\n  }\n  function peek() {\n    if (isCRLF(_index + _peekOffset)) {\n      _peekOffset++;\n    }\n    _peekOffset++;\n    return _buf[_index + _peekOffset];\n  }\n  function reset() {\n    _index = 0;\n    _line = 1;\n    _column = 1;\n    _peekOffset = 0;\n  }\n  function resetPeek(offset = 0) {\n    _peekOffset = offset;\n  }\n  function skipToPeek() {\n    const target = _index + _peekOffset;\n    while (target !== _index) {\n      next();\n    }\n    _peekOffset = 0;\n  }\n  return {\n    index,\n    line,\n    column,\n    peekOffset,\n    charAt,\n    currentChar,\n    currentPeek,\n    next,\n    peek,\n    reset,\n    resetPeek,\n    skipToPeek\n  };\n}\nvar EOF = void 0;\nvar LITERAL_DELIMITER = \"'\";\nvar ERROR_DOMAIN$1 = \"tokenizer\";\nfunction createTokenizer(source, options = {}) {\n  const location = options.location !== false;\n  const _scnr = createScanner(source);\n  const currentOffset = () => _scnr.index();\n  const currentPosition = () => createPosition(_scnr.line(), _scnr.column(), _scnr.index());\n  const _initLoc = currentPosition();\n  const _initOffset = currentOffset();\n  const _context = {\n    currentType: 14,\n    offset: _initOffset,\n    startLoc: _initLoc,\n    endLoc: _initLoc,\n    lastType: 14,\n    lastOffset: _initOffset,\n    lastStartLoc: _initLoc,\n    lastEndLoc: _initLoc,\n    braceNest: 0,\n    inLinked: false,\n    text: \"\"\n  };\n  const context = () => _context;\n  const { onError } = options;\n  function emitError(code3, pos, offset, ...args) {\n    const ctx = context();\n    pos.column += offset;\n    pos.offset += offset;\n    if (onError) {\n      const loc = createLocation(ctx.startLoc, pos);\n      const err = createCompileError(code3, loc, {\n        domain: ERROR_DOMAIN$1,\n        args\n      });\n      onError(err);\n    }\n  }\n  function getToken(context2, type, value) {\n    context2.endLoc = currentPosition();\n    context2.currentType = type;\n    const token = { type };\n    if (location) {\n      token.loc = createLocation(context2.startLoc, context2.endLoc);\n    }\n    if (value != null) {\n      token.value = value;\n    }\n    return token;\n  }\n  const getEndToken = (context2) => getToken(context2, 14);\n  function eat(scnr, ch) {\n    if (scnr.currentChar() === ch) {\n      scnr.next();\n      return ch;\n    } else {\n      emitError(CompileErrorCodes.EXPECTED_TOKEN, currentPosition(), 0, ch);\n      return \"\";\n    }\n  }\n  function peekSpaces(scnr) {\n    let buf = \"\";\n    while (scnr.currentPeek() === CHAR_SP || scnr.currentPeek() === CHAR_LF) {\n      buf += scnr.currentPeek();\n      scnr.peek();\n    }\n    return buf;\n  }\n  function skipSpaces(scnr) {\n    const buf = peekSpaces(scnr);\n    scnr.skipToPeek();\n    return buf;\n  }\n  function isIdentifierStart(ch) {\n    if (ch === EOF) {\n      return false;\n    }\n    const cc = ch.charCodeAt(0);\n    return cc >= 97 && cc <= 122 || cc >= 65 && cc <= 90 || cc === 95;\n  }\n  function isNumberStart(ch) {\n    if (ch === EOF) {\n      return false;\n    }\n    const cc = ch.charCodeAt(0);\n    return cc >= 48 && cc <= 57;\n  }\n  function isNamedIdentifierStart(scnr, context2) {\n    const { currentType } = context2;\n    if (currentType !== 2) {\n      return false;\n    }\n    peekSpaces(scnr);\n    const ret = isIdentifierStart(scnr.currentPeek());\n    scnr.resetPeek();\n    return ret;\n  }\n  function isListIdentifierStart(scnr, context2) {\n    const { currentType } = context2;\n    if (currentType !== 2) {\n      return false;\n    }\n    peekSpaces(scnr);\n    const ch = scnr.currentPeek() === \"-\" ? scnr.peek() : scnr.currentPeek();\n    const ret = isNumberStart(ch);\n    scnr.resetPeek();\n    return ret;\n  }\n  function isLiteralStart(scnr, context2) {\n    const { currentType } = context2;\n    if (currentType !== 2) {\n      return false;\n    }\n    peekSpaces(scnr);\n    const ret = scnr.currentPeek() === LITERAL_DELIMITER;\n    scnr.resetPeek();\n    return ret;\n  }\n  function isLinkedDotStart(scnr, context2) {\n    const { currentType } = context2;\n    if (currentType !== 8) {\n      return false;\n    }\n    peekSpaces(scnr);\n    const ret = scnr.currentPeek() === \".\";\n    scnr.resetPeek();\n    return ret;\n  }\n  function isLinkedModifierStart(scnr, context2) {\n    const { currentType } = context2;\n    if (currentType !== 9) {\n      return false;\n    }\n    peekSpaces(scnr);\n    const ret = isIdentifierStart(scnr.currentPeek());\n    scnr.resetPeek();\n    return ret;\n  }\n  function isLinkedDelimiterStart(scnr, context2) {\n    const { currentType } = context2;\n    if (!(currentType === 8 || currentType === 12)) {\n      return false;\n    }\n    peekSpaces(scnr);\n    const ret = scnr.currentPeek() === \":\";\n    scnr.resetPeek();\n    return ret;\n  }\n  function isLinkedReferStart(scnr, context2) {\n    const { currentType } = context2;\n    if (currentType !== 10) {\n      return false;\n    }\n    const fn = () => {\n      const ch = scnr.currentPeek();\n      if (ch === \"{\") {\n        return isIdentifierStart(scnr.peek());\n      } else if (ch === \"@\" || ch === \"%\" || ch === \"|\" || ch === \":\" || ch === \".\" || ch === CHAR_SP || !ch) {\n        return false;\n      } else if (ch === CHAR_LF) {\n        scnr.peek();\n        return fn();\n      } else {\n        return isIdentifierStart(ch);\n      }\n    };\n    const ret = fn();\n    scnr.resetPeek();\n    return ret;\n  }\n  function isPluralStart(scnr) {\n    peekSpaces(scnr);\n    const ret = scnr.currentPeek() === \"|\";\n    scnr.resetPeek();\n    return ret;\n  }\n  function detectModuloStart(scnr) {\n    const spaces = peekSpaces(scnr);\n    const ret = scnr.currentPeek() === \"%\" && scnr.peek() === \"{\";\n    scnr.resetPeek();\n    return {\n      isModulo: ret,\n      hasSpace: spaces.length > 0\n    };\n  }\n  function isTextStart(scnr, reset = true) {\n    const fn = (hasSpace = false, prev = \"\", detectModulo = false) => {\n      const ch = scnr.currentPeek();\n      if (ch === \"{\") {\n        return prev === \"%\" ? false : hasSpace;\n      } else if (ch === \"@\" || !ch) {\n        return prev === \"%\" ? true : hasSpace;\n      } else if (ch === \"%\") {\n        scnr.peek();\n        return fn(hasSpace, \"%\", true);\n      } else if (ch === \"|\") {\n        return prev === \"%\" || detectModulo ? true : !(prev === CHAR_SP || prev === CHAR_LF);\n      } else if (ch === CHAR_SP) {\n        scnr.peek();\n        return fn(true, CHAR_SP, detectModulo);\n      } else if (ch === CHAR_LF) {\n        scnr.peek();\n        return fn(true, CHAR_LF, detectModulo);\n      } else {\n        return true;\n      }\n    };\n    const ret = fn();\n    reset && scnr.resetPeek();\n    return ret;\n  }\n  function takeChar(scnr, fn) {\n    const ch = scnr.currentChar();\n    if (ch === EOF) {\n      return EOF;\n    }\n    if (fn(ch)) {\n      scnr.next();\n      return ch;\n    }\n    return null;\n  }\n  function takeIdentifierChar(scnr) {\n    const closure = (ch) => {\n      const cc = ch.charCodeAt(0);\n      return cc >= 97 && cc <= 122 || cc >= 65 && cc <= 90 || cc >= 48 && cc <= 57 || cc === 95 || cc === 36;\n    };\n    return takeChar(scnr, closure);\n  }\n  function takeDigit(scnr) {\n    const closure = (ch) => {\n      const cc = ch.charCodeAt(0);\n      return cc >= 48 && cc <= 57;\n    };\n    return takeChar(scnr, closure);\n  }\n  function takeHexDigit(scnr) {\n    const closure = (ch) => {\n      const cc = ch.charCodeAt(0);\n      return cc >= 48 && cc <= 57 || cc >= 65 && cc <= 70 || cc >= 97 && cc <= 102;\n    };\n    return takeChar(scnr, closure);\n  }\n  function getDigits(scnr) {\n    let ch = \"\";\n    let num = \"\";\n    while (ch = takeDigit(scnr)) {\n      num += ch;\n    }\n    return num;\n  }\n  function readModulo(scnr) {\n    skipSpaces(scnr);\n    const ch = scnr.currentChar();\n    if (ch !== \"%\") {\n      emitError(CompileErrorCodes.EXPECTED_TOKEN, currentPosition(), 0, ch);\n    }\n    scnr.next();\n    return \"%\";\n  }\n  function readText(scnr) {\n    let buf = \"\";\n    while (true) {\n      const ch = scnr.currentChar();\n      if (ch === \"{\" || ch === \"}\" || ch === \"@\" || ch === \"|\" || !ch) {\n        break;\n      } else if (ch === \"%\") {\n        if (isTextStart(scnr)) {\n          buf += ch;\n          scnr.next();\n        } else {\n          break;\n        }\n      } else if (ch === CHAR_SP || ch === CHAR_LF) {\n        if (isTextStart(scnr)) {\n          buf += ch;\n          scnr.next();\n        } else if (isPluralStart(scnr)) {\n          break;\n        } else {\n          buf += ch;\n          scnr.next();\n        }\n      } else {\n        buf += ch;\n        scnr.next();\n      }\n    }\n    return buf;\n  }\n  function readNamedIdentifier(scnr) {\n    skipSpaces(scnr);\n    let ch = \"\";\n    let name = \"\";\n    while (ch = takeIdentifierChar(scnr)) {\n      name += ch;\n    }\n    if (scnr.currentChar() === EOF) {\n      emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n    }\n    return name;\n  }\n  function readListIdentifier(scnr) {\n    skipSpaces(scnr);\n    let value = \"\";\n    if (scnr.currentChar() === \"-\") {\n      scnr.next();\n      value += `-${getDigits(scnr)}`;\n    } else {\n      value += getDigits(scnr);\n    }\n    if (scnr.currentChar() === EOF) {\n      emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n    }\n    return value;\n  }\n  function readLiteral(scnr) {\n    skipSpaces(scnr);\n    eat(scnr, `'`);\n    let ch = \"\";\n    let literal = \"\";\n    const fn = (x) => x !== LITERAL_DELIMITER && x !== CHAR_LF;\n    while (ch = takeChar(scnr, fn)) {\n      if (ch === \"\\\\\") {\n        literal += readEscapeSequence(scnr);\n      } else {\n        literal += ch;\n      }\n    }\n    const current = scnr.currentChar();\n    if (current === CHAR_LF || current === EOF) {\n      emitError(CompileErrorCodes.UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER, currentPosition(), 0);\n      if (current === CHAR_LF) {\n        scnr.next();\n        eat(scnr, `'`);\n      }\n      return literal;\n    }\n    eat(scnr, `'`);\n    return literal;\n  }\n  function readEscapeSequence(scnr) {\n    const ch = scnr.currentChar();\n    switch (ch) {\n      case \"\\\\\":\n      case `'`:\n        scnr.next();\n        return `\\\\${ch}`;\n      case \"u\":\n        return readUnicodeEscapeSequence(scnr, ch, 4);\n      case \"U\":\n        return readUnicodeEscapeSequence(scnr, ch, 6);\n      default:\n        emitError(CompileErrorCodes.UNKNOWN_ESCAPE_SEQUENCE, currentPosition(), 0, ch);\n        return \"\";\n    }\n  }\n  function readUnicodeEscapeSequence(scnr, unicode, digits) {\n    eat(scnr, unicode);\n    let sequence = \"\";\n    for (let i = 0; i < digits; i++) {\n      const ch = takeHexDigit(scnr);\n      if (!ch) {\n        emitError(CompileErrorCodes.INVALID_UNICODE_ESCAPE_SEQUENCE, currentPosition(), 0, `\\\\${unicode}${sequence}${scnr.currentChar()}`);\n        break;\n      }\n      sequence += ch;\n    }\n    return `\\\\${unicode}${sequence}`;\n  }\n  function readInvalidIdentifier(scnr) {\n    skipSpaces(scnr);\n    let ch = \"\";\n    let identifiers = \"\";\n    const closure = (ch2) => ch2 !== \"{\" && ch2 !== \"}\" && ch2 !== CHAR_SP && ch2 !== CHAR_LF;\n    while (ch = takeChar(scnr, closure)) {\n      identifiers += ch;\n    }\n    return identifiers;\n  }\n  function readLinkedModifier(scnr) {\n    let ch = \"\";\n    let name = \"\";\n    while (ch = takeIdentifierChar(scnr)) {\n      name += ch;\n    }\n    return name;\n  }\n  function readLinkedRefer(scnr) {\n    const fn = (detect = false, buf) => {\n      const ch = scnr.currentChar();\n      if (ch === \"{\" || ch === \"%\" || ch === \"@\" || ch === \"|\" || !ch) {\n        return buf;\n      } else if (ch === CHAR_SP) {\n        return buf;\n      } else if (ch === CHAR_LF) {\n        buf += ch;\n        scnr.next();\n        return fn(detect, buf);\n      } else {\n        buf += ch;\n        scnr.next();\n        return fn(true, buf);\n      }\n    };\n    return fn(false, \"\");\n  }\n  function readPlural(scnr) {\n    skipSpaces(scnr);\n    const plural = eat(scnr, \"|\");\n    skipSpaces(scnr);\n    return plural;\n  }\n  function readTokenInPlaceholder(scnr, context2) {\n    let token = null;\n    const ch = scnr.currentChar();\n    switch (ch) {\n      case \"{\":\n        if (context2.braceNest >= 1) {\n          emitError(CompileErrorCodes.NOT_ALLOW_NEST_PLACEHOLDER, currentPosition(), 0);\n        }\n        scnr.next();\n        token = getToken(context2, 2, \"{\");\n        skipSpaces(scnr);\n        context2.braceNest++;\n        return token;\n      case \"}\":\n        if (context2.braceNest > 0 && context2.currentType === 2) {\n          emitError(CompileErrorCodes.EMPTY_PLACEHOLDER, currentPosition(), 0);\n        }\n        scnr.next();\n        token = getToken(context2, 3, \"}\");\n        context2.braceNest--;\n        context2.braceNest > 0 && skipSpaces(scnr);\n        if (context2.inLinked && context2.braceNest === 0) {\n          context2.inLinked = false;\n        }\n        return token;\n      case \"@\":\n        if (context2.braceNest > 0) {\n          emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n        }\n        token = readTokenInLinked(scnr, context2) || getEndToken(context2);\n        context2.braceNest = 0;\n        return token;\n      default:\n        let validNamedIdentifier = true;\n        let validListIdentifier = true;\n        let validLiteral = true;\n        if (isPluralStart(scnr)) {\n          if (context2.braceNest > 0) {\n            emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n          }\n          token = getToken(context2, 1, readPlural(scnr));\n          context2.braceNest = 0;\n          context2.inLinked = false;\n          return token;\n        }\n        if (context2.braceNest > 0 && (context2.currentType === 5 || context2.currentType === 6 || context2.currentType === 7)) {\n          emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n          context2.braceNest = 0;\n          return readToken(scnr, context2);\n        }\n        if (validNamedIdentifier = isNamedIdentifierStart(scnr, context2)) {\n          token = getToken(context2, 5, readNamedIdentifier(scnr));\n          skipSpaces(scnr);\n          return token;\n        }\n        if (validListIdentifier = isListIdentifierStart(scnr, context2)) {\n          token = getToken(context2, 6, readListIdentifier(scnr));\n          skipSpaces(scnr);\n          return token;\n        }\n        if (validLiteral = isLiteralStart(scnr, context2)) {\n          token = getToken(context2, 7, readLiteral(scnr));\n          skipSpaces(scnr);\n          return token;\n        }\n        if (!validNamedIdentifier && !validListIdentifier && !validLiteral) {\n          token = getToken(context2, 13, readInvalidIdentifier(scnr));\n          emitError(CompileErrorCodes.INVALID_TOKEN_IN_PLACEHOLDER, currentPosition(), 0, token.value);\n          skipSpaces(scnr);\n          return token;\n        }\n        break;\n    }\n    return token;\n  }\n  function readTokenInLinked(scnr, context2) {\n    const { currentType } = context2;\n    let token = null;\n    const ch = scnr.currentChar();\n    if ((currentType === 8 || currentType === 9 || currentType === 12 || currentType === 10) && (ch === CHAR_LF || ch === CHAR_SP)) {\n      emitError(CompileErrorCodes.INVALID_LINKED_FORMAT, currentPosition(), 0);\n    }\n    switch (ch) {\n      case \"@\":\n        scnr.next();\n        token = getToken(context2, 8, \"@\");\n        context2.inLinked = true;\n        return token;\n      case \".\":\n        skipSpaces(scnr);\n        scnr.next();\n        return getToken(context2, 9, \".\");\n      case \":\":\n        skipSpaces(scnr);\n        scnr.next();\n        return getToken(context2, 10, \":\");\n      default:\n        if (isPluralStart(scnr)) {\n          token = getToken(context2, 1, readPlural(scnr));\n          context2.braceNest = 0;\n          context2.inLinked = false;\n          return token;\n        }\n        if (isLinkedDotStart(scnr, context2) || isLinkedDelimiterStart(scnr, context2)) {\n          skipSpaces(scnr);\n          return readTokenInLinked(scnr, context2);\n        }\n        if (isLinkedModifierStart(scnr, context2)) {\n          skipSpaces(scnr);\n          return getToken(context2, 12, readLinkedModifier(scnr));\n        }\n        if (isLinkedReferStart(scnr, context2)) {\n          skipSpaces(scnr);\n          if (ch === \"{\") {\n            return readTokenInPlaceholder(scnr, context2) || token;\n          } else {\n            return getToken(context2, 11, readLinkedRefer(scnr));\n          }\n        }\n        if (currentType === 8) {\n          emitError(CompileErrorCodes.INVALID_LINKED_FORMAT, currentPosition(), 0);\n        }\n        context2.braceNest = 0;\n        context2.inLinked = false;\n        return readToken(scnr, context2);\n    }\n  }\n  function readToken(scnr, context2) {\n    let token = { type: 14 };\n    if (context2.braceNest > 0) {\n      return readTokenInPlaceholder(scnr, context2) || getEndToken(context2);\n    }\n    if (context2.inLinked) {\n      return readTokenInLinked(scnr, context2) || getEndToken(context2);\n    }\n    const ch = scnr.currentChar();\n    switch (ch) {\n      case \"{\":\n        return readTokenInPlaceholder(scnr, context2) || getEndToken(context2);\n      case \"}\":\n        emitError(CompileErrorCodes.UNBALANCED_CLOSING_BRACE, currentPosition(), 0);\n        scnr.next();\n        return getToken(context2, 3, \"}\");\n      case \"@\":\n        return readTokenInLinked(scnr, context2) || getEndToken(context2);\n      default:\n        if (isPluralStart(scnr)) {\n          token = getToken(context2, 1, readPlural(scnr));\n          context2.braceNest = 0;\n          context2.inLinked = false;\n          return token;\n        }\n        const { isModulo, hasSpace } = detectModuloStart(scnr);\n        if (isModulo) {\n          return hasSpace ? getToken(context2, 0, readText(scnr)) : getToken(context2, 4, readModulo(scnr));\n        }\n        if (isTextStart(scnr)) {\n          return getToken(context2, 0, readText(scnr));\n        }\n        break;\n    }\n    return token;\n  }\n  function nextToken() {\n    const { currentType, offset, startLoc, endLoc } = _context;\n    _context.lastType = currentType;\n    _context.lastOffset = offset;\n    _context.lastStartLoc = startLoc;\n    _context.lastEndLoc = endLoc;\n    _context.offset = currentOffset();\n    _context.startLoc = currentPosition();\n    if (_scnr.currentChar() === EOF) {\n      return getToken(_context, 14);\n    }\n    return readToken(_scnr, _context);\n  }\n  return {\n    nextToken,\n    currentOffset,\n    currentPosition,\n    context\n  };\n}\nvar ERROR_DOMAIN = \"parser\";\nvar KNOWN_ESCAPES = /(?:\\\\\\\\|\\\\'|\\\\u([0-9a-fA-F]{4})|\\\\U([0-9a-fA-F]{6}))/g;\nfunction fromEscapeSequence(match, codePoint4, codePoint6) {\n  switch (match) {\n    case `\\\\\\\\`:\n      return `\\\\`;\n    case `\\\\'`:\n      return `'`;\n    default: {\n      const codePoint = parseInt(codePoint4 || codePoint6, 16);\n      if (codePoint <= 55295 || codePoint >= 57344) {\n        return String.fromCodePoint(codePoint);\n      }\n      return \"\\uFFFD\";\n    }\n  }\n}\nfunction createParser(options = {}) {\n  const location = options.location !== false;\n  const { onError } = options;\n  function emitError(tokenzer, code3, start, offset, ...args) {\n    const end = tokenzer.currentPosition();\n    end.offset += offset;\n    end.column += offset;\n    if (onError) {\n      const loc = createLocation(start, end);\n      const err = createCompileError(code3, loc, {\n        domain: ERROR_DOMAIN,\n        args\n      });\n      onError(err);\n    }\n  }\n  function startNode(type, offset, loc) {\n    const node = {\n      type,\n      start: offset,\n      end: offset\n    };\n    if (location) {\n      node.loc = { start: loc, end: loc };\n    }\n    return node;\n  }\n  function endNode(node, offset, pos, type) {\n    node.end = offset;\n    if (type) {\n      node.type = type;\n    }\n    if (location && node.loc) {\n      node.loc.end = pos;\n    }\n  }\n  function parseText(tokenizer, value) {\n    const context = tokenizer.context();\n    const node = startNode(3, context.offset, context.startLoc);\n    node.value = value;\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseList(tokenizer, index) {\n    const context = tokenizer.context();\n    const { lastOffset: offset, lastStartLoc: loc } = context;\n    const node = startNode(5, offset, loc);\n    node.index = parseInt(index, 10);\n    tokenizer.nextToken();\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseNamed(tokenizer, key) {\n    const context = tokenizer.context();\n    const { lastOffset: offset, lastStartLoc: loc } = context;\n    const node = startNode(4, offset, loc);\n    node.key = key;\n    tokenizer.nextToken();\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseLiteral(tokenizer, value) {\n    const context = tokenizer.context();\n    const { lastOffset: offset, lastStartLoc: loc } = context;\n    const node = startNode(9, offset, loc);\n    node.value = value.replace(KNOWN_ESCAPES, fromEscapeSequence);\n    tokenizer.nextToken();\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseLinkedModifier(tokenizer) {\n    const token = tokenizer.nextToken();\n    const context = tokenizer.context();\n    const { lastOffset: offset, lastStartLoc: loc } = context;\n    const node = startNode(8, offset, loc);\n    if (token.type !== 12) {\n      emitError(tokenizer, CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_MODIFIER, context.lastStartLoc, 0);\n      node.value = \"\";\n      endNode(node, offset, loc);\n      return {\n        nextConsumeToken: token,\n        node\n      };\n    }\n    if (token.value == null) {\n      emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n    }\n    node.value = token.value || \"\";\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return {\n      node\n    };\n  }\n  function parseLinkedKey(tokenizer, value) {\n    const context = tokenizer.context();\n    const node = startNode(7, context.offset, context.startLoc);\n    node.value = value;\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseLinked(tokenizer) {\n    const context = tokenizer.context();\n    const linkedNode = startNode(6, context.offset, context.startLoc);\n    let token = tokenizer.nextToken();\n    if (token.type === 9) {\n      const parsed = parseLinkedModifier(tokenizer);\n      linkedNode.modifier = parsed.node;\n      token = parsed.nextConsumeToken || tokenizer.nextToken();\n    }\n    if (token.type !== 10) {\n      emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n    }\n    token = tokenizer.nextToken();\n    if (token.type === 2) {\n      token = tokenizer.nextToken();\n    }\n    switch (token.type) {\n      case 11:\n        if (token.value == null) {\n          emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n        }\n        linkedNode.key = parseLinkedKey(tokenizer, token.value || \"\");\n        break;\n      case 5:\n        if (token.value == null) {\n          emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n        }\n        linkedNode.key = parseNamed(tokenizer, token.value || \"\");\n        break;\n      case 6:\n        if (token.value == null) {\n          emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n        }\n        linkedNode.key = parseList(tokenizer, token.value || \"\");\n        break;\n      case 7:\n        if (token.value == null) {\n          emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n        }\n        linkedNode.key = parseLiteral(tokenizer, token.value || \"\");\n        break;\n      default:\n        emitError(tokenizer, CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_KEY, context.lastStartLoc, 0);\n        const nextContext = tokenizer.context();\n        const emptyLinkedKeyNode = startNode(7, nextContext.offset, nextContext.startLoc);\n        emptyLinkedKeyNode.value = \"\";\n        endNode(emptyLinkedKeyNode, nextContext.offset, nextContext.startLoc);\n        linkedNode.key = emptyLinkedKeyNode;\n        endNode(linkedNode, nextContext.offset, nextContext.startLoc);\n        return {\n          nextConsumeToken: token,\n          node: linkedNode\n        };\n    }\n    endNode(linkedNode, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return {\n      node: linkedNode\n    };\n  }\n  function parseMessage(tokenizer) {\n    const context = tokenizer.context();\n    const startOffset = context.currentType === 1 ? tokenizer.currentOffset() : context.offset;\n    const startLoc = context.currentType === 1 ? context.endLoc : context.startLoc;\n    const node = startNode(2, startOffset, startLoc);\n    node.items = [];\n    let nextToken = null;\n    do {\n      const token = nextToken || tokenizer.nextToken();\n      nextToken = null;\n      switch (token.type) {\n        case 0:\n          if (token.value == null) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n          }\n          node.items.push(parseText(tokenizer, token.value || \"\"));\n          break;\n        case 6:\n          if (token.value == null) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n          }\n          node.items.push(parseList(tokenizer, token.value || \"\"));\n          break;\n        case 5:\n          if (token.value == null) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n          }\n          node.items.push(parseNamed(tokenizer, token.value || \"\"));\n          break;\n        case 7:\n          if (token.value == null) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n          }\n          node.items.push(parseLiteral(tokenizer, token.value || \"\"));\n          break;\n        case 8:\n          const parsed = parseLinked(tokenizer);\n          node.items.push(parsed.node);\n          nextToken = parsed.nextConsumeToken || null;\n          break;\n      }\n    } while (context.currentType !== 14 && context.currentType !== 1);\n    const endOffset = context.currentType === 1 ? context.lastOffset : tokenizer.currentOffset();\n    const endLoc = context.currentType === 1 ? context.lastEndLoc : tokenizer.currentPosition();\n    endNode(node, endOffset, endLoc);\n    return node;\n  }\n  function parsePlural(tokenizer, offset, loc, msgNode) {\n    const context = tokenizer.context();\n    let hasEmptyMessage = msgNode.items.length === 0;\n    const node = startNode(1, offset, loc);\n    node.cases = [];\n    node.cases.push(msgNode);\n    do {\n      const msg = parseMessage(tokenizer);\n      if (!hasEmptyMessage) {\n        hasEmptyMessage = msg.items.length === 0;\n      }\n      node.cases.push(msg);\n    } while (context.currentType !== 14);\n    if (hasEmptyMessage) {\n      emitError(tokenizer, CompileErrorCodes.MUST_HAVE_MESSAGES_IN_PLURAL, loc, 0);\n    }\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseResource(tokenizer) {\n    const context = tokenizer.context();\n    const { offset, startLoc } = context;\n    const msgNode = parseMessage(tokenizer);\n    if (context.currentType === 14) {\n      return msgNode;\n    } else {\n      return parsePlural(tokenizer, offset, startLoc, msgNode);\n    }\n  }\n  function parse2(source) {\n    const tokenizer = createTokenizer(source, assign({}, options));\n    const context = tokenizer.context();\n    const node = startNode(0, context.offset, context.startLoc);\n    if (location && node.loc) {\n      node.loc.source = source;\n    }\n    node.body = parseResource(tokenizer);\n    if (context.currentType !== 14) {\n      emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, source[context.offset] || \"\");\n    }\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  return { parse: parse2 };\n}\nfunction getTokenCaption(token) {\n  if (token.type === 14) {\n    return \"EOF\";\n  }\n  const name = (token.value || \"\").replace(/\\r?\\n/gu, \"\\\\n\");\n  return name.length > 10 ? name.slice(0, 9) + \"\\u2026\" : name;\n}\nfunction createTransformer(ast, options = {}) {\n  const _context = {\n    ast,\n    helpers: /* @__PURE__ */ new Set()\n  };\n  const context = () => _context;\n  const helper = (name) => {\n    _context.helpers.add(name);\n    return name;\n  };\n  return { context, helper };\n}\nfunction traverseNodes(nodes, transformer) {\n  for (let i = 0; i < nodes.length; i++) {\n    traverseNode(nodes[i], transformer);\n  }\n}\nfunction traverseNode(node, transformer) {\n  switch (node.type) {\n    case 1:\n      traverseNodes(node.cases, transformer);\n      transformer.helper(\"plural\");\n      break;\n    case 2:\n      traverseNodes(node.items, transformer);\n      break;\n    case 6:\n      const linked = node;\n      traverseNode(linked.key, transformer);\n      transformer.helper(\"linked\");\n      transformer.helper(\"type\");\n      break;\n    case 5:\n      transformer.helper(\"interpolate\");\n      transformer.helper(\"list\");\n      break;\n    case 4:\n      transformer.helper(\"interpolate\");\n      transformer.helper(\"named\");\n      break;\n  }\n}\nfunction transform(ast, options = {}) {\n  const transformer = createTransformer(ast);\n  transformer.helper(\"normalize\");\n  ast.body && traverseNode(ast.body, transformer);\n  const context = transformer.context();\n  ast.helpers = Array.from(context.helpers);\n}\nfunction createCodeGenerator(ast, options) {\n  const { sourceMap, filename, breakLineCode, needIndent: _needIndent } = options;\n  const _context = {\n    source: ast.loc.source,\n    filename,\n    code: \"\",\n    column: 1,\n    line: 1,\n    offset: 0,\n    map: void 0,\n    breakLineCode,\n    needIndent: _needIndent,\n    indentLevel: 0\n  };\n  const context = () => _context;\n  function push(code3, node) {\n    _context.code += code3;\n  }\n  function _newline(n, withBreakLine = true) {\n    const _breakLineCode = withBreakLine ? breakLineCode : \"\";\n    push(_needIndent ? _breakLineCode + `  `.repeat(n) : _breakLineCode);\n  }\n  function indent(withNewLine = true) {\n    const level = ++_context.indentLevel;\n    withNewLine && _newline(level);\n  }\n  function deindent(withNewLine = true) {\n    const level = --_context.indentLevel;\n    withNewLine && _newline(level);\n  }\n  function newline() {\n    _newline(_context.indentLevel);\n  }\n  const helper = (key) => `_${key}`;\n  const needIndent = () => _context.needIndent;\n  return {\n    context,\n    push,\n    indent,\n    deindent,\n    newline,\n    helper,\n    needIndent\n  };\n}\nfunction generateLinkedNode(generator, node) {\n  const { helper } = generator;\n  generator.push(`${helper(\"linked\")}(`);\n  generateNode(generator, node.key);\n  if (node.modifier) {\n    generator.push(`, `);\n    generateNode(generator, node.modifier);\n    generator.push(`, _type`);\n  } else {\n    generator.push(`, undefined, _type`);\n  }\n  generator.push(`)`);\n}\nfunction generateMessageNode(generator, node) {\n  const { helper, needIndent } = generator;\n  generator.push(`${helper(\"normalize\")}([`);\n  generator.indent(needIndent());\n  const length = node.items.length;\n  for (let i = 0; i < length; i++) {\n    generateNode(generator, node.items[i]);\n    if (i === length - 1) {\n      break;\n    }\n    generator.push(\", \");\n  }\n  generator.deindent(needIndent());\n  generator.push(\"])\");\n}\nfunction generatePluralNode(generator, node) {\n  const { helper, needIndent } = generator;\n  if (node.cases.length > 1) {\n    generator.push(`${helper(\"plural\")}([`);\n    generator.indent(needIndent());\n    const length = node.cases.length;\n    for (let i = 0; i < length; i++) {\n      generateNode(generator, node.cases[i]);\n      if (i === length - 1) {\n        break;\n      }\n      generator.push(\", \");\n    }\n    generator.deindent(needIndent());\n    generator.push(`])`);\n  }\n}\nfunction generateResource(generator, node) {\n  if (node.body) {\n    generateNode(generator, node.body);\n  } else {\n    generator.push(\"null\");\n  }\n}\nfunction generateNode(generator, node) {\n  const { helper } = generator;\n  switch (node.type) {\n    case 0:\n      generateResource(generator, node);\n      break;\n    case 1:\n      generatePluralNode(generator, node);\n      break;\n    case 2:\n      generateMessageNode(generator, node);\n      break;\n    case 6:\n      generateLinkedNode(generator, node);\n      break;\n    case 8:\n      generator.push(JSON.stringify(node.value), node);\n      break;\n    case 7:\n      generator.push(JSON.stringify(node.value), node);\n      break;\n    case 5:\n      generator.push(`${helper(\"interpolate\")}(${helper(\"list\")}(${node.index}))`, node);\n      break;\n    case 4:\n      generator.push(`${helper(\"interpolate\")}(${helper(\"named\")}(${JSON.stringify(node.key)}))`, node);\n      break;\n    case 9:\n      generator.push(JSON.stringify(node.value), node);\n      break;\n    case 3:\n      generator.push(JSON.stringify(node.value), node);\n      break;\n    default:\n      if (true) {\n        throw new Error(`unhandled codegen node type: ${node.type}`);\n      }\n  }\n}\nvar generate = (ast, options = {}) => {\n  const mode = isString(options.mode) ? options.mode : \"normal\";\n  const filename = isString(options.filename) ? options.filename : \"message.intl\";\n  const sourceMap = !!options.sourceMap;\n  const breakLineCode = options.breakLineCode != null ? options.breakLineCode : mode === \"arrow\" ? \";\" : \"\\n\";\n  const needIndent = options.needIndent ? options.needIndent : mode !== \"arrow\";\n  const helpers = ast.helpers || [];\n  const generator = createCodeGenerator(ast, {\n    mode,\n    filename,\n    sourceMap,\n    breakLineCode,\n    needIndent\n  });\n  generator.push(mode === \"normal\" ? `function __msg__ (ctx) {` : `(ctx) => {`);\n  generator.indent(needIndent);\n  if (helpers.length > 0) {\n    generator.push(`const { ${helpers.map((s) => `${s}: _${s}`).join(\", \")} } = ctx`);\n    generator.newline();\n  }\n  generator.push(`return `);\n  generateNode(generator, ast);\n  generator.deindent(needIndent);\n  generator.push(`}`);\n  const { code: code3, map } = generator.context();\n  return {\n    ast,\n    code: code3,\n    map: map ? map.toJSON() : void 0\n  };\n};\nfunction baseCompile(source, options = {}) {\n  const assignedOptions = assign({}, options);\n  const parser = createParser(assignedOptions);\n  const ast = parser.parse(source);\n  transform(ast, assignedOptions);\n  return generate(ast, assignedOptions);\n}\n\n// node_modules/.pnpm/@intlify+devtools-if@9.2.2/node_modules/@intlify/devtools-if/dist/devtools-if.esm-bundler.js\nvar IntlifyDevToolsHooks = {\n  I18nInit: \"i18n:init\",\n  FunctionTranslate: \"function:translate\"\n};\n\n// node_modules/.pnpm/@intlify+core-base@9.2.2/node_modules/@intlify/core-base/dist/core-base.esm-bundler.js\nvar pathStateMachine = [];\npathStateMachine[0] = {\n  [\"w\"]: [0],\n  [\"i\"]: [3, 0],\n  [\"[\"]: [4],\n  [\"o\"]: [7]\n};\npathStateMachine[1] = {\n  [\"w\"]: [1],\n  [\".\"]: [2],\n  [\"[\"]: [4],\n  [\"o\"]: [7]\n};\npathStateMachine[2] = {\n  [\"w\"]: [2],\n  [\"i\"]: [3, 0],\n  [\"0\"]: [3, 0]\n};\npathStateMachine[3] = {\n  [\"i\"]: [3, 0],\n  [\"0\"]: [3, 0],\n  [\"w\"]: [1, 1],\n  [\".\"]: [2, 1],\n  [\"[\"]: [4, 1],\n  [\"o\"]: [7, 1]\n};\npathStateMachine[4] = {\n  [\"'\"]: [5, 0],\n  ['\"']: [6, 0],\n  [\"[\"]: [\n    4,\n    2\n  ],\n  [\"]\"]: [1, 3],\n  [\"o\"]: 8,\n  [\"l\"]: [4, 0]\n};\npathStateMachine[5] = {\n  [\"'\"]: [4, 0],\n  [\"o\"]: 8,\n  [\"l\"]: [5, 0]\n};\npathStateMachine[6] = {\n  ['\"']: [4, 0],\n  [\"o\"]: 8,\n  [\"l\"]: [6, 0]\n};\nvar literalValueRE = /^\\s?(?:true|false|-?[\\d.]+|'[^']*'|\"[^\"]*\")\\s?$/;\nfunction isLiteral(exp) {\n  return literalValueRE.test(exp);\n}\nfunction stripQuotes(str) {\n  const a = str.charCodeAt(0);\n  const b = str.charCodeAt(str.length - 1);\n  return a === b && (a === 34 || a === 39) ? str.slice(1, -1) : str;\n}\nfunction getPathCharType(ch) {\n  if (ch === void 0 || ch === null) {\n    return \"o\";\n  }\n  const code3 = ch.charCodeAt(0);\n  switch (code3) {\n    case 91:\n    case 93:\n    case 46:\n    case 34:\n    case 39:\n      return ch;\n    case 95:\n    case 36:\n    case 45:\n      return \"i\";\n    case 9:\n    case 10:\n    case 13:\n    case 160:\n    case 65279:\n    case 8232:\n    case 8233:\n      return \"w\";\n  }\n  return \"i\";\n}\nfunction formatSubPath(path) {\n  const trimmed = path.trim();\n  if (path.charAt(0) === \"0\" && isNaN(parseInt(path))) {\n    return false;\n  }\n  return isLiteral(trimmed) ? stripQuotes(trimmed) : \"*\" + trimmed;\n}\nfunction parse(path) {\n  const keys = [];\n  let index = -1;\n  let mode = 0;\n  let subPathDepth = 0;\n  let c;\n  let key;\n  let newChar;\n  let type;\n  let transition;\n  let action;\n  let typeMap;\n  const actions = [];\n  actions[0] = () => {\n    if (key === void 0) {\n      key = newChar;\n    } else {\n      key += newChar;\n    }\n  };\n  actions[1] = () => {\n    if (key !== void 0) {\n      keys.push(key);\n      key = void 0;\n    }\n  };\n  actions[2] = () => {\n    actions[0]();\n    subPathDepth++;\n  };\n  actions[3] = () => {\n    if (subPathDepth > 0) {\n      subPathDepth--;\n      mode = 4;\n      actions[0]();\n    } else {\n      subPathDepth = 0;\n      if (key === void 0) {\n        return false;\n      }\n      key = formatSubPath(key);\n      if (key === false) {\n        return false;\n      } else {\n        actions[1]();\n      }\n    }\n  };\n  function maybeUnescapeQuote() {\n    const nextChar = path[index + 1];\n    if (mode === 5 && nextChar === \"'\" || mode === 6 && nextChar === '\"') {\n      index++;\n      newChar = \"\\\\\" + nextChar;\n      actions[0]();\n      return true;\n    }\n  }\n  while (mode !== null) {\n    index++;\n    c = path[index];\n    if (c === \"\\\\\" && maybeUnescapeQuote()) {\n      continue;\n    }\n    type = getPathCharType(c);\n    typeMap = pathStateMachine[mode];\n    transition = typeMap[type] || typeMap[\"l\"] || 8;\n    if (transition === 8) {\n      return;\n    }\n    mode = transition[0];\n    if (transition[1] !== void 0) {\n      action = actions[transition[1]];\n      if (action) {\n        newChar = c;\n        if (action() === false) {\n          return;\n        }\n      }\n    }\n    if (mode === 7) {\n      return keys;\n    }\n  }\n}\nvar cache = /* @__PURE__ */ new Map();\nfunction resolveWithKeyValue(obj, path) {\n  return isObject(obj) ? obj[path] : null;\n}\nfunction resolveValue(obj, path) {\n  if (!isObject(obj)) {\n    return null;\n  }\n  let hit = cache.get(path);\n  if (!hit) {\n    hit = parse(path);\n    if (hit) {\n      cache.set(path, hit);\n    }\n  }\n  if (!hit) {\n    return null;\n  }\n  const len = hit.length;\n  let last = obj;\n  let i = 0;\n  while (i < len) {\n    const val = last[hit[i]];\n    if (val === void 0) {\n      return null;\n    }\n    last = val;\n    i++;\n  }\n  return last;\n}\nvar DEFAULT_MODIFIER = (str) => str;\nvar DEFAULT_MESSAGE = (ctx) => \"\";\nvar DEFAULT_MESSAGE_DATA_TYPE = \"text\";\nvar DEFAULT_NORMALIZE = (values) => values.length === 0 ? \"\" : values.join(\"\");\nvar DEFAULT_INTERPOLATE = toDisplayString;\nfunction pluralDefault(choice, choicesLength) {\n  choice = Math.abs(choice);\n  if (choicesLength === 2) {\n    return choice ? choice > 1 ? 1 : 0 : 1;\n  }\n  return choice ? Math.min(choice, 2) : 0;\n}\nfunction getPluralIndex(options) {\n  const index = isNumber(options.pluralIndex) ? options.pluralIndex : -1;\n  return options.named && (isNumber(options.named.count) || isNumber(options.named.n)) ? isNumber(options.named.count) ? options.named.count : isNumber(options.named.n) ? options.named.n : index : index;\n}\nfunction normalizeNamed(pluralIndex, props) {\n  if (!props.count) {\n    props.count = pluralIndex;\n  }\n  if (!props.n) {\n    props.n = pluralIndex;\n  }\n}\nfunction createMessageContext(options = {}) {\n  const locale = options.locale;\n  const pluralIndex = getPluralIndex(options);\n  const pluralRule = isObject(options.pluralRules) && isString(locale) && isFunction(options.pluralRules[locale]) ? options.pluralRules[locale] : pluralDefault;\n  const orgPluralRule = isObject(options.pluralRules) && isString(locale) && isFunction(options.pluralRules[locale]) ? pluralDefault : void 0;\n  const plural = (messages) => {\n    return messages[pluralRule(pluralIndex, messages.length, orgPluralRule)];\n  };\n  const _list = options.list || [];\n  const list = (index) => _list[index];\n  const _named = options.named || {};\n  isNumber(options.pluralIndex) && normalizeNamed(pluralIndex, _named);\n  const named = (key) => _named[key];\n  function message(key) {\n    const msg = isFunction(options.messages) ? options.messages(key) : isObject(options.messages) ? options.messages[key] : false;\n    return !msg ? options.parent ? options.parent.message(key) : DEFAULT_MESSAGE : msg;\n  }\n  const _modifier = (name) => options.modifiers ? options.modifiers[name] : DEFAULT_MODIFIER;\n  const normalize = isPlainObject(options.processor) && isFunction(options.processor.normalize) ? options.processor.normalize : DEFAULT_NORMALIZE;\n  const interpolate = isPlainObject(options.processor) && isFunction(options.processor.interpolate) ? options.processor.interpolate : DEFAULT_INTERPOLATE;\n  const type = isPlainObject(options.processor) && isString(options.processor.type) ? options.processor.type : DEFAULT_MESSAGE_DATA_TYPE;\n  const linked = (key, ...args) => {\n    const [arg1, arg2] = args;\n    let type2 = \"text\";\n    let modifier = \"\";\n    if (args.length === 1) {\n      if (isObject(arg1)) {\n        modifier = arg1.modifier || modifier;\n        type2 = arg1.type || type2;\n      } else if (isString(arg1)) {\n        modifier = arg1 || modifier;\n      }\n    } else if (args.length === 2) {\n      if (isString(arg1)) {\n        modifier = arg1 || modifier;\n      }\n      if (isString(arg2)) {\n        type2 = arg2 || type2;\n      }\n    }\n    let msg = message(key)(ctx);\n    if (type2 === \"vnode\" && isArray(msg) && modifier) {\n      msg = msg[0];\n    }\n    return modifier ? _modifier(modifier)(msg, type2) : msg;\n  };\n  const ctx = {\n    [\"list\"]: list,\n    [\"named\"]: named,\n    [\"plural\"]: plural,\n    [\"linked\"]: linked,\n    [\"message\"]: message,\n    [\"type\"]: type,\n    [\"interpolate\"]: interpolate,\n    [\"normalize\"]: normalize\n  };\n  return ctx;\n}\nvar devtools = null;\nfunction setDevToolsHook(hook) {\n  devtools = hook;\n}\nfunction initI18nDevTools(i18n, version, meta) {\n  devtools && devtools.emit(IntlifyDevToolsHooks.I18nInit, {\n    timestamp: Date.now(),\n    i18n,\n    version,\n    meta\n  });\n}\nvar translateDevTools = createDevToolsHook(IntlifyDevToolsHooks.FunctionTranslate);\nfunction createDevToolsHook(hook) {\n  return (payloads) => devtools && devtools.emit(hook, payloads);\n}\nvar CoreWarnCodes = {\n  NOT_FOUND_KEY: 1,\n  FALLBACK_TO_TRANSLATE: 2,\n  CANNOT_FORMAT_NUMBER: 3,\n  FALLBACK_TO_NUMBER_FORMAT: 4,\n  CANNOT_FORMAT_DATE: 5,\n  FALLBACK_TO_DATE_FORMAT: 6,\n  __EXTEND_POINT__: 7\n};\nvar warnMessages = {\n  [CoreWarnCodes.NOT_FOUND_KEY]: `Not found '{key}' key in '{locale}' locale messages.`,\n  [CoreWarnCodes.FALLBACK_TO_TRANSLATE]: `Fall back to translate '{key}' key with '{target}' locale.`,\n  [CoreWarnCodes.CANNOT_FORMAT_NUMBER]: `Cannot format a number value due to not supported Intl.NumberFormat.`,\n  [CoreWarnCodes.FALLBACK_TO_NUMBER_FORMAT]: `Fall back to number format '{key}' key with '{target}' locale.`,\n  [CoreWarnCodes.CANNOT_FORMAT_DATE]: `Cannot format a date value due to not supported Intl.DateTimeFormat.`,\n  [CoreWarnCodes.FALLBACK_TO_DATE_FORMAT]: `Fall back to datetime format '{key}' key with '{target}' locale.`\n};\nfunction getWarnMessage(code3, ...args) {\n  return format(warnMessages[code3], ...args);\n}\nfunction fallbackWithSimple(ctx, fallback, start) {\n  return [.../* @__PURE__ */ new Set([\n    start,\n    ...isArray(fallback) ? fallback : isObject(fallback) ? Object.keys(fallback) : isString(fallback) ? [fallback] : [start]\n  ])];\n}\nfunction fallbackWithLocaleChain(ctx, fallback, start) {\n  const startLocale = isString(start) ? start : DEFAULT_LOCALE;\n  const context = ctx;\n  if (!context.__localeChainCache) {\n    context.__localeChainCache = /* @__PURE__ */ new Map();\n  }\n  let chain = context.__localeChainCache.get(startLocale);\n  if (!chain) {\n    chain = [];\n    let block = [start];\n    while (isArray(block)) {\n      block = appendBlockToChain(chain, block, fallback);\n    }\n    const defaults = isArray(fallback) || !isPlainObject(fallback) ? fallback : fallback[\"default\"] ? fallback[\"default\"] : null;\n    block = isString(defaults) ? [defaults] : defaults;\n    if (isArray(block)) {\n      appendBlockToChain(chain, block, false);\n    }\n    context.__localeChainCache.set(startLocale, chain);\n  }\n  return chain;\n}\nfunction appendBlockToChain(chain, block, blocks) {\n  let follow = true;\n  for (let i = 0; i < block.length && isBoolean(follow); i++) {\n    const locale = block[i];\n    if (isString(locale)) {\n      follow = appendLocaleToChain(chain, block[i], blocks);\n    }\n  }\n  return follow;\n}\nfunction appendLocaleToChain(chain, locale, blocks) {\n  let follow;\n  const tokens = locale.split(\"-\");\n  do {\n    const target = tokens.join(\"-\");\n    follow = appendItemToChain(chain, target, blocks);\n    tokens.splice(-1, 1);\n  } while (tokens.length && follow === true);\n  return follow;\n}\nfunction appendItemToChain(chain, target, blocks) {\n  let follow = false;\n  if (!chain.includes(target)) {\n    follow = true;\n    if (target) {\n      follow = target[target.length - 1] !== \"!\";\n      const locale = target.replace(/!/g, \"\");\n      chain.push(locale);\n      if ((isArray(blocks) || isPlainObject(blocks)) && blocks[locale]) {\n        follow = blocks[locale];\n      }\n    }\n  }\n  return follow;\n}\nvar VERSION = \"9.2.2\";\nvar NOT_REOSLVED = -1;\nvar DEFAULT_LOCALE = \"en-US\";\nvar MISSING_RESOLVE_VALUE = \"\";\nvar capitalize = (str) => `${str.charAt(0).toLocaleUpperCase()}${str.substr(1)}`;\nfunction getDefaultLinkedModifiers() {\n  return {\n    upper: (val, type) => {\n      return type === \"text\" && isString(val) ? val.toUpperCase() : type === \"vnode\" && isObject(val) && \"__v_isVNode\" in val ? val.children.toUpperCase() : val;\n    },\n    lower: (val, type) => {\n      return type === \"text\" && isString(val) ? val.toLowerCase() : type === \"vnode\" && isObject(val) && \"__v_isVNode\" in val ? val.children.toLowerCase() : val;\n    },\n    capitalize: (val, type) => {\n      return type === \"text\" && isString(val) ? capitalize(val) : type === \"vnode\" && isObject(val) && \"__v_isVNode\" in val ? capitalize(val.children) : val;\n    }\n  };\n}\nvar _compiler;\nfunction registerMessageCompiler(compiler) {\n  _compiler = compiler;\n}\nvar _resolver;\nfunction registerMessageResolver(resolver) {\n  _resolver = resolver;\n}\nvar _fallbacker;\nfunction registerLocaleFallbacker(fallbacker) {\n  _fallbacker = fallbacker;\n}\nvar _additionalMeta = null;\nvar setAdditionalMeta = (meta) => {\n  _additionalMeta = meta;\n};\nvar getAdditionalMeta = () => _additionalMeta;\nvar _fallbackContext = null;\nvar setFallbackContext = (context) => {\n  _fallbackContext = context;\n};\nvar getFallbackContext = () => _fallbackContext;\nvar _cid = 0;\nfunction createCoreContext(options = {}) {\n  const version = isString(options.version) ? options.version : VERSION;\n  const locale = isString(options.locale) ? options.locale : DEFAULT_LOCALE;\n  const fallbackLocale = isArray(options.fallbackLocale) || isPlainObject(options.fallbackLocale) || isString(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : locale;\n  const messages = isPlainObject(options.messages) ? options.messages : { [locale]: {} };\n  const datetimeFormats = isPlainObject(options.datetimeFormats) ? options.datetimeFormats : { [locale]: {} };\n  const numberFormats = isPlainObject(options.numberFormats) ? options.numberFormats : { [locale]: {} };\n  const modifiers = assign({}, options.modifiers || {}, getDefaultLinkedModifiers());\n  const pluralRules = options.pluralRules || {};\n  const missing = isFunction(options.missing) ? options.missing : null;\n  const missingWarn = isBoolean(options.missingWarn) || isRegExp(options.missingWarn) ? options.missingWarn : true;\n  const fallbackWarn = isBoolean(options.fallbackWarn) || isRegExp(options.fallbackWarn) ? options.fallbackWarn : true;\n  const fallbackFormat = !!options.fallbackFormat;\n  const unresolving = !!options.unresolving;\n  const postTranslation = isFunction(options.postTranslation) ? options.postTranslation : null;\n  const processor = isPlainObject(options.processor) ? options.processor : null;\n  const warnHtmlMessage = isBoolean(options.warnHtmlMessage) ? options.warnHtmlMessage : true;\n  const escapeParameter = !!options.escapeParameter;\n  const messageCompiler = isFunction(options.messageCompiler) ? options.messageCompiler : _compiler;\n  const messageResolver = isFunction(options.messageResolver) ? options.messageResolver : _resolver || resolveWithKeyValue;\n  const localeFallbacker = isFunction(options.localeFallbacker) ? options.localeFallbacker : _fallbacker || fallbackWithSimple;\n  const fallbackContext = isObject(options.fallbackContext) ? options.fallbackContext : void 0;\n  const onWarn = isFunction(options.onWarn) ? options.onWarn : warn;\n  const internalOptions = options;\n  const __datetimeFormatters = isObject(internalOptions.__datetimeFormatters) ? internalOptions.__datetimeFormatters : /* @__PURE__ */ new Map();\n  const __numberFormatters = isObject(internalOptions.__numberFormatters) ? internalOptions.__numberFormatters : /* @__PURE__ */ new Map();\n  const __meta = isObject(internalOptions.__meta) ? internalOptions.__meta : {};\n  _cid++;\n  const context = {\n    version,\n    cid: _cid,\n    locale,\n    fallbackLocale,\n    messages,\n    modifiers,\n    pluralRules,\n    missing,\n    missingWarn,\n    fallbackWarn,\n    fallbackFormat,\n    unresolving,\n    postTranslation,\n    processor,\n    warnHtmlMessage,\n    escapeParameter,\n    messageCompiler,\n    messageResolver,\n    localeFallbacker,\n    fallbackContext,\n    onWarn,\n    __meta\n  };\n  {\n    context.datetimeFormats = datetimeFormats;\n    context.numberFormats = numberFormats;\n    context.__datetimeFormatters = __datetimeFormatters;\n    context.__numberFormatters = __numberFormatters;\n  }\n  if (true) {\n    context.__v_emitter = internalOptions.__v_emitter != null ? internalOptions.__v_emitter : void 0;\n  }\n  if (true) {\n    initI18nDevTools(context, version, __meta);\n  }\n  return context;\n}\nfunction isTranslateFallbackWarn(fallback, key) {\n  return fallback instanceof RegExp ? fallback.test(key) : fallback;\n}\nfunction isTranslateMissingWarn(missing, key) {\n  return missing instanceof RegExp ? missing.test(key) : missing;\n}\nfunction handleMissing(context, key, locale, missingWarn, type) {\n  const { missing, onWarn } = context;\n  if (true) {\n    const emitter = context.__v_emitter;\n    if (emitter) {\n      emitter.emit(\"missing\", {\n        locale,\n        key,\n        type,\n        groupId: `${type}:${key}`\n      });\n    }\n  }\n  if (missing !== null) {\n    const ret = missing(context, locale, key, type);\n    return isString(ret) ? ret : key;\n  } else {\n    if (isTranslateMissingWarn(missingWarn, key)) {\n      onWarn(getWarnMessage(CoreWarnCodes.NOT_FOUND_KEY, { key, locale }));\n    }\n    return key;\n  }\n}\nfunction updateFallbackLocale(ctx, locale, fallback) {\n  const context = ctx;\n  context.__localeChainCache = /* @__PURE__ */ new Map();\n  ctx.localeFallbacker(ctx, fallback, locale);\n}\nvar RE_HTML_TAG = /<\\/?[\\w\\s=\"/.':;#-\\/]+>/;\nvar WARN_MESSAGE = `Detected HTML in '{source}' message. Recommend not using HTML messages to avoid XSS.`;\nfunction checkHtmlMessage(source, options) {\n  const warnHtmlMessage = isBoolean(options.warnHtmlMessage) ? options.warnHtmlMessage : true;\n  if (warnHtmlMessage && RE_HTML_TAG.test(source)) {\n    warn(format(WARN_MESSAGE, { source }));\n  }\n}\nvar defaultOnCacheKey = (source) => source;\nvar compileCache = /* @__PURE__ */ Object.create(null);\nfunction compileToFunction(source, options = {}) {\n  {\n    checkHtmlMessage(source, options);\n    const onCacheKey = options.onCacheKey || defaultOnCacheKey;\n    const key = onCacheKey(source);\n    const cached = compileCache[key];\n    if (cached) {\n      return cached;\n    }\n    let occurred = false;\n    const onError = options.onError || defaultOnError;\n    options.onError = (err) => {\n      occurred = true;\n      onError(err);\n    };\n    const { code: code3 } = baseCompile(source, options);\n    const msg = new Function(`return ${code3}`)();\n    return !occurred ? compileCache[key] = msg : msg;\n  }\n}\nvar code = CompileErrorCodes.__EXTEND_POINT__;\nvar inc = () => ++code;\nvar CoreErrorCodes = {\n  INVALID_ARGUMENT: code,\n  INVALID_DATE_ARGUMENT: inc(),\n  INVALID_ISO_DATE_ARGUMENT: inc(),\n  __EXTEND_POINT__: inc()\n};\nfunction createCoreError(code3) {\n  return createCompileError(code3, null, true ? { messages: errorMessages2 } : void 0);\n}\nvar errorMessages2 = {\n  [CoreErrorCodes.INVALID_ARGUMENT]: \"Invalid arguments\",\n  [CoreErrorCodes.INVALID_DATE_ARGUMENT]: \"The date provided is an invalid Date object.Make sure your Date represents a valid date.\",\n  [CoreErrorCodes.INVALID_ISO_DATE_ARGUMENT]: \"The argument provided is not a valid ISO date string\"\n};\nvar NOOP_MESSAGE_FUNCTION = () => \"\";\nvar isMessageFunction = (val) => isFunction(val);\nfunction translate(context, ...args) {\n  const { fallbackFormat, postTranslation, unresolving, messageCompiler, fallbackLocale, messages } = context;\n  const [key, options] = parseTranslateArgs(...args);\n  const missingWarn = isBoolean(options.missingWarn) ? options.missingWarn : context.missingWarn;\n  const fallbackWarn = isBoolean(options.fallbackWarn) ? options.fallbackWarn : context.fallbackWarn;\n  const escapeParameter = isBoolean(options.escapeParameter) ? options.escapeParameter : context.escapeParameter;\n  const resolvedMessage = !!options.resolvedMessage;\n  const defaultMsgOrKey = isString(options.default) || isBoolean(options.default) ? !isBoolean(options.default) ? options.default : !messageCompiler ? () => key : key : fallbackFormat ? !messageCompiler ? () => key : key : \"\";\n  const enableDefaultMsg = fallbackFormat || defaultMsgOrKey !== \"\";\n  const locale = isString(options.locale) ? options.locale : context.locale;\n  escapeParameter && escapeParams(options);\n  let [formatScope, targetLocale, message] = !resolvedMessage ? resolveMessageFormat(context, key, locale, fallbackLocale, fallbackWarn, missingWarn) : [\n    key,\n    locale,\n    messages[locale] || {}\n  ];\n  let format2 = formatScope;\n  let cacheBaseKey = key;\n  if (!resolvedMessage && !(isString(format2) || isMessageFunction(format2))) {\n    if (enableDefaultMsg) {\n      format2 = defaultMsgOrKey;\n      cacheBaseKey = format2;\n    }\n  }\n  if (!resolvedMessage && (!(isString(format2) || isMessageFunction(format2)) || !isString(targetLocale))) {\n    return unresolving ? NOT_REOSLVED : key;\n  }\n  if (isString(format2) && context.messageCompiler == null) {\n    warn(`The message format compilation is not supported in this build. Because message compiler isn't included. You need to pre-compilation all message format. So translate function return '${key}'.`);\n    return key;\n  }\n  let occurred = false;\n  const errorDetector = () => {\n    occurred = true;\n  };\n  const msg = !isMessageFunction(format2) ? compileMessageFormat(context, key, targetLocale, format2, cacheBaseKey, errorDetector) : format2;\n  if (occurred) {\n    return format2;\n  }\n  const ctxOptions = getMessageContextOptions(context, targetLocale, message, options);\n  const msgContext = createMessageContext(ctxOptions);\n  const messaged = evaluateMessage(context, msg, msgContext);\n  const ret = postTranslation ? postTranslation(messaged, key) : messaged;\n  if (true) {\n    const payloads = {\n      timestamp: Date.now(),\n      key: isString(key) ? key : isMessageFunction(format2) ? format2.key : \"\",\n      locale: targetLocale || (isMessageFunction(format2) ? format2.locale : \"\"),\n      format: isString(format2) ? format2 : isMessageFunction(format2) ? format2.source : \"\",\n      message: ret\n    };\n    payloads.meta = assign({}, context.__meta, getAdditionalMeta() || {});\n    translateDevTools(payloads);\n  }\n  return ret;\n}\nfunction escapeParams(options) {\n  if (isArray(options.list)) {\n    options.list = options.list.map((item) => isString(item) ? escapeHtml(item) : item);\n  } else if (isObject(options.named)) {\n    Object.keys(options.named).forEach((key) => {\n      if (isString(options.named[key])) {\n        options.named[key] = escapeHtml(options.named[key]);\n      }\n    });\n  }\n}\nfunction resolveMessageFormat(context, key, locale, fallbackLocale, fallbackWarn, missingWarn) {\n  const { messages, onWarn, messageResolver: resolveValue2, localeFallbacker } = context;\n  const locales = localeFallbacker(context, fallbackLocale, locale);\n  let message = {};\n  let targetLocale;\n  let format2 = null;\n  let from = locale;\n  let to = null;\n  const type = \"translate\";\n  for (let i = 0; i < locales.length; i++) {\n    targetLocale = to = locales[i];\n    if (locale !== targetLocale && isTranslateFallbackWarn(fallbackWarn, key)) {\n      onWarn(getWarnMessage(CoreWarnCodes.FALLBACK_TO_TRANSLATE, {\n        key,\n        target: targetLocale\n      }));\n    }\n    if (locale !== targetLocale) {\n      const emitter = context.__v_emitter;\n      if (emitter) {\n        emitter.emit(\"fallback\", {\n          type,\n          key,\n          from,\n          to,\n          groupId: `${type}:${key}`\n        });\n      }\n    }\n    message = messages[targetLocale] || {};\n    let start = null;\n    let startTag;\n    let endTag;\n    if (inBrowser) {\n      start = window.performance.now();\n      startTag = \"intlify-message-resolve-start\";\n      endTag = \"intlify-message-resolve-end\";\n      mark && mark(startTag);\n    }\n    if ((format2 = resolveValue2(message, key)) === null) {\n      format2 = message[key];\n    }\n    if (inBrowser) {\n      const end = window.performance.now();\n      const emitter = context.__v_emitter;\n      if (emitter && start && format2) {\n        emitter.emit(\"message-resolve\", {\n          type: \"message-resolve\",\n          key,\n          message: format2,\n          time: end - start,\n          groupId: `${type}:${key}`\n        });\n      }\n      if (startTag && endTag && mark && measure) {\n        mark(endTag);\n        measure(\"intlify message resolve\", startTag, endTag);\n      }\n    }\n    if (isString(format2) || isFunction(format2))\n      break;\n    const missingRet = handleMissing(\n      context,\n      key,\n      targetLocale,\n      missingWarn,\n      type\n    );\n    if (missingRet !== key) {\n      format2 = missingRet;\n    }\n    from = to;\n  }\n  return [format2, targetLocale, message];\n}\nfunction compileMessageFormat(context, key, targetLocale, format2, cacheBaseKey, errorDetector) {\n  const { messageCompiler, warnHtmlMessage } = context;\n  if (isMessageFunction(format2)) {\n    const msg2 = format2;\n    msg2.locale = msg2.locale || targetLocale;\n    msg2.key = msg2.key || key;\n    return msg2;\n  }\n  if (messageCompiler == null) {\n    const msg2 = () => format2;\n    msg2.locale = targetLocale;\n    msg2.key = key;\n    return msg2;\n  }\n  let start = null;\n  let startTag;\n  let endTag;\n  if (inBrowser) {\n    start = window.performance.now();\n    startTag = \"intlify-message-compilation-start\";\n    endTag = \"intlify-message-compilation-end\";\n    mark && mark(startTag);\n  }\n  const msg = messageCompiler(format2, getCompileOptions(context, targetLocale, cacheBaseKey, format2, warnHtmlMessage, errorDetector));\n  if (inBrowser) {\n    const end = window.performance.now();\n    const emitter = context.__v_emitter;\n    if (emitter && start) {\n      emitter.emit(\"message-compilation\", {\n        type: \"message-compilation\",\n        message: format2,\n        time: end - start,\n        groupId: `${\"translate\"}:${key}`\n      });\n    }\n    if (startTag && endTag && mark && measure) {\n      mark(endTag);\n      measure(\"intlify message compilation\", startTag, endTag);\n    }\n  }\n  msg.locale = targetLocale;\n  msg.key = key;\n  msg.source = format2;\n  return msg;\n}\nfunction evaluateMessage(context, msg, msgCtx) {\n  let start = null;\n  let startTag;\n  let endTag;\n  if (inBrowser) {\n    start = window.performance.now();\n    startTag = \"intlify-message-evaluation-start\";\n    endTag = \"intlify-message-evaluation-end\";\n    mark && mark(startTag);\n  }\n  const messaged = msg(msgCtx);\n  if (inBrowser) {\n    const end = window.performance.now();\n    const emitter = context.__v_emitter;\n    if (emitter && start) {\n      emitter.emit(\"message-evaluation\", {\n        type: \"message-evaluation\",\n        value: messaged,\n        time: end - start,\n        groupId: `${\"translate\"}:${msg.key}`\n      });\n    }\n    if (startTag && endTag && mark && measure) {\n      mark(endTag);\n      measure(\"intlify message evaluation\", startTag, endTag);\n    }\n  }\n  return messaged;\n}\nfunction parseTranslateArgs(...args) {\n  const [arg1, arg2, arg3] = args;\n  const options = {};\n  if (!isString(arg1) && !isNumber(arg1) && !isMessageFunction(arg1)) {\n    throw createCoreError(CoreErrorCodes.INVALID_ARGUMENT);\n  }\n  const key = isNumber(arg1) ? String(arg1) : isMessageFunction(arg1) ? arg1 : arg1;\n  if (isNumber(arg2)) {\n    options.plural = arg2;\n  } else if (isString(arg2)) {\n    options.default = arg2;\n  } else if (isPlainObject(arg2) && !isEmptyObject(arg2)) {\n    options.named = arg2;\n  } else if (isArray(arg2)) {\n    options.list = arg2;\n  }\n  if (isNumber(arg3)) {\n    options.plural = arg3;\n  } else if (isString(arg3)) {\n    options.default = arg3;\n  } else if (isPlainObject(arg3)) {\n    assign(options, arg3);\n  }\n  return [key, options];\n}\nfunction getCompileOptions(context, locale, key, source, warnHtmlMessage, errorDetector) {\n  return {\n    warnHtmlMessage,\n    onError: (err) => {\n      errorDetector && errorDetector(err);\n      if (true) {\n        const message = `Message compilation error: ${err.message}`;\n        const codeFrame = err.location && generateCodeFrame(source, err.location.start.offset, err.location.end.offset);\n        const emitter = context.__v_emitter;\n        if (emitter) {\n          emitter.emit(\"compile-error\", {\n            message: source,\n            error: err.message,\n            start: err.location && err.location.start.offset,\n            end: err.location && err.location.end.offset,\n            groupId: `${\"translate\"}:${key}`\n          });\n        }\n        console.error(codeFrame ? `${message}\n${codeFrame}` : message);\n      } else {\n        throw err;\n      }\n    },\n    onCacheKey: (source2) => generateFormatCacheKey(locale, key, source2)\n  };\n}\nfunction getMessageContextOptions(context, locale, message, options) {\n  const { modifiers, pluralRules, messageResolver: resolveValue2, fallbackLocale, fallbackWarn, missingWarn, fallbackContext } = context;\n  const resolveMessage = (key) => {\n    let val = resolveValue2(message, key);\n    if (val == null && fallbackContext) {\n      const [, , message2] = resolveMessageFormat(fallbackContext, key, locale, fallbackLocale, fallbackWarn, missingWarn);\n      val = resolveValue2(message2, key);\n    }\n    if (isString(val)) {\n      let occurred = false;\n      const errorDetector = () => {\n        occurred = true;\n      };\n      const msg = compileMessageFormat(context, key, locale, val, key, errorDetector);\n      return !occurred ? msg : NOOP_MESSAGE_FUNCTION;\n    } else if (isMessageFunction(val)) {\n      return val;\n    } else {\n      return NOOP_MESSAGE_FUNCTION;\n    }\n  };\n  const ctxOptions = {\n    locale,\n    modifiers,\n    pluralRules,\n    messages: resolveMessage\n  };\n  if (context.processor) {\n    ctxOptions.processor = context.processor;\n  }\n  if (options.list) {\n    ctxOptions.list = options.list;\n  }\n  if (options.named) {\n    ctxOptions.named = options.named;\n  }\n  if (isNumber(options.plural)) {\n    ctxOptions.pluralIndex = options.plural;\n  }\n  return ctxOptions;\n}\nvar intlDefined = typeof Intl !== \"undefined\";\nvar Availabilities = {\n  dateTimeFormat: intlDefined && typeof Intl.DateTimeFormat !== \"undefined\",\n  numberFormat: intlDefined && typeof Intl.NumberFormat !== \"undefined\"\n};\nfunction datetime(context, ...args) {\n  const { datetimeFormats, unresolving, fallbackLocale, onWarn, localeFallbacker } = context;\n  const { __datetimeFormatters } = context;\n  if (!Availabilities.dateTimeFormat) {\n    onWarn(getWarnMessage(CoreWarnCodes.CANNOT_FORMAT_DATE));\n    return MISSING_RESOLVE_VALUE;\n  }\n  const [key, value, options, overrides] = parseDateTimeArgs(...args);\n  const missingWarn = isBoolean(options.missingWarn) ? options.missingWarn : context.missingWarn;\n  const fallbackWarn = isBoolean(options.fallbackWarn) ? options.fallbackWarn : context.fallbackWarn;\n  const part = !!options.part;\n  const locale = isString(options.locale) ? options.locale : context.locale;\n  const locales = localeFallbacker(\n    context,\n    fallbackLocale,\n    locale\n  );\n  if (!isString(key) || key === \"\") {\n    return new Intl.DateTimeFormat(locale, overrides).format(value);\n  }\n  let datetimeFormat = {};\n  let targetLocale;\n  let format2 = null;\n  let from = locale;\n  let to = null;\n  const type = \"datetime format\";\n  for (let i = 0; i < locales.length; i++) {\n    targetLocale = to = locales[i];\n    if (locale !== targetLocale && isTranslateFallbackWarn(fallbackWarn, key)) {\n      onWarn(getWarnMessage(CoreWarnCodes.FALLBACK_TO_DATE_FORMAT, {\n        key,\n        target: targetLocale\n      }));\n    }\n    if (locale !== targetLocale) {\n      const emitter = context.__v_emitter;\n      if (emitter) {\n        emitter.emit(\"fallback\", {\n          type,\n          key,\n          from,\n          to,\n          groupId: `${type}:${key}`\n        });\n      }\n    }\n    datetimeFormat = datetimeFormats[targetLocale] || {};\n    format2 = datetimeFormat[key];\n    if (isPlainObject(format2))\n      break;\n    handleMissing(context, key, targetLocale, missingWarn, type);\n    from = to;\n  }\n  if (!isPlainObject(format2) || !isString(targetLocale)) {\n    return unresolving ? NOT_REOSLVED : key;\n  }\n  let id = `${targetLocale}__${key}`;\n  if (!isEmptyObject(overrides)) {\n    id = `${id}__${JSON.stringify(overrides)}`;\n  }\n  let formatter = __datetimeFormatters.get(id);\n  if (!formatter) {\n    formatter = new Intl.DateTimeFormat(targetLocale, assign({}, format2, overrides));\n    __datetimeFormatters.set(id, formatter);\n  }\n  return !part ? formatter.format(value) : formatter.formatToParts(value);\n}\nvar DATETIME_FORMAT_OPTIONS_KEYS = [\n  \"localeMatcher\",\n  \"weekday\",\n  \"era\",\n  \"year\",\n  \"month\",\n  \"day\",\n  \"hour\",\n  \"minute\",\n  \"second\",\n  \"timeZoneName\",\n  \"formatMatcher\",\n  \"hour12\",\n  \"timeZone\",\n  \"dateStyle\",\n  \"timeStyle\",\n  \"calendar\",\n  \"dayPeriod\",\n  \"numberingSystem\",\n  \"hourCycle\",\n  \"fractionalSecondDigits\"\n];\nfunction parseDateTimeArgs(...args) {\n  const [arg1, arg2, arg3, arg4] = args;\n  const options = {};\n  let overrides = {};\n  let value;\n  if (isString(arg1)) {\n    const matches = arg1.match(/(\\d{4}-\\d{2}-\\d{2})(T|\\s)?(.*)/);\n    if (!matches) {\n      throw createCoreError(CoreErrorCodes.INVALID_ISO_DATE_ARGUMENT);\n    }\n    const dateTime = matches[3] ? matches[3].trim().startsWith(\"T\") ? `${matches[1].trim()}${matches[3].trim()}` : `${matches[1].trim()}T${matches[3].trim()}` : matches[1].trim();\n    value = new Date(dateTime);\n    try {\n      value.toISOString();\n    } catch (e) {\n      throw createCoreError(CoreErrorCodes.INVALID_ISO_DATE_ARGUMENT);\n    }\n  } else if (isDate(arg1)) {\n    if (isNaN(arg1.getTime())) {\n      throw createCoreError(CoreErrorCodes.INVALID_DATE_ARGUMENT);\n    }\n    value = arg1;\n  } else if (isNumber(arg1)) {\n    value = arg1;\n  } else {\n    throw createCoreError(CoreErrorCodes.INVALID_ARGUMENT);\n  }\n  if (isString(arg2)) {\n    options.key = arg2;\n  } else if (isPlainObject(arg2)) {\n    Object.keys(arg2).forEach((key) => {\n      if (DATETIME_FORMAT_OPTIONS_KEYS.includes(key)) {\n        overrides[key] = arg2[key];\n      } else {\n        options[key] = arg2[key];\n      }\n    });\n  }\n  if (isString(arg3)) {\n    options.locale = arg3;\n  } else if (isPlainObject(arg3)) {\n    overrides = arg3;\n  }\n  if (isPlainObject(arg4)) {\n    overrides = arg4;\n  }\n  return [options.key || \"\", value, options, overrides];\n}\nfunction clearDateTimeFormat(ctx, locale, format2) {\n  const context = ctx;\n  for (const key in format2) {\n    const id = `${locale}__${key}`;\n    if (!context.__datetimeFormatters.has(id)) {\n      continue;\n    }\n    context.__datetimeFormatters.delete(id);\n  }\n}\nfunction number(context, ...args) {\n  const { numberFormats, unresolving, fallbackLocale, onWarn, localeFallbacker } = context;\n  const { __numberFormatters } = context;\n  if (!Availabilities.numberFormat) {\n    onWarn(getWarnMessage(CoreWarnCodes.CANNOT_FORMAT_NUMBER));\n    return MISSING_RESOLVE_VALUE;\n  }\n  const [key, value, options, overrides] = parseNumberArgs(...args);\n  const missingWarn = isBoolean(options.missingWarn) ? options.missingWarn : context.missingWarn;\n  const fallbackWarn = isBoolean(options.fallbackWarn) ? options.fallbackWarn : context.fallbackWarn;\n  const part = !!options.part;\n  const locale = isString(options.locale) ? options.locale : context.locale;\n  const locales = localeFallbacker(\n    context,\n    fallbackLocale,\n    locale\n  );\n  if (!isString(key) || key === \"\") {\n    return new Intl.NumberFormat(locale, overrides).format(value);\n  }\n  let numberFormat = {};\n  let targetLocale;\n  let format2 = null;\n  let from = locale;\n  let to = null;\n  const type = \"number format\";\n  for (let i = 0; i < locales.length; i++) {\n    targetLocale = to = locales[i];\n    if (locale !== targetLocale && isTranslateFallbackWarn(fallbackWarn, key)) {\n      onWarn(getWarnMessage(CoreWarnCodes.FALLBACK_TO_NUMBER_FORMAT, {\n        key,\n        target: targetLocale\n      }));\n    }\n    if (locale !== targetLocale) {\n      const emitter = context.__v_emitter;\n      if (emitter) {\n        emitter.emit(\"fallback\", {\n          type,\n          key,\n          from,\n          to,\n          groupId: `${type}:${key}`\n        });\n      }\n    }\n    numberFormat = numberFormats[targetLocale] || {};\n    format2 = numberFormat[key];\n    if (isPlainObject(format2))\n      break;\n    handleMissing(context, key, targetLocale, missingWarn, type);\n    from = to;\n  }\n  if (!isPlainObject(format2) || !isString(targetLocale)) {\n    return unresolving ? NOT_REOSLVED : key;\n  }\n  let id = `${targetLocale}__${key}`;\n  if (!isEmptyObject(overrides)) {\n    id = `${id}__${JSON.stringify(overrides)}`;\n  }\n  let formatter = __numberFormatters.get(id);\n  if (!formatter) {\n    formatter = new Intl.NumberFormat(targetLocale, assign({}, format2, overrides));\n    __numberFormatters.set(id, formatter);\n  }\n  return !part ? formatter.format(value) : formatter.formatToParts(value);\n}\nvar NUMBER_FORMAT_OPTIONS_KEYS = [\n  \"localeMatcher\",\n  \"style\",\n  \"currency\",\n  \"currencyDisplay\",\n  \"currencySign\",\n  \"useGrouping\",\n  \"minimumIntegerDigits\",\n  \"minimumFractionDigits\",\n  \"maximumFractionDigits\",\n  \"minimumSignificantDigits\",\n  \"maximumSignificantDigits\",\n  \"compactDisplay\",\n  \"notation\",\n  \"signDisplay\",\n  \"unit\",\n  \"unitDisplay\",\n  \"roundingMode\",\n  \"roundingPriority\",\n  \"roundingIncrement\",\n  \"trailingZeroDisplay\"\n];\nfunction parseNumberArgs(...args) {\n  const [arg1, arg2, arg3, arg4] = args;\n  const options = {};\n  let overrides = {};\n  if (!isNumber(arg1)) {\n    throw createCoreError(CoreErrorCodes.INVALID_ARGUMENT);\n  }\n  const value = arg1;\n  if (isString(arg2)) {\n    options.key = arg2;\n  } else if (isPlainObject(arg2)) {\n    Object.keys(arg2).forEach((key) => {\n      if (NUMBER_FORMAT_OPTIONS_KEYS.includes(key)) {\n        overrides[key] = arg2[key];\n      } else {\n        options[key] = arg2[key];\n      }\n    });\n  }\n  if (isString(arg3)) {\n    options.locale = arg3;\n  } else if (isPlainObject(arg3)) {\n    overrides = arg3;\n  }\n  if (isPlainObject(arg4)) {\n    overrides = arg4;\n  }\n  return [options.key || \"\", value, options, overrides];\n}\nfunction clearNumberFormat(ctx, locale, format2) {\n  const context = ctx;\n  for (const key in format2) {\n    const id = `${locale}__${key}`;\n    if (!context.__numberFormatters.has(id)) {\n      continue;\n    }\n    context.__numberFormatters.delete(id);\n  }\n}\n{\n  if (typeof __INTLIFY_PROD_DEVTOOLS__ !== \"boolean\") {\n    getGlobalThis().__INTLIFY_PROD_DEVTOOLS__ = false;\n  }\n}\n\n// node_modules/.pnpm/@intlify+vue-devtools@9.2.2/node_modules/@intlify/vue-devtools/dist/vue-devtools.esm-bundler.js\nvar VueDevToolsLabels = {\n  [\"vue-devtools-plugin-vue-i18n\"]: \"Vue I18n devtools\",\n  [\"vue-i18n-resource-inspector\"]: \"I18n Resources\",\n  [\"vue-i18n-timeline\"]: \"Vue I18n\"\n};\nvar VueDevToolsPlaceholders = {\n  [\"vue-i18n-resource-inspector\"]: \"Search for scopes ...\"\n};\nvar VueDevToolsTimelineColors = {\n  [\"vue-i18n-timeline\"]: 16764185\n};\n\n// node_modules/.pnpm/vue-i18n@9.2.2_vue@3.2.39/node_modules/vue-i18n/dist/vue-i18n.esm-bundler.js\nvar VERSION2 = \"9.2.2\";\nfunction initFeatureFlags() {\n  let needWarn = false;\n  if (typeof __VUE_I18N_FULL_INSTALL__ !== \"boolean\") {\n    needWarn = true;\n    getGlobalThis().__VUE_I18N_FULL_INSTALL__ = true;\n  }\n  if (typeof __VUE_I18N_LEGACY_API__ !== \"boolean\") {\n    needWarn = true;\n    getGlobalThis().__VUE_I18N_LEGACY_API__ = true;\n  }\n  if (typeof __INTLIFY_PROD_DEVTOOLS__ !== \"boolean\") {\n    getGlobalThis().__INTLIFY_PROD_DEVTOOLS__ = false;\n  }\n  if (needWarn) {\n    console.warn(`You are running the esm-bundler build of vue-i18n. It is recommended to configure your bundler to explicitly replace feature flag globals with boolean literals to get proper tree-shaking in the final bundle.`);\n  }\n}\nvar code$1 = CoreWarnCodes.__EXTEND_POINT__;\nvar inc$1 = () => ++code$1;\nvar I18nWarnCodes = {\n  FALLBACK_TO_ROOT: code$1,\n  NOT_SUPPORTED_PRESERVE: inc$1(),\n  NOT_SUPPORTED_FORMATTER: inc$1(),\n  NOT_SUPPORTED_PRESERVE_DIRECTIVE: inc$1(),\n  NOT_SUPPORTED_GET_CHOICE_INDEX: inc$1(),\n  COMPONENT_NAME_LEGACY_COMPATIBLE: inc$1(),\n  NOT_FOUND_PARENT_SCOPE: inc$1()\n};\nvar warnMessages2 = {\n  [I18nWarnCodes.FALLBACK_TO_ROOT]: `Fall back to {type} '{key}' with root locale.`,\n  [I18nWarnCodes.NOT_SUPPORTED_PRESERVE]: `Not supported 'preserve'.`,\n  [I18nWarnCodes.NOT_SUPPORTED_FORMATTER]: `Not supported 'formatter'.`,\n  [I18nWarnCodes.NOT_SUPPORTED_PRESERVE_DIRECTIVE]: `Not supported 'preserveDirectiveContent'.`,\n  [I18nWarnCodes.NOT_SUPPORTED_GET_CHOICE_INDEX]: `Not supported 'getChoiceIndex'.`,\n  [I18nWarnCodes.COMPONENT_NAME_LEGACY_COMPATIBLE]: `Component name legacy compatible: '{name}' -> 'i18n'`,\n  [I18nWarnCodes.NOT_FOUND_PARENT_SCOPE]: `Not found parent scope. use the global scope.`\n};\nfunction getWarnMessage2(code3, ...args) {\n  return format(warnMessages2[code3], ...args);\n}\nvar code2 = CompileErrorCodes.__EXTEND_POINT__;\nvar inc2 = () => ++code2;\nvar I18nErrorCodes = {\n  UNEXPECTED_RETURN_TYPE: code2,\n  INVALID_ARGUMENT: inc2(),\n  MUST_BE_CALL_SETUP_TOP: inc2(),\n  NOT_INSLALLED: inc2(),\n  NOT_AVAILABLE_IN_LEGACY_MODE: inc2(),\n  REQUIRED_VALUE: inc2(),\n  INVALID_VALUE: inc2(),\n  CANNOT_SETUP_VUE_DEVTOOLS_PLUGIN: inc2(),\n  NOT_INSLALLED_WITH_PROVIDE: inc2(),\n  UNEXPECTED_ERROR: inc2(),\n  NOT_COMPATIBLE_LEGACY_VUE_I18N: inc2(),\n  BRIDGE_SUPPORT_VUE_2_ONLY: inc2(),\n  MUST_DEFINE_I18N_OPTION_IN_ALLOW_COMPOSITION: inc2(),\n  NOT_AVAILABLE_COMPOSITION_IN_LEGACY: inc2(),\n  __EXTEND_POINT__: inc2()\n};\nfunction createI18nError(code3, ...args) {\n  return createCompileError(code3, null, true ? { messages: errorMessages3, args } : void 0);\n}\nvar errorMessages3 = {\n  [I18nErrorCodes.UNEXPECTED_RETURN_TYPE]: \"Unexpected return type in composer\",\n  [I18nErrorCodes.INVALID_ARGUMENT]: \"Invalid argument\",\n  [I18nErrorCodes.MUST_BE_CALL_SETUP_TOP]: \"Must be called at the top of a `setup` function\",\n  [I18nErrorCodes.NOT_INSLALLED]: \"Need to install with `app.use` function\",\n  [I18nErrorCodes.UNEXPECTED_ERROR]: \"Unexpected error\",\n  [I18nErrorCodes.NOT_AVAILABLE_IN_LEGACY_MODE]: \"Not available in legacy mode\",\n  [I18nErrorCodes.REQUIRED_VALUE]: `Required in value: {0}`,\n  [I18nErrorCodes.INVALID_VALUE]: `Invalid value`,\n  [I18nErrorCodes.CANNOT_SETUP_VUE_DEVTOOLS_PLUGIN]: `Cannot setup vue-devtools plugin`,\n  [I18nErrorCodes.NOT_INSLALLED_WITH_PROVIDE]: \"Need to install with `provide` function\",\n  [I18nErrorCodes.NOT_COMPATIBLE_LEGACY_VUE_I18N]: \"Not compatible legacy VueI18n.\",\n  [I18nErrorCodes.BRIDGE_SUPPORT_VUE_2_ONLY]: \"vue-i18n-bridge support Vue 2.x only\",\n  [I18nErrorCodes.MUST_DEFINE_I18N_OPTION_IN_ALLOW_COMPOSITION]: \"Must define \\u2018i18n\\u2019 option or custom block in Composition API with using local scope in Legacy API mode\",\n  [I18nErrorCodes.NOT_AVAILABLE_COMPOSITION_IN_LEGACY]: \"Not available Compostion API in Legacy API mode. Please make sure that the legacy API mode is working properly\"\n};\nvar TransrateVNodeSymbol = makeSymbol(\"__transrateVNode\");\nvar DatetimePartsSymbol = makeSymbol(\"__datetimeParts\");\nvar NumberPartsSymbol = makeSymbol(\"__numberParts\");\nvar EnableEmitter = makeSymbol(\"__enableEmitter\");\nvar DisableEmitter = makeSymbol(\"__disableEmitter\");\nvar SetPluralRulesSymbol = makeSymbol(\"__setPluralRules\");\nmakeSymbol(\"__intlifyMeta\");\nvar InejctWithOption = makeSymbol(\"__injectWithOption\");\nvar __VUE_I18N_BRIDGE__ = \"__VUE_I18N_BRIDGE__\";\nfunction handleFlatJson(obj) {\n  if (!isObject(obj)) {\n    return obj;\n  }\n  for (const key in obj) {\n    if (!hasOwn(obj, key)) {\n      continue;\n    }\n    if (!key.includes(\".\")) {\n      if (isObject(obj[key])) {\n        handleFlatJson(obj[key]);\n      }\n    } else {\n      const subKeys = key.split(\".\");\n      const lastIndex = subKeys.length - 1;\n      let currentObj = obj;\n      for (let i = 0; i < lastIndex; i++) {\n        if (!(subKeys[i] in currentObj)) {\n          currentObj[subKeys[i]] = {};\n        }\n        currentObj = currentObj[subKeys[i]];\n      }\n      currentObj[subKeys[lastIndex]] = obj[key];\n      delete obj[key];\n      if (isObject(currentObj[subKeys[lastIndex]])) {\n        handleFlatJson(currentObj[subKeys[lastIndex]]);\n      }\n    }\n  }\n  return obj;\n}\nfunction getLocaleMessages(locale, options) {\n  const { messages, __i18n, messageResolver, flatJson } = options;\n  const ret = isPlainObject(messages) ? messages : isArray(__i18n) ? {} : { [locale]: {} };\n  if (isArray(__i18n)) {\n    __i18n.forEach((custom) => {\n      if (\"locale\" in custom && \"resource\" in custom) {\n        const { locale: locale2, resource } = custom;\n        if (locale2) {\n          ret[locale2] = ret[locale2] || {};\n          deepCopy(resource, ret[locale2]);\n        } else {\n          deepCopy(resource, ret);\n        }\n      } else {\n        isString(custom) && deepCopy(JSON.parse(custom), ret);\n      }\n    });\n  }\n  if (messageResolver == null && flatJson) {\n    for (const key in ret) {\n      if (hasOwn(ret, key)) {\n        handleFlatJson(ret[key]);\n      }\n    }\n  }\n  return ret;\n}\nvar isNotObjectOrIsArray = (val) => !isObject(val) || isArray(val);\nfunction deepCopy(src, des) {\n  if (isNotObjectOrIsArray(src) || isNotObjectOrIsArray(des)) {\n    throw createI18nError(I18nErrorCodes.INVALID_VALUE);\n  }\n  for (const key in src) {\n    if (hasOwn(src, key)) {\n      if (isNotObjectOrIsArray(src[key]) || isNotObjectOrIsArray(des[key])) {\n        des[key] = src[key];\n      } else {\n        deepCopy(src[key], des[key]);\n      }\n    }\n  }\n}\nfunction getComponentOptions(instance) {\n  return instance.type;\n}\nfunction adjustI18nResources(global2, options, componentOptions) {\n  let messages = isObject(options.messages) ? options.messages : {};\n  if (\"__i18nGlobal\" in componentOptions) {\n    messages = getLocaleMessages(global2.locale.value, {\n      messages,\n      __i18n: componentOptions.__i18nGlobal\n    });\n  }\n  const locales = Object.keys(messages);\n  if (locales.length) {\n    locales.forEach((locale) => {\n      global2.mergeLocaleMessage(locale, messages[locale]);\n    });\n  }\n  {\n    if (isObject(options.datetimeFormats)) {\n      const locales2 = Object.keys(options.datetimeFormats);\n      if (locales2.length) {\n        locales2.forEach((locale) => {\n          global2.mergeDateTimeFormat(locale, options.datetimeFormats[locale]);\n        });\n      }\n    }\n    if (isObject(options.numberFormats)) {\n      const locales2 = Object.keys(options.numberFormats);\n      if (locales2.length) {\n        locales2.forEach((locale) => {\n          global2.mergeNumberFormat(locale, options.numberFormats[locale]);\n        });\n      }\n    }\n  }\n}\nfunction createTextNode(key) {\n  return createVNode(Text, null, key, 0);\n}\nvar DEVTOOLS_META = \"__INTLIFY_META__\";\nvar composerID = 0;\nfunction defineCoreMissingHandler(missing) {\n  return (ctx, locale, key, type) => {\n    return missing(locale, key, getCurrentInstance() || void 0, type);\n  };\n}\nvar getMetaInfo = () => {\n  const instance = getCurrentInstance();\n  let meta = null;\n  return instance && (meta = getComponentOptions(instance)[DEVTOOLS_META]) ? { [DEVTOOLS_META]: meta } : null;\n};\nfunction createComposer(options = {}, VueI18nLegacy) {\n  const { __root } = options;\n  const _isGlobal = __root === void 0;\n  let _inheritLocale = isBoolean(options.inheritLocale) ? options.inheritLocale : true;\n  const _locale = ref(\n    __root && _inheritLocale ? __root.locale.value : isString(options.locale) ? options.locale : DEFAULT_LOCALE\n  );\n  const _fallbackLocale = ref(\n    __root && _inheritLocale ? __root.fallbackLocale.value : isString(options.fallbackLocale) || isArray(options.fallbackLocale) || isPlainObject(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : _locale.value\n  );\n  const _messages = ref(getLocaleMessages(_locale.value, options));\n  const _datetimeFormats = ref(isPlainObject(options.datetimeFormats) ? options.datetimeFormats : { [_locale.value]: {} });\n  const _numberFormats = ref(isPlainObject(options.numberFormats) ? options.numberFormats : { [_locale.value]: {} });\n  let _missingWarn = __root ? __root.missingWarn : isBoolean(options.missingWarn) || isRegExp(options.missingWarn) ? options.missingWarn : true;\n  let _fallbackWarn = __root ? __root.fallbackWarn : isBoolean(options.fallbackWarn) || isRegExp(options.fallbackWarn) ? options.fallbackWarn : true;\n  let _fallbackRoot = __root ? __root.fallbackRoot : isBoolean(options.fallbackRoot) ? options.fallbackRoot : true;\n  let _fallbackFormat = !!options.fallbackFormat;\n  let _missing = isFunction(options.missing) ? options.missing : null;\n  let _runtimeMissing = isFunction(options.missing) ? defineCoreMissingHandler(options.missing) : null;\n  let _postTranslation = isFunction(options.postTranslation) ? options.postTranslation : null;\n  let _warnHtmlMessage = __root ? __root.warnHtmlMessage : isBoolean(options.warnHtmlMessage) ? options.warnHtmlMessage : true;\n  let _escapeParameter = !!options.escapeParameter;\n  const _modifiers = __root ? __root.modifiers : isPlainObject(options.modifiers) ? options.modifiers : {};\n  let _pluralRules = options.pluralRules || __root && __root.pluralRules;\n  let _context;\n  const getCoreContext = () => {\n    _isGlobal && setFallbackContext(null);\n    const ctxOptions = {\n      version: VERSION2,\n      locale: _locale.value,\n      fallbackLocale: _fallbackLocale.value,\n      messages: _messages.value,\n      modifiers: _modifiers,\n      pluralRules: _pluralRules,\n      missing: _runtimeMissing === null ? void 0 : _runtimeMissing,\n      missingWarn: _missingWarn,\n      fallbackWarn: _fallbackWarn,\n      fallbackFormat: _fallbackFormat,\n      unresolving: true,\n      postTranslation: _postTranslation === null ? void 0 : _postTranslation,\n      warnHtmlMessage: _warnHtmlMessage,\n      escapeParameter: _escapeParameter,\n      messageResolver: options.messageResolver,\n      __meta: { framework: \"vue\" }\n    };\n    {\n      ctxOptions.datetimeFormats = _datetimeFormats.value;\n      ctxOptions.numberFormats = _numberFormats.value;\n      ctxOptions.__datetimeFormatters = isPlainObject(_context) ? _context.__datetimeFormatters : void 0;\n      ctxOptions.__numberFormatters = isPlainObject(_context) ? _context.__numberFormatters : void 0;\n    }\n    if (true) {\n      ctxOptions.__v_emitter = isPlainObject(_context) ? _context.__v_emitter : void 0;\n    }\n    const ctx = createCoreContext(ctxOptions);\n    _isGlobal && setFallbackContext(ctx);\n    return ctx;\n  };\n  _context = getCoreContext();\n  updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);\n  function trackReactivityValues() {\n    return [\n      _locale.value,\n      _fallbackLocale.value,\n      _messages.value,\n      _datetimeFormats.value,\n      _numberFormats.value\n    ];\n  }\n  const locale = computed({\n    get: () => _locale.value,\n    set: (val) => {\n      _locale.value = val;\n      _context.locale = _locale.value;\n    }\n  });\n  const fallbackLocale = computed({\n    get: () => _fallbackLocale.value,\n    set: (val) => {\n      _fallbackLocale.value = val;\n      _context.fallbackLocale = _fallbackLocale.value;\n      updateFallbackLocale(_context, _locale.value, val);\n    }\n  });\n  const messages = computed(() => _messages.value);\n  const datetimeFormats = computed(() => _datetimeFormats.value);\n  const numberFormats = computed(() => _numberFormats.value);\n  function getPostTranslationHandler() {\n    return isFunction(_postTranslation) ? _postTranslation : null;\n  }\n  function setPostTranslationHandler(handler) {\n    _postTranslation = handler;\n    _context.postTranslation = handler;\n  }\n  function getMissingHandler() {\n    return _missing;\n  }\n  function setMissingHandler(handler) {\n    if (handler !== null) {\n      _runtimeMissing = defineCoreMissingHandler(handler);\n    }\n    _missing = handler;\n    _context.missing = _runtimeMissing;\n  }\n  function isResolvedTranslateMessage(type, arg) {\n    return type !== \"translate\" || !arg.resolvedMessage;\n  }\n  const wrapWithDeps = (fn, argumentParser, warnType, fallbackSuccess, fallbackFail, successCondition) => {\n    trackReactivityValues();\n    let ret;\n    if (true) {\n      try {\n        setAdditionalMeta(getMetaInfo());\n        if (!_isGlobal) {\n          _context.fallbackContext = __root ? getFallbackContext() : void 0;\n        }\n        ret = fn(_context);\n      } finally {\n        setAdditionalMeta(null);\n        if (!_isGlobal) {\n          _context.fallbackContext = void 0;\n        }\n      }\n    } else {\n      ret = fn(_context);\n    }\n    if (isNumber(ret) && ret === NOT_REOSLVED) {\n      const [key, arg2] = argumentParser();\n      if (__root && isString(key) && isResolvedTranslateMessage(warnType, arg2)) {\n        if (_fallbackRoot && (isTranslateFallbackWarn(_fallbackWarn, key) || isTranslateMissingWarn(_missingWarn, key))) {\n          warn(getWarnMessage2(I18nWarnCodes.FALLBACK_TO_ROOT, {\n            key,\n            type: warnType\n          }));\n        }\n        if (true) {\n          const { __v_emitter: emitter } = _context;\n          if (emitter && _fallbackRoot) {\n            emitter.emit(\"fallback\", {\n              type: warnType,\n              key,\n              to: \"global\",\n              groupId: `${warnType}:${key}`\n            });\n          }\n        }\n      }\n      return __root && _fallbackRoot ? fallbackSuccess(__root) : fallbackFail(key);\n    } else if (successCondition(ret)) {\n      return ret;\n    } else {\n      throw createI18nError(I18nErrorCodes.UNEXPECTED_RETURN_TYPE);\n    }\n  };\n  function t(...args) {\n    return wrapWithDeps((context) => Reflect.apply(translate, null, [context, ...args]), () => parseTranslateArgs(...args), \"translate\", (root) => Reflect.apply(root.t, root, [...args]), (key) => key, (val) => isString(val));\n  }\n  function rt(...args) {\n    const [arg1, arg2, arg3] = args;\n    if (arg3 && !isObject(arg3)) {\n      throw createI18nError(I18nErrorCodes.INVALID_ARGUMENT);\n    }\n    return t(...[arg1, arg2, assign({ resolvedMessage: true }, arg3 || {})]);\n  }\n  function d(...args) {\n    return wrapWithDeps((context) => Reflect.apply(datetime, null, [context, ...args]), () => parseDateTimeArgs(...args), \"datetime format\", (root) => Reflect.apply(root.d, root, [...args]), () => MISSING_RESOLVE_VALUE, (val) => isString(val));\n  }\n  function n(...args) {\n    return wrapWithDeps((context) => Reflect.apply(number, null, [context, ...args]), () => parseNumberArgs(...args), \"number format\", (root) => Reflect.apply(root.n, root, [...args]), () => MISSING_RESOLVE_VALUE, (val) => isString(val));\n  }\n  function normalize(values) {\n    return values.map((val) => isString(val) || isNumber(val) || isBoolean(val) ? createTextNode(String(val)) : val);\n  }\n  const interpolate = (val) => val;\n  const processor = {\n    normalize,\n    interpolate,\n    type: \"vnode\"\n  };\n  function transrateVNode(...args) {\n    return wrapWithDeps(\n      (context) => {\n        let ret;\n        const _context2 = context;\n        try {\n          _context2.processor = processor;\n          ret = Reflect.apply(translate, null, [_context2, ...args]);\n        } finally {\n          _context2.processor = null;\n        }\n        return ret;\n      },\n      () => parseTranslateArgs(...args),\n      \"translate\",\n      (root) => root[TransrateVNodeSymbol](...args),\n      (key) => [createTextNode(key)],\n      (val) => isArray(val)\n    );\n  }\n  function numberParts(...args) {\n    return wrapWithDeps(\n      (context) => Reflect.apply(number, null, [context, ...args]),\n      () => parseNumberArgs(...args),\n      \"number format\",\n      (root) => root[NumberPartsSymbol](...args),\n      () => [],\n      (val) => isString(val) || isArray(val)\n    );\n  }\n  function datetimeParts(...args) {\n    return wrapWithDeps(\n      (context) => Reflect.apply(datetime, null, [context, ...args]),\n      () => parseDateTimeArgs(...args),\n      \"datetime format\",\n      (root) => root[DatetimePartsSymbol](...args),\n      () => [],\n      (val) => isString(val) || isArray(val)\n    );\n  }\n  function setPluralRules(rules) {\n    _pluralRules = rules;\n    _context.pluralRules = _pluralRules;\n  }\n  function te(key, locale2) {\n    const targetLocale = isString(locale2) ? locale2 : _locale.value;\n    const message = getLocaleMessage(targetLocale);\n    return _context.messageResolver(message, key) !== null;\n  }\n  function resolveMessages(key) {\n    let messages2 = null;\n    const locales = fallbackWithLocaleChain(_context, _fallbackLocale.value, _locale.value);\n    for (let i = 0; i < locales.length; i++) {\n      const targetLocaleMessages = _messages.value[locales[i]] || {};\n      const messageValue = _context.messageResolver(targetLocaleMessages, key);\n      if (messageValue != null) {\n        messages2 = messageValue;\n        break;\n      }\n    }\n    return messages2;\n  }\n  function tm(key) {\n    const messages2 = resolveMessages(key);\n    return messages2 != null ? messages2 : __root ? __root.tm(key) || {} : {};\n  }\n  function getLocaleMessage(locale2) {\n    return _messages.value[locale2] || {};\n  }\n  function setLocaleMessage(locale2, message) {\n    _messages.value[locale2] = message;\n    _context.messages = _messages.value;\n  }\n  function mergeLocaleMessage(locale2, message) {\n    _messages.value[locale2] = _messages.value[locale2] || {};\n    deepCopy(message, _messages.value[locale2]);\n    _context.messages = _messages.value;\n  }\n  function getDateTimeFormat(locale2) {\n    return _datetimeFormats.value[locale2] || {};\n  }\n  function setDateTimeFormat(locale2, format2) {\n    _datetimeFormats.value[locale2] = format2;\n    _context.datetimeFormats = _datetimeFormats.value;\n    clearDateTimeFormat(_context, locale2, format2);\n  }\n  function mergeDateTimeFormat(locale2, format2) {\n    _datetimeFormats.value[locale2] = assign(_datetimeFormats.value[locale2] || {}, format2);\n    _context.datetimeFormats = _datetimeFormats.value;\n    clearDateTimeFormat(_context, locale2, format2);\n  }\n  function getNumberFormat(locale2) {\n    return _numberFormats.value[locale2] || {};\n  }\n  function setNumberFormat(locale2, format2) {\n    _numberFormats.value[locale2] = format2;\n    _context.numberFormats = _numberFormats.value;\n    clearNumberFormat(_context, locale2, format2);\n  }\n  function mergeNumberFormat(locale2, format2) {\n    _numberFormats.value[locale2] = assign(_numberFormats.value[locale2] || {}, format2);\n    _context.numberFormats = _numberFormats.value;\n    clearNumberFormat(_context, locale2, format2);\n  }\n  composerID++;\n  if (__root && inBrowser) {\n    watch(__root.locale, (val) => {\n      if (_inheritLocale) {\n        _locale.value = val;\n        _context.locale = val;\n        updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);\n      }\n    });\n    watch(__root.fallbackLocale, (val) => {\n      if (_inheritLocale) {\n        _fallbackLocale.value = val;\n        _context.fallbackLocale = val;\n        updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);\n      }\n    });\n  }\n  const composer = {\n    id: composerID,\n    locale,\n    fallbackLocale,\n    get inheritLocale() {\n      return _inheritLocale;\n    },\n    set inheritLocale(val) {\n      _inheritLocale = val;\n      if (val && __root) {\n        _locale.value = __root.locale.value;\n        _fallbackLocale.value = __root.fallbackLocale.value;\n        updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);\n      }\n    },\n    get availableLocales() {\n      return Object.keys(_messages.value).sort();\n    },\n    messages,\n    get modifiers() {\n      return _modifiers;\n    },\n    get pluralRules() {\n      return _pluralRules || {};\n    },\n    get isGlobal() {\n      return _isGlobal;\n    },\n    get missingWarn() {\n      return _missingWarn;\n    },\n    set missingWarn(val) {\n      _missingWarn = val;\n      _context.missingWarn = _missingWarn;\n    },\n    get fallbackWarn() {\n      return _fallbackWarn;\n    },\n    set fallbackWarn(val) {\n      _fallbackWarn = val;\n      _context.fallbackWarn = _fallbackWarn;\n    },\n    get fallbackRoot() {\n      return _fallbackRoot;\n    },\n    set fallbackRoot(val) {\n      _fallbackRoot = val;\n    },\n    get fallbackFormat() {\n      return _fallbackFormat;\n    },\n    set fallbackFormat(val) {\n      _fallbackFormat = val;\n      _context.fallbackFormat = _fallbackFormat;\n    },\n    get warnHtmlMessage() {\n      return _warnHtmlMessage;\n    },\n    set warnHtmlMessage(val) {\n      _warnHtmlMessage = val;\n      _context.warnHtmlMessage = val;\n    },\n    get escapeParameter() {\n      return _escapeParameter;\n    },\n    set escapeParameter(val) {\n      _escapeParameter = val;\n      _context.escapeParameter = val;\n    },\n    t,\n    getLocaleMessage,\n    setLocaleMessage,\n    mergeLocaleMessage,\n    getPostTranslationHandler,\n    setPostTranslationHandler,\n    getMissingHandler,\n    setMissingHandler,\n    [SetPluralRulesSymbol]: setPluralRules\n  };\n  {\n    composer.datetimeFormats = datetimeFormats;\n    composer.numberFormats = numberFormats;\n    composer.rt = rt;\n    composer.te = te;\n    composer.tm = tm;\n    composer.d = d;\n    composer.n = n;\n    composer.getDateTimeFormat = getDateTimeFormat;\n    composer.setDateTimeFormat = setDateTimeFormat;\n    composer.mergeDateTimeFormat = mergeDateTimeFormat;\n    composer.getNumberFormat = getNumberFormat;\n    composer.setNumberFormat = setNumberFormat;\n    composer.mergeNumberFormat = mergeNumberFormat;\n    composer[InejctWithOption] = options.__injectWithOption;\n    composer[TransrateVNodeSymbol] = transrateVNode;\n    composer[DatetimePartsSymbol] = datetimeParts;\n    composer[NumberPartsSymbol] = numberParts;\n  }\n  if (true) {\n    composer[EnableEmitter] = (emitter) => {\n      _context.__v_emitter = emitter;\n    };\n    composer[DisableEmitter] = () => {\n      _context.__v_emitter = void 0;\n    };\n  }\n  return composer;\n}\nfunction convertComposerOptions(options) {\n  const locale = isString(options.locale) ? options.locale : DEFAULT_LOCALE;\n  const fallbackLocale = isString(options.fallbackLocale) || isArray(options.fallbackLocale) || isPlainObject(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : locale;\n  const missing = isFunction(options.missing) ? options.missing : void 0;\n  const missingWarn = isBoolean(options.silentTranslationWarn) || isRegExp(options.silentTranslationWarn) ? !options.silentTranslationWarn : true;\n  const fallbackWarn = isBoolean(options.silentFallbackWarn) || isRegExp(options.silentFallbackWarn) ? !options.silentFallbackWarn : true;\n  const fallbackRoot = isBoolean(options.fallbackRoot) ? options.fallbackRoot : true;\n  const fallbackFormat = !!options.formatFallbackMessages;\n  const modifiers = isPlainObject(options.modifiers) ? options.modifiers : {};\n  const pluralizationRules = options.pluralizationRules;\n  const postTranslation = isFunction(options.postTranslation) ? options.postTranslation : void 0;\n  const warnHtmlMessage = isString(options.warnHtmlInMessage) ? options.warnHtmlInMessage !== \"off\" : true;\n  const escapeParameter = !!options.escapeParameterHtml;\n  const inheritLocale = isBoolean(options.sync) ? options.sync : true;\n  if (options.formatter) {\n    warn(getWarnMessage2(I18nWarnCodes.NOT_SUPPORTED_FORMATTER));\n  }\n  if (options.preserveDirectiveContent) {\n    warn(getWarnMessage2(I18nWarnCodes.NOT_SUPPORTED_PRESERVE_DIRECTIVE));\n  }\n  let messages = options.messages;\n  if (isPlainObject(options.sharedMessages)) {\n    const sharedMessages = options.sharedMessages;\n    const locales = Object.keys(sharedMessages);\n    messages = locales.reduce((messages2, locale2) => {\n      const message = messages2[locale2] || (messages2[locale2] = {});\n      assign(message, sharedMessages[locale2]);\n      return messages2;\n    }, messages || {});\n  }\n  const { __i18n, __root, __injectWithOption } = options;\n  const datetimeFormats = options.datetimeFormats;\n  const numberFormats = options.numberFormats;\n  const flatJson = options.flatJson;\n  return {\n    locale,\n    fallbackLocale,\n    messages,\n    flatJson,\n    datetimeFormats,\n    numberFormats,\n    missing,\n    missingWarn,\n    fallbackWarn,\n    fallbackRoot,\n    fallbackFormat,\n    modifiers,\n    pluralRules: pluralizationRules,\n    postTranslation,\n    warnHtmlMessage,\n    escapeParameter,\n    messageResolver: options.messageResolver,\n    inheritLocale,\n    __i18n,\n    __root,\n    __injectWithOption\n  };\n}\nfunction createVueI18n(options = {}, VueI18nLegacy) {\n  {\n    const composer = createComposer(convertComposerOptions(options));\n    const vueI18n = {\n      id: composer.id,\n      get locale() {\n        return composer.locale.value;\n      },\n      set locale(val) {\n        composer.locale.value = val;\n      },\n      get fallbackLocale() {\n        return composer.fallbackLocale.value;\n      },\n      set fallbackLocale(val) {\n        composer.fallbackLocale.value = val;\n      },\n      get messages() {\n        return composer.messages.value;\n      },\n      get datetimeFormats() {\n        return composer.datetimeFormats.value;\n      },\n      get numberFormats() {\n        return composer.numberFormats.value;\n      },\n      get availableLocales() {\n        return composer.availableLocales;\n      },\n      get formatter() {\n        warn(getWarnMessage2(I18nWarnCodes.NOT_SUPPORTED_FORMATTER));\n        return {\n          interpolate() {\n            return [];\n          }\n        };\n      },\n      set formatter(val) {\n        warn(getWarnMessage2(I18nWarnCodes.NOT_SUPPORTED_FORMATTER));\n      },\n      get missing() {\n        return composer.getMissingHandler();\n      },\n      set missing(handler) {\n        composer.setMissingHandler(handler);\n      },\n      get silentTranslationWarn() {\n        return isBoolean(composer.missingWarn) ? !composer.missingWarn : composer.missingWarn;\n      },\n      set silentTranslationWarn(val) {\n        composer.missingWarn = isBoolean(val) ? !val : val;\n      },\n      get silentFallbackWarn() {\n        return isBoolean(composer.fallbackWarn) ? !composer.fallbackWarn : composer.fallbackWarn;\n      },\n      set silentFallbackWarn(val) {\n        composer.fallbackWarn = isBoolean(val) ? !val : val;\n      },\n      get modifiers() {\n        return composer.modifiers;\n      },\n      get formatFallbackMessages() {\n        return composer.fallbackFormat;\n      },\n      set formatFallbackMessages(val) {\n        composer.fallbackFormat = val;\n      },\n      get postTranslation() {\n        return composer.getPostTranslationHandler();\n      },\n      set postTranslation(handler) {\n        composer.setPostTranslationHandler(handler);\n      },\n      get sync() {\n        return composer.inheritLocale;\n      },\n      set sync(val) {\n        composer.inheritLocale = val;\n      },\n      get warnHtmlInMessage() {\n        return composer.warnHtmlMessage ? \"warn\" : \"off\";\n      },\n      set warnHtmlInMessage(val) {\n        composer.warnHtmlMessage = val !== \"off\";\n      },\n      get escapeParameterHtml() {\n        return composer.escapeParameter;\n      },\n      set escapeParameterHtml(val) {\n        composer.escapeParameter = val;\n      },\n      get preserveDirectiveContent() {\n        warn(getWarnMessage2(I18nWarnCodes.NOT_SUPPORTED_PRESERVE_DIRECTIVE));\n        return true;\n      },\n      set preserveDirectiveContent(val) {\n        warn(getWarnMessage2(I18nWarnCodes.NOT_SUPPORTED_PRESERVE_DIRECTIVE));\n      },\n      get pluralizationRules() {\n        return composer.pluralRules || {};\n      },\n      __composer: composer,\n      t(...args) {\n        const [arg1, arg2, arg3] = args;\n        const options2 = {};\n        let list = null;\n        let named = null;\n        if (!isString(arg1)) {\n          throw createI18nError(I18nErrorCodes.INVALID_ARGUMENT);\n        }\n        const key = arg1;\n        if (isString(arg2)) {\n          options2.locale = arg2;\n        } else if (isArray(arg2)) {\n          list = arg2;\n        } else if (isPlainObject(arg2)) {\n          named = arg2;\n        }\n        if (isArray(arg3)) {\n          list = arg3;\n        } else if (isPlainObject(arg3)) {\n          named = arg3;\n        }\n        return Reflect.apply(composer.t, composer, [\n          key,\n          list || named || {},\n          options2\n        ]);\n      },\n      rt(...args) {\n        return Reflect.apply(composer.rt, composer, [...args]);\n      },\n      tc(...args) {\n        const [arg1, arg2, arg3] = args;\n        const options2 = { plural: 1 };\n        let list = null;\n        let named = null;\n        if (!isString(arg1)) {\n          throw createI18nError(I18nErrorCodes.INVALID_ARGUMENT);\n        }\n        const key = arg1;\n        if (isString(arg2)) {\n          options2.locale = arg2;\n        } else if (isNumber(arg2)) {\n          options2.plural = arg2;\n        } else if (isArray(arg2)) {\n          list = arg2;\n        } else if (isPlainObject(arg2)) {\n          named = arg2;\n        }\n        if (isString(arg3)) {\n          options2.locale = arg3;\n        } else if (isArray(arg3)) {\n          list = arg3;\n        } else if (isPlainObject(arg3)) {\n          named = arg3;\n        }\n        return Reflect.apply(composer.t, composer, [\n          key,\n          list || named || {},\n          options2\n        ]);\n      },\n      te(key, locale) {\n        return composer.te(key, locale);\n      },\n      tm(key) {\n        return composer.tm(key);\n      },\n      getLocaleMessage(locale) {\n        return composer.getLocaleMessage(locale);\n      },\n      setLocaleMessage(locale, message) {\n        composer.setLocaleMessage(locale, message);\n      },\n      mergeLocaleMessage(locale, message) {\n        composer.mergeLocaleMessage(locale, message);\n      },\n      d(...args) {\n        return Reflect.apply(composer.d, composer, [...args]);\n      },\n      getDateTimeFormat(locale) {\n        return composer.getDateTimeFormat(locale);\n      },\n      setDateTimeFormat(locale, format2) {\n        composer.setDateTimeFormat(locale, format2);\n      },\n      mergeDateTimeFormat(locale, format2) {\n        composer.mergeDateTimeFormat(locale, format2);\n      },\n      n(...args) {\n        return Reflect.apply(composer.n, composer, [...args]);\n      },\n      getNumberFormat(locale) {\n        return composer.getNumberFormat(locale);\n      },\n      setNumberFormat(locale, format2) {\n        composer.setNumberFormat(locale, format2);\n      },\n      mergeNumberFormat(locale, format2) {\n        composer.mergeNumberFormat(locale, format2);\n      },\n      getChoiceIndex(choice, choicesLength) {\n        warn(getWarnMessage2(I18nWarnCodes.NOT_SUPPORTED_GET_CHOICE_INDEX));\n        return -1;\n      },\n      __onComponentInstanceCreated(target) {\n        const { componentInstanceCreatedListener } = options;\n        if (componentInstanceCreatedListener) {\n          componentInstanceCreatedListener(target, vueI18n);\n        }\n      }\n    };\n    if (true) {\n      vueI18n.__enableEmitter = (emitter) => {\n        const __composer = composer;\n        __composer[EnableEmitter] && __composer[EnableEmitter](emitter);\n      };\n      vueI18n.__disableEmitter = () => {\n        const __composer = composer;\n        __composer[DisableEmitter] && __composer[DisableEmitter]();\n      };\n    }\n    return vueI18n;\n  }\n}\nvar baseFormatProps = {\n  tag: {\n    type: [String, Object]\n  },\n  locale: {\n    type: String\n  },\n  scope: {\n    type: String,\n    validator: (val) => val === \"parent\" || val === \"global\",\n    default: \"parent\"\n  },\n  i18n: {\n    type: Object\n  }\n};\nfunction getInterpolateArg({ slots }, keys) {\n  if (keys.length === 1 && keys[0] === \"default\") {\n    const ret = slots.default ? slots.default() : [];\n    return ret.reduce((slot, current) => {\n      return slot = [\n        ...slot,\n        ...isArray(current.children) ? current.children : [current]\n      ];\n    }, []);\n  } else {\n    return keys.reduce((arg, key) => {\n      const slot = slots[key];\n      if (slot) {\n        arg[key] = slot();\n      }\n      return arg;\n    }, {});\n  }\n}\nfunction getFragmentableTag(tag) {\n  return Fragment;\n}\nvar Translation = {\n  name: \"i18n-t\",\n  props: assign({\n    keypath: {\n      type: String,\n      required: true\n    },\n    plural: {\n      type: [Number, String],\n      validator: (val) => isNumber(val) || !isNaN(val)\n    }\n  }, baseFormatProps),\n  setup(props, context) {\n    const { slots, attrs } = context;\n    const i18n = props.i18n || useI18n({\n      useScope: props.scope,\n      __useComponent: true\n    });\n    return () => {\n      const keys = Object.keys(slots).filter((key) => key !== \"_\");\n      const options = {};\n      if (props.locale) {\n        options.locale = props.locale;\n      }\n      if (props.plural !== void 0) {\n        options.plural = isString(props.plural) ? +props.plural : props.plural;\n      }\n      const arg = getInterpolateArg(context, keys);\n      const children = i18n[TransrateVNodeSymbol](props.keypath, arg, options);\n      const assignedAttrs = assign({}, attrs);\n      const tag = isString(props.tag) || isObject(props.tag) ? props.tag : getFragmentableTag();\n      return h(tag, assignedAttrs, children);\n    };\n  }\n};\nfunction isVNode(target) {\n  return isArray(target) && !isString(target[0]);\n}\nfunction renderFormatter(props, context, slotKeys, partFormatter) {\n  const { slots, attrs } = context;\n  return () => {\n    const options = { part: true };\n    let overrides = {};\n    if (props.locale) {\n      options.locale = props.locale;\n    }\n    if (isString(props.format)) {\n      options.key = props.format;\n    } else if (isObject(props.format)) {\n      if (isString(props.format.key)) {\n        options.key = props.format.key;\n      }\n      overrides = Object.keys(props.format).reduce((options2, prop) => {\n        return slotKeys.includes(prop) ? assign({}, options2, { [prop]: props.format[prop] }) : options2;\n      }, {});\n    }\n    const parts = partFormatter(...[props.value, options, overrides]);\n    let children = [options.key];\n    if (isArray(parts)) {\n      children = parts.map((part, index) => {\n        const slot = slots[part.type];\n        const node = slot ? slot({ [part.type]: part.value, index, parts }) : [part.value];\n        if (isVNode(node)) {\n          node[0].key = `${part.type}-${index}`;\n        }\n        return node;\n      });\n    } else if (isString(parts)) {\n      children = [parts];\n    }\n    const assignedAttrs = assign({}, attrs);\n    const tag = isString(props.tag) || isObject(props.tag) ? props.tag : getFragmentableTag();\n    return h(tag, assignedAttrs, children);\n  };\n}\nvar NumberFormat = {\n  name: \"i18n-n\",\n  props: assign({\n    value: {\n      type: Number,\n      required: true\n    },\n    format: {\n      type: [String, Object]\n    }\n  }, baseFormatProps),\n  setup(props, context) {\n    const i18n = props.i18n || useI18n({ useScope: \"parent\", __useComponent: true });\n    return renderFormatter(props, context, NUMBER_FORMAT_OPTIONS_KEYS, (...args) => i18n[NumberPartsSymbol](...args));\n  }\n};\nvar DatetimeFormat = {\n  name: \"i18n-d\",\n  props: assign({\n    value: {\n      type: [Number, Date],\n      required: true\n    },\n    format: {\n      type: [String, Object]\n    }\n  }, baseFormatProps),\n  setup(props, context) {\n    const i18n = props.i18n || useI18n({ useScope: \"parent\", __useComponent: true });\n    return renderFormatter(props, context, DATETIME_FORMAT_OPTIONS_KEYS, (...args) => i18n[DatetimePartsSymbol](...args));\n  }\n};\nfunction getComposer$2(i18n, instance) {\n  const i18nInternal = i18n;\n  if (i18n.mode === \"composition\") {\n    return i18nInternal.__getInstance(instance) || i18n.global;\n  } else {\n    const vueI18n = i18nInternal.__getInstance(instance);\n    return vueI18n != null ? vueI18n.__composer : i18n.global.__composer;\n  }\n}\nfunction vTDirective(i18n) {\n  const _process = (binding) => {\n    const { instance, modifiers, value } = binding;\n    if (!instance || !instance.$) {\n      throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);\n    }\n    const composer = getComposer$2(i18n, instance.$);\n    if (modifiers.preserve) {\n      warn(getWarnMessage2(I18nWarnCodes.NOT_SUPPORTED_PRESERVE));\n    }\n    const parsedValue = parseValue(value);\n    return [\n      Reflect.apply(composer.t, composer, [...makeParams(parsedValue)]),\n      composer\n    ];\n  };\n  const register = (el, binding) => {\n    const [textContent, composer] = _process(binding);\n    if (inBrowser && i18n.global === composer) {\n      el.__i18nWatcher = watch(composer.locale, () => {\n        binding.instance && binding.instance.$forceUpdate();\n      });\n    }\n    el.__composer = composer;\n    el.textContent = textContent;\n  };\n  const unregister = (el) => {\n    if (inBrowser && el.__i18nWatcher) {\n      el.__i18nWatcher();\n      el.__i18nWatcher = void 0;\n      delete el.__i18nWatcher;\n    }\n    if (el.__composer) {\n      el.__composer = void 0;\n      delete el.__composer;\n    }\n  };\n  const update = (el, { value }) => {\n    if (el.__composer) {\n      const composer = el.__composer;\n      const parsedValue = parseValue(value);\n      el.textContent = Reflect.apply(composer.t, composer, [\n        ...makeParams(parsedValue)\n      ]);\n    }\n  };\n  const getSSRProps = (binding) => {\n    const [textContent] = _process(binding);\n    return { textContent };\n  };\n  return {\n    created: register,\n    unmounted: unregister,\n    beforeUpdate: update,\n    getSSRProps\n  };\n}\nfunction parseValue(value) {\n  if (isString(value)) {\n    return { path: value };\n  } else if (isPlainObject(value)) {\n    if (!(\"path\" in value)) {\n      throw createI18nError(I18nErrorCodes.REQUIRED_VALUE, \"path\");\n    }\n    return value;\n  } else {\n    throw createI18nError(I18nErrorCodes.INVALID_VALUE);\n  }\n}\nfunction makeParams(value) {\n  const { path, locale, args, choice, plural } = value;\n  const options = {};\n  const named = args || {};\n  if (isString(locale)) {\n    options.locale = locale;\n  }\n  if (isNumber(choice)) {\n    options.plural = choice;\n  }\n  if (isNumber(plural)) {\n    options.plural = plural;\n  }\n  return [path, named, options];\n}\nfunction apply(app, i18n, ...options) {\n  const pluginOptions = isPlainObject(options[0]) ? options[0] : {};\n  const useI18nComponentName = !!pluginOptions.useI18nComponentName;\n  const globalInstall = isBoolean(pluginOptions.globalInstall) ? pluginOptions.globalInstall : true;\n  if (globalInstall && useI18nComponentName) {\n    warn(getWarnMessage2(I18nWarnCodes.COMPONENT_NAME_LEGACY_COMPATIBLE, {\n      name: Translation.name\n    }));\n  }\n  if (globalInstall) {\n    app.component(!useI18nComponentName ? Translation.name : \"i18n\", Translation);\n    app.component(NumberFormat.name, NumberFormat);\n    app.component(DatetimeFormat.name, DatetimeFormat);\n  }\n  {\n    app.directive(\"t\", vTDirective(i18n));\n  }\n}\nvar VUE_I18N_COMPONENT_TYPES = \"vue-i18n: composer properties\";\nvar devtoolsApi;\nasync function enableDevTools(app, i18n) {\n  return new Promise((resolve, reject) => {\n    try {\n      setupDevtoolsPlugin({\n        id: \"vue-devtools-plugin-vue-i18n\",\n        label: VueDevToolsLabels[\"vue-devtools-plugin-vue-i18n\"],\n        packageName: \"vue-i18n\",\n        homepage: \"https://vue-i18n.intlify.dev\",\n        logo: \"https://vue-i18n.intlify.dev/vue-i18n-devtools-logo.png\",\n        componentStateTypes: [VUE_I18N_COMPONENT_TYPES],\n        app\n      }, (api) => {\n        devtoolsApi = api;\n        api.on.visitComponentTree(({ componentInstance, treeNode }) => {\n          updateComponentTreeTags(componentInstance, treeNode, i18n);\n        });\n        api.on.inspectComponent(({ componentInstance, instanceData }) => {\n          if (componentInstance.vnode.el && componentInstance.vnode.el.__VUE_I18N__ && instanceData) {\n            if (i18n.mode === \"legacy\") {\n              if (componentInstance.vnode.el.__VUE_I18N__ !== i18n.global.__composer) {\n                inspectComposer(instanceData, componentInstance.vnode.el.__VUE_I18N__);\n              }\n            } else {\n              inspectComposer(instanceData, componentInstance.vnode.el.__VUE_I18N__);\n            }\n          }\n        });\n        api.addInspector({\n          id: \"vue-i18n-resource-inspector\",\n          label: VueDevToolsLabels[\"vue-i18n-resource-inspector\"],\n          icon: \"language\",\n          treeFilterPlaceholder: VueDevToolsPlaceholders[\"vue-i18n-resource-inspector\"]\n        });\n        api.on.getInspectorTree((payload) => {\n          if (payload.app === app && payload.inspectorId === \"vue-i18n-resource-inspector\") {\n            registerScope(payload, i18n);\n          }\n        });\n        const roots = /* @__PURE__ */ new Map();\n        api.on.getInspectorState(async (payload) => {\n          if (payload.app === app && payload.inspectorId === \"vue-i18n-resource-inspector\") {\n            api.unhighlightElement();\n            inspectScope(payload, i18n);\n            if (payload.nodeId === \"global\") {\n              if (!roots.has(payload.app)) {\n                const [root] = await api.getComponentInstances(payload.app);\n                roots.set(payload.app, root);\n              }\n              api.highlightElement(roots.get(payload.app));\n            } else {\n              const instance = getComponentInstance(payload.nodeId, i18n);\n              instance && api.highlightElement(instance);\n            }\n          }\n        });\n        api.on.editInspectorState((payload) => {\n          if (payload.app === app && payload.inspectorId === \"vue-i18n-resource-inspector\") {\n            editScope(payload, i18n);\n          }\n        });\n        api.addTimelineLayer({\n          id: \"vue-i18n-timeline\",\n          label: VueDevToolsLabels[\"vue-i18n-timeline\"],\n          color: VueDevToolsTimelineColors[\"vue-i18n-timeline\"]\n        });\n        resolve(true);\n      });\n    } catch (e) {\n      console.error(e);\n      reject(false);\n    }\n  });\n}\nfunction getI18nScopeLable(instance) {\n  return instance.type.name || instance.type.displayName || instance.type.__file || \"Anonymous\";\n}\nfunction updateComponentTreeTags(instance, treeNode, i18n) {\n  const global2 = i18n.mode === \"composition\" ? i18n.global : i18n.global.__composer;\n  if (instance && instance.vnode.el && instance.vnode.el.__VUE_I18N__) {\n    if (instance.vnode.el.__VUE_I18N__ !== global2) {\n      const tag = {\n        label: `i18n (${getI18nScopeLable(instance)} Scope)`,\n        textColor: 0,\n        backgroundColor: 16764185\n      };\n      treeNode.tags.push(tag);\n    }\n  }\n}\nfunction inspectComposer(instanceData, composer) {\n  const type = VUE_I18N_COMPONENT_TYPES;\n  instanceData.state.push({\n    type,\n    key: \"locale\",\n    editable: true,\n    value: composer.locale.value\n  });\n  instanceData.state.push({\n    type,\n    key: \"availableLocales\",\n    editable: false,\n    value: composer.availableLocales\n  });\n  instanceData.state.push({\n    type,\n    key: \"fallbackLocale\",\n    editable: true,\n    value: composer.fallbackLocale.value\n  });\n  instanceData.state.push({\n    type,\n    key: \"inheritLocale\",\n    editable: true,\n    value: composer.inheritLocale\n  });\n  instanceData.state.push({\n    type,\n    key: \"messages\",\n    editable: false,\n    value: getLocaleMessageValue(composer.messages.value)\n  });\n  {\n    instanceData.state.push({\n      type,\n      key: \"datetimeFormats\",\n      editable: false,\n      value: composer.datetimeFormats.value\n    });\n    instanceData.state.push({\n      type,\n      key: \"numberFormats\",\n      editable: false,\n      value: composer.numberFormats.value\n    });\n  }\n}\nfunction getLocaleMessageValue(messages) {\n  const value = {};\n  Object.keys(messages).forEach((key) => {\n    const v = messages[key];\n    if (isFunction(v) && \"source\" in v) {\n      value[key] = getMessageFunctionDetails(v);\n    } else if (isObject(v)) {\n      value[key] = getLocaleMessageValue(v);\n    } else {\n      value[key] = v;\n    }\n  });\n  return value;\n}\nvar ESC = {\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': \"&quot;\",\n  \"&\": \"&amp;\"\n};\nfunction escape(s) {\n  return s.replace(/[<>\"&]/g, escapeChar);\n}\nfunction escapeChar(a) {\n  return ESC[a] || a;\n}\nfunction getMessageFunctionDetails(func) {\n  const argString = func.source ? `(\"${escape(func.source)}\")` : `(?)`;\n  return {\n    _custom: {\n      type: \"function\",\n      display: `<span>\\u0192</span> ${argString}`\n    }\n  };\n}\nfunction registerScope(payload, i18n) {\n  payload.rootNodes.push({\n    id: \"global\",\n    label: \"Global Scope\"\n  });\n  const global2 = i18n.mode === \"composition\" ? i18n.global : i18n.global.__composer;\n  for (const [keyInstance, instance] of i18n.__instances) {\n    const composer = i18n.mode === \"composition\" ? instance : instance.__composer;\n    if (global2 === composer) {\n      continue;\n    }\n    payload.rootNodes.push({\n      id: composer.id.toString(),\n      label: `${getI18nScopeLable(keyInstance)} Scope`\n    });\n  }\n}\nfunction getComponentInstance(nodeId, i18n) {\n  let instance = null;\n  if (nodeId !== \"global\") {\n    for (const [component, composer] of i18n.__instances.entries()) {\n      if (composer.id.toString() === nodeId) {\n        instance = component;\n        break;\n      }\n    }\n  }\n  return instance;\n}\nfunction getComposer$1(nodeId, i18n) {\n  if (nodeId === \"global\") {\n    return i18n.mode === \"composition\" ? i18n.global : i18n.global.__composer;\n  } else {\n    const instance = Array.from(i18n.__instances.values()).find((item) => item.id.toString() === nodeId);\n    if (instance) {\n      return i18n.mode === \"composition\" ? instance : instance.__composer;\n    } else {\n      return null;\n    }\n  }\n}\nfunction inspectScope(payload, i18n) {\n  const composer = getComposer$1(payload.nodeId, i18n);\n  if (composer) {\n    payload.state = makeScopeInspectState(composer);\n  }\n  return null;\n}\nfunction makeScopeInspectState(composer) {\n  const state = {};\n  const localeType = \"Locale related info\";\n  const localeStates = [\n    {\n      type: localeType,\n      key: \"locale\",\n      editable: true,\n      value: composer.locale.value\n    },\n    {\n      type: localeType,\n      key: \"fallbackLocale\",\n      editable: true,\n      value: composer.fallbackLocale.value\n    },\n    {\n      type: localeType,\n      key: \"availableLocales\",\n      editable: false,\n      value: composer.availableLocales\n    },\n    {\n      type: localeType,\n      key: \"inheritLocale\",\n      editable: true,\n      value: composer.inheritLocale\n    }\n  ];\n  state[localeType] = localeStates;\n  const localeMessagesType = \"Locale messages info\";\n  const localeMessagesStates = [\n    {\n      type: localeMessagesType,\n      key: \"messages\",\n      editable: false,\n      value: getLocaleMessageValue(composer.messages.value)\n    }\n  ];\n  state[localeMessagesType] = localeMessagesStates;\n  {\n    const datetimeFormatsType = \"Datetime formats info\";\n    const datetimeFormatsStates = [\n      {\n        type: datetimeFormatsType,\n        key: \"datetimeFormats\",\n        editable: false,\n        value: composer.datetimeFormats.value\n      }\n    ];\n    state[datetimeFormatsType] = datetimeFormatsStates;\n    const numberFormatsType = \"Datetime formats info\";\n    const numberFormatsStates = [\n      {\n        type: numberFormatsType,\n        key: \"numberFormats\",\n        editable: false,\n        value: composer.numberFormats.value\n      }\n    ];\n    state[numberFormatsType] = numberFormatsStates;\n  }\n  return state;\n}\nfunction addTimelineEvent(event, payload) {\n  if (devtoolsApi) {\n    let groupId;\n    if (payload && \"groupId\" in payload) {\n      groupId = payload.groupId;\n      delete payload.groupId;\n    }\n    devtoolsApi.addTimelineEvent({\n      layerId: \"vue-i18n-timeline\",\n      event: {\n        title: event,\n        groupId,\n        time: Date.now(),\n        meta: {},\n        data: payload || {},\n        logType: event === \"compile-error\" ? \"error\" : event === \"fallback\" || event === \"missing\" ? \"warning\" : \"default\"\n      }\n    });\n  }\n}\nfunction editScope(payload, i18n) {\n  const composer = getComposer$1(payload.nodeId, i18n);\n  if (composer) {\n    const [field] = payload.path;\n    if (field === \"locale\" && isString(payload.state.value)) {\n      composer.locale.value = payload.state.value;\n    } else if (field === \"fallbackLocale\" && (isString(payload.state.value) || isArray(payload.state.value) || isObject(payload.state.value))) {\n      composer.fallbackLocale.value = payload.state.value;\n    } else if (field === \"inheritLocale\" && isBoolean(payload.state.value)) {\n      composer.inheritLocale = payload.state.value;\n    }\n  }\n}\nfunction defineMixin(vuei18n, composer, i18n) {\n  return {\n    beforeCreate() {\n      const instance = getCurrentInstance();\n      if (!instance) {\n        throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);\n      }\n      const options = this.$options;\n      if (options.i18n) {\n        const optionsI18n = options.i18n;\n        if (options.__i18n) {\n          optionsI18n.__i18n = options.__i18n;\n        }\n        optionsI18n.__root = composer;\n        if (this === this.$root) {\n          this.$i18n = mergeToRoot(vuei18n, optionsI18n);\n        } else {\n          optionsI18n.__injectWithOption = true;\n          this.$i18n = createVueI18n(optionsI18n);\n        }\n      } else if (options.__i18n) {\n        if (this === this.$root) {\n          this.$i18n = mergeToRoot(vuei18n, options);\n        } else {\n          this.$i18n = createVueI18n({\n            __i18n: options.__i18n,\n            __injectWithOption: true,\n            __root: composer\n          });\n        }\n      } else {\n        this.$i18n = vuei18n;\n      }\n      if (options.__i18nGlobal) {\n        adjustI18nResources(composer, options, options);\n      }\n      vuei18n.__onComponentInstanceCreated(this.$i18n);\n      i18n.__setInstance(instance, this.$i18n);\n      this.$t = (...args) => this.$i18n.t(...args);\n      this.$rt = (...args) => this.$i18n.rt(...args);\n      this.$tc = (...args) => this.$i18n.tc(...args);\n      this.$te = (key, locale) => this.$i18n.te(key, locale);\n      this.$d = (...args) => this.$i18n.d(...args);\n      this.$n = (...args) => this.$i18n.n(...args);\n      this.$tm = (key) => this.$i18n.tm(key);\n    },\n    mounted() {\n      if (this.$el && this.$i18n) {\n        this.$el.__VUE_I18N__ = this.$i18n.__composer;\n        const emitter = this.__v_emitter = createEmitter();\n        const _vueI18n = this.$i18n;\n        _vueI18n.__enableEmitter && _vueI18n.__enableEmitter(emitter);\n        emitter.on(\"*\", addTimelineEvent);\n      }\n    },\n    unmounted() {\n      const instance = getCurrentInstance();\n      if (!instance) {\n        throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);\n      }\n      if (this.$el && this.$el.__VUE_I18N__) {\n        if (this.__v_emitter) {\n          this.__v_emitter.off(\"*\", addTimelineEvent);\n          delete this.__v_emitter;\n        }\n        if (this.$i18n) {\n          const _vueI18n = this.$i18n;\n          _vueI18n.__disableEmitter && _vueI18n.__disableEmitter();\n          delete this.$el.__VUE_I18N__;\n        }\n      }\n      delete this.$t;\n      delete this.$rt;\n      delete this.$tc;\n      delete this.$te;\n      delete this.$d;\n      delete this.$n;\n      delete this.$tm;\n      i18n.__deleteInstance(instance);\n      delete this.$i18n;\n    }\n  };\n}\nfunction mergeToRoot(root, options) {\n  root.locale = options.locale || root.locale;\n  root.fallbackLocale = options.fallbackLocale || root.fallbackLocale;\n  root.missing = options.missing || root.missing;\n  root.silentTranslationWarn = options.silentTranslationWarn || root.silentFallbackWarn;\n  root.silentFallbackWarn = options.silentFallbackWarn || root.silentFallbackWarn;\n  root.formatFallbackMessages = options.formatFallbackMessages || root.formatFallbackMessages;\n  root.postTranslation = options.postTranslation || root.postTranslation;\n  root.warnHtmlInMessage = options.warnHtmlInMessage || root.warnHtmlInMessage;\n  root.escapeParameterHtml = options.escapeParameterHtml || root.escapeParameterHtml;\n  root.sync = options.sync || root.sync;\n  root.__composer[SetPluralRulesSymbol](options.pluralizationRules || root.pluralizationRules);\n  const messages = getLocaleMessages(root.locale, {\n    messages: options.messages,\n    __i18n: options.__i18n\n  });\n  Object.keys(messages).forEach((locale) => root.mergeLocaleMessage(locale, messages[locale]));\n  if (options.datetimeFormats) {\n    Object.keys(options.datetimeFormats).forEach((locale) => root.mergeDateTimeFormat(locale, options.datetimeFormats[locale]));\n  }\n  if (options.numberFormats) {\n    Object.keys(options.numberFormats).forEach((locale) => root.mergeNumberFormat(locale, options.numberFormats[locale]));\n  }\n  return root;\n}\nvar I18nInjectionKey = makeSymbol(\"global-vue-i18n\");\nfunction createI18n(options = {}, VueI18nLegacy) {\n  const __legacyMode = __VUE_I18N_LEGACY_API__ && isBoolean(options.legacy) ? options.legacy : __VUE_I18N_LEGACY_API__;\n  const __globalInjection = isBoolean(options.globalInjection) ? options.globalInjection : true;\n  const __allowComposition = __VUE_I18N_LEGACY_API__ && __legacyMode ? !!options.allowComposition : true;\n  const __instances = /* @__PURE__ */ new Map();\n  const [globalScope, __global] = createGlobal(options, __legacyMode);\n  const symbol = makeSymbol(true ? \"vue-i18n\" : \"\");\n  function __getInstance(component) {\n    return __instances.get(component) || null;\n  }\n  function __setInstance(component, instance) {\n    __instances.set(component, instance);\n  }\n  function __deleteInstance(component) {\n    __instances.delete(component);\n  }\n  {\n    const i18n = {\n      get mode() {\n        return __VUE_I18N_LEGACY_API__ && __legacyMode ? \"legacy\" : \"composition\";\n      },\n      get allowComposition() {\n        return __allowComposition;\n      },\n      async install(app, ...options2) {\n        if (true) {\n          app.__VUE_I18N__ = i18n;\n        }\n        app.__VUE_I18N_SYMBOL__ = symbol;\n        app.provide(app.__VUE_I18N_SYMBOL__, i18n);\n        if (!__legacyMode && __globalInjection) {\n          injectGlobalFields(app, i18n.global);\n        }\n        if (__VUE_I18N_FULL_INSTALL__) {\n          apply(app, i18n, ...options2);\n        }\n        if (__VUE_I18N_LEGACY_API__ && __legacyMode) {\n          app.mixin(defineMixin(__global, __global.__composer, i18n));\n        }\n        const unmountApp = app.unmount;\n        app.unmount = () => {\n          i18n.dispose();\n          unmountApp();\n        };\n        if (true) {\n          const ret = await enableDevTools(app, i18n);\n          if (!ret) {\n            throw createI18nError(I18nErrorCodes.CANNOT_SETUP_VUE_DEVTOOLS_PLUGIN);\n          }\n          const emitter = createEmitter();\n          if (__legacyMode) {\n            const _vueI18n = __global;\n            _vueI18n.__enableEmitter && _vueI18n.__enableEmitter(emitter);\n          } else {\n            const _composer = __global;\n            _composer[EnableEmitter] && _composer[EnableEmitter](emitter);\n          }\n          emitter.on(\"*\", addTimelineEvent);\n        }\n      },\n      get global() {\n        return __global;\n      },\n      dispose() {\n        globalScope.stop();\n      },\n      __instances,\n      __getInstance,\n      __setInstance,\n      __deleteInstance\n    };\n    return i18n;\n  }\n}\nfunction useI18n(options = {}) {\n  const instance = getCurrentInstance();\n  if (instance == null) {\n    throw createI18nError(I18nErrorCodes.MUST_BE_CALL_SETUP_TOP);\n  }\n  if (!instance.isCE && instance.appContext.app != null && !instance.appContext.app.__VUE_I18N_SYMBOL__) {\n    throw createI18nError(I18nErrorCodes.NOT_INSLALLED);\n  }\n  const i18n = getI18nInstance(instance);\n  const global2 = getGlobalComposer(i18n);\n  const componentOptions = getComponentOptions(instance);\n  const scope = getScope(options, componentOptions);\n  if (__VUE_I18N_LEGACY_API__) {\n    if (i18n.mode === \"legacy\" && !options.__useComponent) {\n      if (!i18n.allowComposition) {\n        throw createI18nError(I18nErrorCodes.NOT_AVAILABLE_IN_LEGACY_MODE);\n      }\n      return useI18nForLegacy(instance, scope, global2, options);\n    }\n  }\n  if (scope === \"global\") {\n    adjustI18nResources(global2, options, componentOptions);\n    return global2;\n  }\n  if (scope === \"parent\") {\n    let composer2 = getComposer(i18n, instance, options.__useComponent);\n    if (composer2 == null) {\n      if (true) {\n        warn(getWarnMessage2(I18nWarnCodes.NOT_FOUND_PARENT_SCOPE));\n      }\n      composer2 = global2;\n    }\n    return composer2;\n  }\n  const i18nInternal = i18n;\n  let composer = i18nInternal.__getInstance(instance);\n  if (composer == null) {\n    const composerOptions = assign({}, options);\n    if (\"__i18n\" in componentOptions) {\n      composerOptions.__i18n = componentOptions.__i18n;\n    }\n    if (global2) {\n      composerOptions.__root = global2;\n    }\n    composer = createComposer(composerOptions);\n    setupLifeCycle(i18nInternal, instance, composer);\n    i18nInternal.__setInstance(instance, composer);\n  }\n  return composer;\n}\nvar castToVueI18n = (i18n) => {\n  if (!(__VUE_I18N_BRIDGE__ in i18n)) {\n    throw createI18nError(I18nErrorCodes.NOT_COMPATIBLE_LEGACY_VUE_I18N);\n  }\n  return i18n;\n};\nfunction createGlobal(options, legacyMode, VueI18nLegacy) {\n  const scope = effectScope();\n  {\n    const obj = __VUE_I18N_LEGACY_API__ && legacyMode ? scope.run(() => createVueI18n(options)) : scope.run(() => createComposer(options));\n    if (obj == null) {\n      throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);\n    }\n    return [scope, obj];\n  }\n}\nfunction getI18nInstance(instance) {\n  {\n    const i18n = inject(!instance.isCE ? instance.appContext.app.__VUE_I18N_SYMBOL__ : I18nInjectionKey);\n    if (!i18n) {\n      throw createI18nError(!instance.isCE ? I18nErrorCodes.UNEXPECTED_ERROR : I18nErrorCodes.NOT_INSLALLED_WITH_PROVIDE);\n    }\n    return i18n;\n  }\n}\nfunction getScope(options, componentOptions) {\n  return isEmptyObject(options) ? \"__i18n\" in componentOptions ? \"local\" : \"global\" : !options.useScope ? \"local\" : options.useScope;\n}\nfunction getGlobalComposer(i18n) {\n  return i18n.mode === \"composition\" ? i18n.global : i18n.global.__composer;\n}\nfunction getComposer(i18n, target, useComponent = false) {\n  let composer = null;\n  const root = target.root;\n  let current = target.parent;\n  while (current != null) {\n    const i18nInternal = i18n;\n    if (i18n.mode === \"composition\") {\n      composer = i18nInternal.__getInstance(current);\n    } else {\n      if (__VUE_I18N_LEGACY_API__) {\n        const vueI18n = i18nInternal.__getInstance(current);\n        if (vueI18n != null) {\n          composer = vueI18n.__composer;\n          if (useComponent && composer && !composer[InejctWithOption]) {\n            composer = null;\n          }\n        }\n      }\n    }\n    if (composer != null) {\n      break;\n    }\n    if (root === current) {\n      break;\n    }\n    current = current.parent;\n  }\n  return composer;\n}\nfunction setupLifeCycle(i18n, target, composer) {\n  let emitter = null;\n  {\n    onMounted(() => {\n      if (target.vnode.el) {\n        target.vnode.el.__VUE_I18N__ = composer;\n        emitter = createEmitter();\n        const _composer = composer;\n        _composer[EnableEmitter] && _composer[EnableEmitter](emitter);\n        emitter.on(\"*\", addTimelineEvent);\n      }\n    }, target);\n    onUnmounted(() => {\n      if (target.vnode.el && target.vnode.el.__VUE_I18N__) {\n        emitter && emitter.off(\"*\", addTimelineEvent);\n        const _composer = composer;\n        _composer[DisableEmitter] && _composer[DisableEmitter]();\n        delete target.vnode.el.__VUE_I18N__;\n      }\n      i18n.__deleteInstance(target);\n    }, target);\n  }\n}\nfunction useI18nForLegacy(instance, scope, root, options = {}) {\n  const isLocale = scope === \"local\";\n  const _composer = shallowRef(null);\n  if (isLocale && instance.proxy && !(instance.proxy.$options.i18n || instance.proxy.$options.__i18n)) {\n    throw createI18nError(I18nErrorCodes.MUST_DEFINE_I18N_OPTION_IN_ALLOW_COMPOSITION);\n  }\n  const _inheritLocale = isBoolean(options.inheritLocale) ? options.inheritLocale : true;\n  const _locale = ref(\n    isLocale && _inheritLocale ? root.locale.value : isString(options.locale) ? options.locale : DEFAULT_LOCALE\n  );\n  const _fallbackLocale = ref(\n    isLocale && _inheritLocale ? root.fallbackLocale.value : isString(options.fallbackLocale) || isArray(options.fallbackLocale) || isPlainObject(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : _locale.value\n  );\n  const _messages = ref(getLocaleMessages(_locale.value, options));\n  const _datetimeFormats = ref(isPlainObject(options.datetimeFormats) ? options.datetimeFormats : { [_locale.value]: {} });\n  const _numberFormats = ref(isPlainObject(options.numberFormats) ? options.numberFormats : { [_locale.value]: {} });\n  const _missingWarn = isLocale ? root.missingWarn : isBoolean(options.missingWarn) || isRegExp(options.missingWarn) ? options.missingWarn : true;\n  const _fallbackWarn = isLocale ? root.fallbackWarn : isBoolean(options.fallbackWarn) || isRegExp(options.fallbackWarn) ? options.fallbackWarn : true;\n  const _fallbackRoot = isLocale ? root.fallbackRoot : isBoolean(options.fallbackRoot) ? options.fallbackRoot : true;\n  const _fallbackFormat = !!options.fallbackFormat;\n  const _missing = isFunction(options.missing) ? options.missing : null;\n  const _postTranslation = isFunction(options.postTranslation) ? options.postTranslation : null;\n  const _warnHtmlMessage = isLocale ? root.warnHtmlMessage : isBoolean(options.warnHtmlMessage) ? options.warnHtmlMessage : true;\n  const _escapeParameter = !!options.escapeParameter;\n  const _modifiers = isLocale ? root.modifiers : isPlainObject(options.modifiers) ? options.modifiers : {};\n  const _pluralRules = options.pluralRules || isLocale && root.pluralRules;\n  function trackReactivityValues() {\n    return [\n      _locale.value,\n      _fallbackLocale.value,\n      _messages.value,\n      _datetimeFormats.value,\n      _numberFormats.value\n    ];\n  }\n  const locale = computed({\n    get: () => {\n      return _composer.value ? _composer.value.locale.value : _locale.value;\n    },\n    set: (val) => {\n      if (_composer.value) {\n        _composer.value.locale.value = val;\n      }\n      _locale.value = val;\n    }\n  });\n  const fallbackLocale = computed({\n    get: () => {\n      return _composer.value ? _composer.value.fallbackLocale.value : _fallbackLocale.value;\n    },\n    set: (val) => {\n      if (_composer.value) {\n        _composer.value.fallbackLocale.value = val;\n      }\n      _fallbackLocale.value = val;\n    }\n  });\n  const messages = computed(() => {\n    if (_composer.value) {\n      return _composer.value.messages.value;\n    } else {\n      return _messages.value;\n    }\n  });\n  const datetimeFormats = computed(() => _datetimeFormats.value);\n  const numberFormats = computed(() => _numberFormats.value);\n  function getPostTranslationHandler() {\n    return _composer.value ? _composer.value.getPostTranslationHandler() : _postTranslation;\n  }\n  function setPostTranslationHandler(handler) {\n    if (_composer.value) {\n      _composer.value.setPostTranslationHandler(handler);\n    }\n  }\n  function getMissingHandler() {\n    return _composer.value ? _composer.value.getMissingHandler() : _missing;\n  }\n  function setMissingHandler(handler) {\n    if (_composer.value) {\n      _composer.value.setMissingHandler(handler);\n    }\n  }\n  function warpWithDeps(fn) {\n    trackReactivityValues();\n    return fn();\n  }\n  function t(...args) {\n    return _composer.value ? warpWithDeps(() => Reflect.apply(_composer.value.t, null, [...args])) : warpWithDeps(() => \"\");\n  }\n  function rt(...args) {\n    return _composer.value ? Reflect.apply(_composer.value.rt, null, [...args]) : \"\";\n  }\n  function d(...args) {\n    return _composer.value ? warpWithDeps(() => Reflect.apply(_composer.value.d, null, [...args])) : warpWithDeps(() => \"\");\n  }\n  function n(...args) {\n    return _composer.value ? warpWithDeps(() => Reflect.apply(_composer.value.n, null, [...args])) : warpWithDeps(() => \"\");\n  }\n  function tm(key) {\n    return _composer.value ? _composer.value.tm(key) : {};\n  }\n  function te(key, locale2) {\n    return _composer.value ? _composer.value.te(key, locale2) : false;\n  }\n  function getLocaleMessage(locale2) {\n    return _composer.value ? _composer.value.getLocaleMessage(locale2) : {};\n  }\n  function setLocaleMessage(locale2, message) {\n    if (_composer.value) {\n      _composer.value.setLocaleMessage(locale2, message);\n      _messages.value[locale2] = message;\n    }\n  }\n  function mergeLocaleMessage(locale2, message) {\n    if (_composer.value) {\n      _composer.value.mergeLocaleMessage(locale2, message);\n    }\n  }\n  function getDateTimeFormat(locale2) {\n    return _composer.value ? _composer.value.getDateTimeFormat(locale2) : {};\n  }\n  function setDateTimeFormat(locale2, format2) {\n    if (_composer.value) {\n      _composer.value.setDateTimeFormat(locale2, format2);\n      _datetimeFormats.value[locale2] = format2;\n    }\n  }\n  function mergeDateTimeFormat(locale2, format2) {\n    if (_composer.value) {\n      _composer.value.mergeDateTimeFormat(locale2, format2);\n    }\n  }\n  function getNumberFormat(locale2) {\n    return _composer.value ? _composer.value.getNumberFormat(locale2) : {};\n  }\n  function setNumberFormat(locale2, format2) {\n    if (_composer.value) {\n      _composer.value.setNumberFormat(locale2, format2);\n      _numberFormats.value[locale2] = format2;\n    }\n  }\n  function mergeNumberFormat(locale2, format2) {\n    if (_composer.value) {\n      _composer.value.mergeNumberFormat(locale2, format2);\n    }\n  }\n  const wrapper = {\n    get id() {\n      return _composer.value ? _composer.value.id : -1;\n    },\n    locale,\n    fallbackLocale,\n    messages,\n    datetimeFormats,\n    numberFormats,\n    get inheritLocale() {\n      return _composer.value ? _composer.value.inheritLocale : _inheritLocale;\n    },\n    set inheritLocale(val) {\n      if (_composer.value) {\n        _composer.value.inheritLocale = val;\n      }\n    },\n    get availableLocales() {\n      return _composer.value ? _composer.value.availableLocales : Object.keys(_messages.value);\n    },\n    get modifiers() {\n      return _composer.value ? _composer.value.modifiers : _modifiers;\n    },\n    get pluralRules() {\n      return _composer.value ? _composer.value.pluralRules : _pluralRules;\n    },\n    get isGlobal() {\n      return _composer.value ? _composer.value.isGlobal : false;\n    },\n    get missingWarn() {\n      return _composer.value ? _composer.value.missingWarn : _missingWarn;\n    },\n    set missingWarn(val) {\n      if (_composer.value) {\n        _composer.value.missingWarn = val;\n      }\n    },\n    get fallbackWarn() {\n      return _composer.value ? _composer.value.fallbackWarn : _fallbackWarn;\n    },\n    set fallbackWarn(val) {\n      if (_composer.value) {\n        _composer.value.missingWarn = val;\n      }\n    },\n    get fallbackRoot() {\n      return _composer.value ? _composer.value.fallbackRoot : _fallbackRoot;\n    },\n    set fallbackRoot(val) {\n      if (_composer.value) {\n        _composer.value.fallbackRoot = val;\n      }\n    },\n    get fallbackFormat() {\n      return _composer.value ? _composer.value.fallbackFormat : _fallbackFormat;\n    },\n    set fallbackFormat(val) {\n      if (_composer.value) {\n        _composer.value.fallbackFormat = val;\n      }\n    },\n    get warnHtmlMessage() {\n      return _composer.value ? _composer.value.warnHtmlMessage : _warnHtmlMessage;\n    },\n    set warnHtmlMessage(val) {\n      if (_composer.value) {\n        _composer.value.warnHtmlMessage = val;\n      }\n    },\n    get escapeParameter() {\n      return _composer.value ? _composer.value.escapeParameter : _escapeParameter;\n    },\n    set escapeParameter(val) {\n      if (_composer.value) {\n        _composer.value.escapeParameter = val;\n      }\n    },\n    t,\n    getPostTranslationHandler,\n    setPostTranslationHandler,\n    getMissingHandler,\n    setMissingHandler,\n    rt,\n    d,\n    n,\n    tm,\n    te,\n    getLocaleMessage,\n    setLocaleMessage,\n    mergeLocaleMessage,\n    getDateTimeFormat,\n    setDateTimeFormat,\n    mergeDateTimeFormat,\n    getNumberFormat,\n    setNumberFormat,\n    mergeNumberFormat\n  };\n  function sync(composer) {\n    composer.locale.value = _locale.value;\n    composer.fallbackLocale.value = _fallbackLocale.value;\n    Object.keys(_messages.value).forEach((locale2) => {\n      composer.mergeLocaleMessage(locale2, _messages.value[locale2]);\n    });\n    Object.keys(_datetimeFormats.value).forEach((locale2) => {\n      composer.mergeDateTimeFormat(locale2, _datetimeFormats.value[locale2]);\n    });\n    Object.keys(_numberFormats.value).forEach((locale2) => {\n      composer.mergeNumberFormat(locale2, _numberFormats.value[locale2]);\n    });\n    composer.escapeParameter = _escapeParameter;\n    composer.fallbackFormat = _fallbackFormat;\n    composer.fallbackRoot = _fallbackRoot;\n    composer.fallbackWarn = _fallbackWarn;\n    composer.missingWarn = _missingWarn;\n    composer.warnHtmlMessage = _warnHtmlMessage;\n  }\n  onBeforeMount(() => {\n    if (instance.proxy == null || instance.proxy.$i18n == null) {\n      throw createI18nError(I18nErrorCodes.NOT_AVAILABLE_COMPOSITION_IN_LEGACY);\n    }\n    const composer = _composer.value = instance.proxy.$i18n.__composer;\n    if (scope === \"global\") {\n      _locale.value = composer.locale.value;\n      _fallbackLocale.value = composer.fallbackLocale.value;\n      _messages.value = composer.messages.value;\n      _datetimeFormats.value = composer.datetimeFormats.value;\n      _numberFormats.value = composer.numberFormats.value;\n    } else if (isLocale) {\n      sync(composer);\n    }\n  });\n  return wrapper;\n}\nvar globalExportProps = [\n  \"locale\",\n  \"fallbackLocale\",\n  \"availableLocales\"\n];\nvar globalExportMethods = [\"t\", \"rt\", \"d\", \"n\", \"tm\"];\nfunction injectGlobalFields(app, composer) {\n  const i18n = /* @__PURE__ */ Object.create(null);\n  globalExportProps.forEach((prop) => {\n    const desc = Object.getOwnPropertyDescriptor(composer, prop);\n    if (!desc) {\n      throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);\n    }\n    const wrap = isRef(desc.value) ? {\n      get() {\n        return desc.value.value;\n      },\n      set(val) {\n        desc.value.value = val;\n      }\n    } : {\n      get() {\n        return desc.get && desc.get();\n      }\n    };\n    Object.defineProperty(i18n, prop, wrap);\n  });\n  app.config.globalProperties.$i18n = i18n;\n  globalExportMethods.forEach((method) => {\n    const desc = Object.getOwnPropertyDescriptor(composer, method);\n    if (!desc || !desc.value) {\n      throw createI18nError(I18nErrorCodes.UNEXPECTED_ERROR);\n    }\n    Object.defineProperty(app.config.globalProperties, `$${method}`, desc);\n  });\n}\nregisterMessageCompiler(compileToFunction);\nregisterMessageResolver(resolveValue);\nregisterLocaleFallbacker(fallbackWithLocaleChain);\n{\n  initFeatureFlags();\n}\nif (true) {\n  const target = getGlobalThis();\n  target.__INTLIFY__ = true;\n  setDevToolsHook(target.__INTLIFY_DEVTOOLS_GLOBAL_HOOK__);\n}\nif (true)\n  ;\nexport {\n  DatetimeFormat,\n  I18nInjectionKey,\n  NumberFormat,\n  Translation,\n  VERSION2 as VERSION,\n  castToVueI18n,\n  createI18n,\n  useI18n,\n  vTDirective\n};\n/*!\n  * core-base v9.2.2\n  * (c) 2022 kazuya kawaguchi\n  * Released under the MIT License.\n  */\n/*!\n  * devtools-if v9.2.2\n  * (c) 2022 kazuya kawaguchi\n  * Released under the MIT License.\n  */\n/*!\n  * message-compiler v9.2.2\n  * (c) 2022 kazuya kawaguchi\n  * Released under the MIT License.\n  */\n/*!\n  * shared v9.2.2\n  * (c) 2022 kazuya kawaguchi\n  * Released under the MIT License.\n  */\n/*!\n  * vue-devtools v9.2.2\n  * (c) 2022 kazuya kawaguchi\n  * Released under the MIT License.\n  */\n/*!\n  * vue-i18n v9.2.2\n  * (c) 2022 kazuya kawaguchi\n  * Released under the MIT License.\n  */\n//# sourceMappingURL=vue-i18n.js.map\n","start":1663662532177,"end":1663662532180,"order":"normal"}]}
