{"resolvedId":"D:/Web/gms_forntend/node_modules/.vite/deps/vite-plugin-mock_es_createProdMockServer.js?v=ce57fdae","transforms":[{"name":"vite:optimized-deps","result":"import {\n  require_mock\n} from \"./chunk-3JTTX4QD.js\";\nimport {\n  __toESM\n} from \"./chunk-TWLJ45QX.js\";\n\n// node_modules/.pnpm/vite-plugin-mock@2.9.6_mockjs@1.1.0+vite@3.1.0/node_modules/vite-plugin-mock/es/createProdMockServer.js\nvar import_mockjs = __toESM(require_mock());\n\n// node_modules/.pnpm/path-to-regexp@6.2.1/node_modules/path-to-regexp/dist.es2015/index.js\nfunction lexer(str) {\n  var tokens = [];\n  var i = 0;\n  while (i < str.length) {\n    var char = str[i];\n    if (char === \"*\" || char === \"+\" || char === \"?\") {\n      tokens.push({ type: \"MODIFIER\", index: i, value: str[i++] });\n      continue;\n    }\n    if (char === \"\\\\\") {\n      tokens.push({ type: \"ESCAPED_CHAR\", index: i++, value: str[i++] });\n      continue;\n    }\n    if (char === \"{\") {\n      tokens.push({ type: \"OPEN\", index: i, value: str[i++] });\n      continue;\n    }\n    if (char === \"}\") {\n      tokens.push({ type: \"CLOSE\", index: i, value: str[i++] });\n      continue;\n    }\n    if (char === \":\") {\n      var name = \"\";\n      var j = i + 1;\n      while (j < str.length) {\n        var code = str.charCodeAt(j);\n        if (code >= 48 && code <= 57 || code >= 65 && code <= 90 || code >= 97 && code <= 122 || code === 95) {\n          name += str[j++];\n          continue;\n        }\n        break;\n      }\n      if (!name)\n        throw new TypeError(\"Missing parameter name at \".concat(i));\n      tokens.push({ type: \"NAME\", index: i, value: name });\n      i = j;\n      continue;\n    }\n    if (char === \"(\") {\n      var count = 1;\n      var pattern = \"\";\n      var j = i + 1;\n      if (str[j] === \"?\") {\n        throw new TypeError('Pattern cannot start with \"?\" at '.concat(j));\n      }\n      while (j < str.length) {\n        if (str[j] === \"\\\\\") {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n        if (str[j] === \")\") {\n          count--;\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === \"(\") {\n          count++;\n          if (str[j + 1] !== \"?\") {\n            throw new TypeError(\"Capturing groups are not allowed at \".concat(j));\n          }\n        }\n        pattern += str[j++];\n      }\n      if (count)\n        throw new TypeError(\"Unbalanced pattern at \".concat(i));\n      if (!pattern)\n        throw new TypeError(\"Missing pattern at \".concat(i));\n      tokens.push({ type: \"PATTERN\", index: i, value: pattern });\n      i = j;\n      continue;\n    }\n    tokens.push({ type: \"CHAR\", index: i, value: str[i++] });\n  }\n  tokens.push({ type: \"END\", index: i, value: \"\" });\n  return tokens;\n}\nfunction parse(str, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var tokens = lexer(str);\n  var _a = options.prefixes, prefixes = _a === void 0 ? \"./\" : _a;\n  var defaultPattern = \"[^\".concat(escapeString(options.delimiter || \"/#?\"), \"]+?\");\n  var result = [];\n  var key = 0;\n  var i = 0;\n  var path = \"\";\n  var tryConsume = function(type) {\n    if (i < tokens.length && tokens[i].type === type)\n      return tokens[i++].value;\n  };\n  var mustConsume = function(type) {\n    var value2 = tryConsume(type);\n    if (value2 !== void 0)\n      return value2;\n    var _a2 = tokens[i], nextType = _a2.type, index = _a2.index;\n    throw new TypeError(\"Unexpected \".concat(nextType, \" at \").concat(index, \", expected \").concat(type));\n  };\n  var consumeText = function() {\n    var result2 = \"\";\n    var value2;\n    while (value2 = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\")) {\n      result2 += value2;\n    }\n    return result2;\n  };\n  while (i < tokens.length) {\n    var char = tryConsume(\"CHAR\");\n    var name = tryConsume(\"NAME\");\n    var pattern = tryConsume(\"PATTERN\");\n    if (name || pattern) {\n      var prefix = char || \"\";\n      if (prefixes.indexOf(prefix) === -1) {\n        path += prefix;\n        prefix = \"\";\n      }\n      if (path) {\n        result.push(path);\n        path = \"\";\n      }\n      result.push({\n        name: name || key++,\n        prefix,\n        suffix: \"\",\n        pattern: pattern || defaultPattern,\n        modifier: tryConsume(\"MODIFIER\") || \"\"\n      });\n      continue;\n    }\n    var value = char || tryConsume(\"ESCAPED_CHAR\");\n    if (value) {\n      path += value;\n      continue;\n    }\n    if (path) {\n      result.push(path);\n      path = \"\";\n    }\n    var open = tryConsume(\"OPEN\");\n    if (open) {\n      var prefix = consumeText();\n      var name_1 = tryConsume(\"NAME\") || \"\";\n      var pattern_1 = tryConsume(\"PATTERN\") || \"\";\n      var suffix = consumeText();\n      mustConsume(\"CLOSE\");\n      result.push({\n        name: name_1 || (pattern_1 ? key++ : \"\"),\n        pattern: name_1 && !pattern_1 ? defaultPattern : pattern_1,\n        prefix,\n        suffix,\n        modifier: tryConsume(\"MODIFIER\") || \"\"\n      });\n      continue;\n    }\n    mustConsume(\"END\");\n  }\n  return result;\n}\nfunction escapeString(str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\nfunction flags(options) {\n  return options && options.sensitive ? \"\" : \"i\";\n}\nfunction regexpToRegexp(path, keys) {\n  if (!keys)\n    return path;\n  var groupsRegex = /\\((?:\\?<(.*?)>)?(?!\\?)/g;\n  var index = 0;\n  var execResult = groupsRegex.exec(path.source);\n  while (execResult) {\n    keys.push({\n      name: execResult[1] || index++,\n      prefix: \"\",\n      suffix: \"\",\n      modifier: \"\",\n      pattern: \"\"\n    });\n    execResult = groupsRegex.exec(path.source);\n  }\n  return path;\n}\nfunction arrayToRegexp(paths, keys, options) {\n  var parts = paths.map(function(path) {\n    return pathToRegexp(path, keys, options).source;\n  });\n  return new RegExp(\"(?:\".concat(parts.join(\"|\"), \")\"), flags(options));\n}\nfunction stringToRegexp(path, keys, options) {\n  return tokensToRegexp(parse(path, options), keys, options);\n}\nfunction tokensToRegexp(tokens, keys, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _a = options.strict, strict = _a === void 0 ? false : _a, _b = options.start, start = _b === void 0 ? true : _b, _c = options.end, end = _c === void 0 ? true : _c, _d = options.encode, encode = _d === void 0 ? function(x) {\n    return x;\n  } : _d, _e = options.delimiter, delimiter = _e === void 0 ? \"/#?\" : _e, _f = options.endsWith, endsWith = _f === void 0 ? \"\" : _f;\n  var endsWithRe = \"[\".concat(escapeString(endsWith), \"]|$\");\n  var delimiterRe = \"[\".concat(escapeString(delimiter), \"]\");\n  var route = start ? \"^\" : \"\";\n  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n    var token = tokens_1[_i];\n    if (typeof token === \"string\") {\n      route += escapeString(encode(token));\n    } else {\n      var prefix = escapeString(encode(token.prefix));\n      var suffix = escapeString(encode(token.suffix));\n      if (token.pattern) {\n        if (keys)\n          keys.push(token);\n        if (prefix || suffix) {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            var mod = token.modifier === \"*\" ? \"?\" : \"\";\n            route += \"(?:\".concat(prefix, \"((?:\").concat(token.pattern, \")(?:\").concat(suffix).concat(prefix, \"(?:\").concat(token.pattern, \"))*)\").concat(suffix, \")\").concat(mod);\n          } else {\n            route += \"(?:\".concat(prefix, \"(\").concat(token.pattern, \")\").concat(suffix, \")\").concat(token.modifier);\n          }\n        } else {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            route += \"((?:\".concat(token.pattern, \")\").concat(token.modifier, \")\");\n          } else {\n            route += \"(\".concat(token.pattern, \")\").concat(token.modifier);\n          }\n        }\n      } else {\n        route += \"(?:\".concat(prefix).concat(suffix, \")\").concat(token.modifier);\n      }\n    }\n  }\n  if (end) {\n    if (!strict)\n      route += \"\".concat(delimiterRe, \"?\");\n    route += !options.endsWith ? \"$\" : \"(?=\".concat(endsWithRe, \")\");\n  } else {\n    var endToken = tokens[tokens.length - 1];\n    var isEndDelimited = typeof endToken === \"string\" ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1 : endToken === void 0;\n    if (!strict) {\n      route += \"(?:\".concat(delimiterRe, \"(?=\").concat(endsWithRe, \"))?\");\n    }\n    if (!isEndDelimited) {\n      route += \"(?=\".concat(delimiterRe, \"|\").concat(endsWithRe, \")\");\n    }\n  }\n  return new RegExp(route, flags(options));\n}\nfunction pathToRegexp(path, keys, options) {\n  if (path instanceof RegExp)\n    return regexpToRegexp(path, keys);\n  if (Array.isArray(path))\n    return arrayToRegexp(path, keys, options);\n  return stringToRegexp(path, keys, options);\n}\n\n// node_modules/.pnpm/vite-plugin-mock@2.9.6_mockjs@1.1.0+vite@3.1.0/node_modules/vite-plugin-mock/es/createProdMockServer.js\nvar Mock = import_mockjs.default;\nfunction createProdMockServer(mockList) {\n  Mock.XHR.prototype.__send = Mock.XHR.prototype.send;\n  Mock.XHR.prototype.send = function() {\n    if (this.custom.xhr) {\n      this.custom.xhr.withCredentials = this.withCredentials || false;\n      if (this.responseType) {\n        this.custom.xhr.responseType = this.responseType;\n      }\n    }\n    if (this.custom.requestHeaders) {\n      const headers = {};\n      for (let k in this.custom.requestHeaders) {\n        headers[k.toString().toLowerCase()] = this.custom.requestHeaders[k];\n      }\n      this.custom.options = Object.assign({}, this.custom.options, { headers });\n    }\n    this.__send.apply(this, arguments);\n  };\n  Mock.XHR.prototype.proxy_open = Mock.XHR.prototype.open;\n  Mock.XHR.prototype.open = function() {\n    let responseType = this.responseType;\n    this.proxy_open(...arguments);\n    if (this.custom.xhr) {\n      if (responseType) {\n        this.custom.xhr.responseType = responseType;\n      }\n    }\n  };\n  for (const { url, method, response, timeout } of mockList) {\n    __setupMock__(timeout);\n    Mock.mock(pathToRegexp(url, void 0, { end: false }), method || \"get\", __XHR2ExpressReqWrapper__(response));\n  }\n}\nfunction __param2Obj__(url) {\n  const search = url.split(\"?\")[1];\n  if (!search) {\n    return {};\n  }\n  return JSON.parse('{\"' + decodeURIComponent(search).replace(/\"/g, '\\\\\"').replace(/&/g, '\",\"').replace(/=/g, '\":\"').replace(/\\+/g, \" \") + '\"}');\n}\nfunction __XHR2ExpressReqWrapper__(handle) {\n  return function(options) {\n    let result = null;\n    if (typeof handle === \"function\") {\n      const { body, type, url, headers } = options;\n      let b = body;\n      try {\n        b = JSON.parse(body);\n      } catch {\n      }\n      result = handle({\n        method: type,\n        body: b,\n        query: __param2Obj__(url),\n        headers\n      });\n    } else {\n      result = handle;\n    }\n    return Mock.mock(result);\n  };\n}\nfunction __setupMock__(timeout = 0) {\n  timeout && Mock.setup({\n    timeout\n  });\n}\nexport {\n  createProdMockServer\n};\n//# sourceMappingURL=vite-plugin-mock_es_createProdMockServer.js.map\n","start":1663662531705,"end":1663662532165},{"name":"vite-plugin-use-modules","result":"import {\n  require_mock\n} from \"./chunk-3JTTX4QD.js\";\nimport {\n  __toESM\n} from \"./chunk-TWLJ45QX.js\";\n\n// node_modules/.pnpm/vite-plugin-mock@2.9.6_mockjs@1.1.0+vite@3.1.0/node_modules/vite-plugin-mock/es/createProdMockServer.js\nvar import_mockjs = __toESM(require_mock());\n\n// node_modules/.pnpm/path-to-regexp@6.2.1/node_modules/path-to-regexp/dist.es2015/index.js\nfunction lexer(str) {\n  var tokens = [];\n  var i = 0;\n  while (i < str.length) {\n    var char = str[i];\n    if (char === \"*\" || char === \"+\" || char === \"?\") {\n      tokens.push({ type: \"MODIFIER\", index: i, value: str[i++] });\n      continue;\n    }\n    if (char === \"\\\\\") {\n      tokens.push({ type: \"ESCAPED_CHAR\", index: i++, value: str[i++] });\n      continue;\n    }\n    if (char === \"{\") {\n      tokens.push({ type: \"OPEN\", index: i, value: str[i++] });\n      continue;\n    }\n    if (char === \"}\") {\n      tokens.push({ type: \"CLOSE\", index: i, value: str[i++] });\n      continue;\n    }\n    if (char === \":\") {\n      var name = \"\";\n      var j = i + 1;\n      while (j < str.length) {\n        var code = str.charCodeAt(j);\n        if (code >= 48 && code <= 57 || code >= 65 && code <= 90 || code >= 97 && code <= 122 || code === 95) {\n          name += str[j++];\n          continue;\n        }\n        break;\n      }\n      if (!name)\n        throw new TypeError(\"Missing parameter name at \".concat(i));\n      tokens.push({ type: \"NAME\", index: i, value: name });\n      i = j;\n      continue;\n    }\n    if (char === \"(\") {\n      var count = 1;\n      var pattern = \"\";\n      var j = i + 1;\n      if (str[j] === \"?\") {\n        throw new TypeError('Pattern cannot start with \"?\" at '.concat(j));\n      }\n      while (j < str.length) {\n        if (str[j] === \"\\\\\") {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n        if (str[j] === \")\") {\n          count--;\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === \"(\") {\n          count++;\n          if (str[j + 1] !== \"?\") {\n            throw new TypeError(\"Capturing groups are not allowed at \".concat(j));\n          }\n        }\n        pattern += str[j++];\n      }\n      if (count)\n        throw new TypeError(\"Unbalanced pattern at \".concat(i));\n      if (!pattern)\n        throw new TypeError(\"Missing pattern at \".concat(i));\n      tokens.push({ type: \"PATTERN\", index: i, value: pattern });\n      i = j;\n      continue;\n    }\n    tokens.push({ type: \"CHAR\", index: i, value: str[i++] });\n  }\n  tokens.push({ type: \"END\", index: i, value: \"\" });\n  return tokens;\n}\nfunction parse(str, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var tokens = lexer(str);\n  var _a = options.prefixes, prefixes = _a === void 0 ? \"./\" : _a;\n  var defaultPattern = \"[^\".concat(escapeString(options.delimiter || \"/#?\"), \"]+?\");\n  var result = [];\n  var key = 0;\n  var i = 0;\n  var path = \"\";\n  var tryConsume = function(type) {\n    if (i < tokens.length && tokens[i].type === type)\n      return tokens[i++].value;\n  };\n  var mustConsume = function(type) {\n    var value2 = tryConsume(type);\n    if (value2 !== void 0)\n      return value2;\n    var _a2 = tokens[i], nextType = _a2.type, index = _a2.index;\n    throw new TypeError(\"Unexpected \".concat(nextType, \" at \").concat(index, \", expected \").concat(type));\n  };\n  var consumeText = function() {\n    var result2 = \"\";\n    var value2;\n    while (value2 = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\")) {\n      result2 += value2;\n    }\n    return result2;\n  };\n  while (i < tokens.length) {\n    var char = tryConsume(\"CHAR\");\n    var name = tryConsume(\"NAME\");\n    var pattern = tryConsume(\"PATTERN\");\n    if (name || pattern) {\n      var prefix = char || \"\";\n      if (prefixes.indexOf(prefix) === -1) {\n        path += prefix;\n        prefix = \"\";\n      }\n      if (path) {\n        result.push(path);\n        path = \"\";\n      }\n      result.push({\n        name: name || key++,\n        prefix,\n        suffix: \"\",\n        pattern: pattern || defaultPattern,\n        modifier: tryConsume(\"MODIFIER\") || \"\"\n      });\n      continue;\n    }\n    var value = char || tryConsume(\"ESCAPED_CHAR\");\n    if (value) {\n      path += value;\n      continue;\n    }\n    if (path) {\n      result.push(path);\n      path = \"\";\n    }\n    var open = tryConsume(\"OPEN\");\n    if (open) {\n      var prefix = consumeText();\n      var name_1 = tryConsume(\"NAME\") || \"\";\n      var pattern_1 = tryConsume(\"PATTERN\") || \"\";\n      var suffix = consumeText();\n      mustConsume(\"CLOSE\");\n      result.push({\n        name: name_1 || (pattern_1 ? key++ : \"\"),\n        pattern: name_1 && !pattern_1 ? defaultPattern : pattern_1,\n        prefix,\n        suffix,\n        modifier: tryConsume(\"MODIFIER\") || \"\"\n      });\n      continue;\n    }\n    mustConsume(\"END\");\n  }\n  return result;\n}\nfunction escapeString(str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\nfunction flags(options) {\n  return options && options.sensitive ? \"\" : \"i\";\n}\nfunction regexpToRegexp(path, keys) {\n  if (!keys)\n    return path;\n  var groupsRegex = /\\((?:\\?<(.*?)>)?(?!\\?)/g;\n  var index = 0;\n  var execResult = groupsRegex.exec(path.source);\n  while (execResult) {\n    keys.push({\n      name: execResult[1] || index++,\n      prefix: \"\",\n      suffix: \"\",\n      modifier: \"\",\n      pattern: \"\"\n    });\n    execResult = groupsRegex.exec(path.source);\n  }\n  return path;\n}\nfunction arrayToRegexp(paths, keys, options) {\n  var parts = paths.map(function(path) {\n    return pathToRegexp(path, keys, options).source;\n  });\n  return new RegExp(\"(?:\".concat(parts.join(\"|\"), \")\"), flags(options));\n}\nfunction stringToRegexp(path, keys, options) {\n  return tokensToRegexp(parse(path, options), keys, options);\n}\nfunction tokensToRegexp(tokens, keys, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _a = options.strict, strict = _a === void 0 ? false : _a, _b = options.start, start = _b === void 0 ? true : _b, _c = options.end, end = _c === void 0 ? true : _c, _d = options.encode, encode = _d === void 0 ? function(x) {\n    return x;\n  } : _d, _e = options.delimiter, delimiter = _e === void 0 ? \"/#?\" : _e, _f = options.endsWith, endsWith = _f === void 0 ? \"\" : _f;\n  var endsWithRe = \"[\".concat(escapeString(endsWith), \"]|$\");\n  var delimiterRe = \"[\".concat(escapeString(delimiter), \"]\");\n  var route = start ? \"^\" : \"\";\n  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n    var token = tokens_1[_i];\n    if (typeof token === \"string\") {\n      route += escapeString(encode(token));\n    } else {\n      var prefix = escapeString(encode(token.prefix));\n      var suffix = escapeString(encode(token.suffix));\n      if (token.pattern) {\n        if (keys)\n          keys.push(token);\n        if (prefix || suffix) {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            var mod = token.modifier === \"*\" ? \"?\" : \"\";\n            route += \"(?:\".concat(prefix, \"((?:\").concat(token.pattern, \")(?:\").concat(suffix).concat(prefix, \"(?:\").concat(token.pattern, \"))*)\").concat(suffix, \")\").concat(mod);\n          } else {\n            route += \"(?:\".concat(prefix, \"(\").concat(token.pattern, \")\").concat(suffix, \")\").concat(token.modifier);\n          }\n        } else {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            route += \"((?:\".concat(token.pattern, \")\").concat(token.modifier, \")\");\n          } else {\n            route += \"(\".concat(token.pattern, \")\").concat(token.modifier);\n          }\n        }\n      } else {\n        route += \"(?:\".concat(prefix).concat(suffix, \")\").concat(token.modifier);\n      }\n    }\n  }\n  if (end) {\n    if (!strict)\n      route += \"\".concat(delimiterRe, \"?\");\n    route += !options.endsWith ? \"$\" : \"(?=\".concat(endsWithRe, \")\");\n  } else {\n    var endToken = tokens[tokens.length - 1];\n    var isEndDelimited = typeof endToken === \"string\" ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1 : endToken === void 0;\n    if (!strict) {\n      route += \"(?:\".concat(delimiterRe, \"(?=\").concat(endsWithRe, \"))?\");\n    }\n    if (!isEndDelimited) {\n      route += \"(?=\".concat(delimiterRe, \"|\").concat(endsWithRe, \")\");\n    }\n  }\n  return new RegExp(route, flags(options));\n}\nfunction pathToRegexp(path, keys, options) {\n  if (path instanceof RegExp)\n    return regexpToRegexp(path, keys);\n  if (Array.isArray(path))\n    return arrayToRegexp(path, keys, options);\n  return stringToRegexp(path, keys, options);\n}\n\n// node_modules/.pnpm/vite-plugin-mock@2.9.6_mockjs@1.1.0+vite@3.1.0/node_modules/vite-plugin-mock/es/createProdMockServer.js\nvar Mock = import_mockjs.default;\nfunction createProdMockServer(mockList) {\n  Mock.XHR.prototype.__send = Mock.XHR.prototype.send;\n  Mock.XHR.prototype.send = function() {\n    if (this.custom.xhr) {\n      this.custom.xhr.withCredentials = this.withCredentials || false;\n      if (this.responseType) {\n        this.custom.xhr.responseType = this.responseType;\n      }\n    }\n    if (this.custom.requestHeaders) {\n      const headers = {};\n      for (let k in this.custom.requestHeaders) {\n        headers[k.toString().toLowerCase()] = this.custom.requestHeaders[k];\n      }\n      this.custom.options = Object.assign({}, this.custom.options, { headers });\n    }\n    this.__send.apply(this, arguments);\n  };\n  Mock.XHR.prototype.proxy_open = Mock.XHR.prototype.open;\n  Mock.XHR.prototype.open = function() {\n    let responseType = this.responseType;\n    this.proxy_open(...arguments);\n    if (this.custom.xhr) {\n      if (responseType) {\n        this.custom.xhr.responseType = responseType;\n      }\n    }\n  };\n  for (const { url, method, response, timeout } of mockList) {\n    __setupMock__(timeout);\n    Mock.mock(pathToRegexp(url, void 0, { end: false }), method || \"get\", __XHR2ExpressReqWrapper__(response));\n  }\n}\nfunction __param2Obj__(url) {\n  const search = url.split(\"?\")[1];\n  if (!search) {\n    return {};\n  }\n  return JSON.parse('{\"' + decodeURIComponent(search).replace(/\"/g, '\\\\\"').replace(/&/g, '\",\"').replace(/=/g, '\":\"').replace(/\\+/g, \" \") + '\"}');\n}\nfunction __XHR2ExpressReqWrapper__(handle) {\n  return function(options) {\n    let result = null;\n    if (typeof handle === \"function\") {\n      const { body, type, url, headers } = options;\n      let b = body;\n      try {\n        b = JSON.parse(body);\n      } catch {\n      }\n      result = handle({\n        method: type,\n        body: b,\n        query: __param2Obj__(url),\n        headers\n      });\n    } else {\n      result = handle;\n    }\n    return Mock.mock(result);\n  };\n}\nfunction __setupMock__(timeout = 0) {\n  timeout && Mock.setup({\n    timeout\n  });\n}\nexport {\n  createProdMockServer\n};\n//# sourceMappingURL=vite-plugin-mock_es_createProdMockServer.js.map\n","start":1663662532171,"end":1663662532171,"order":"normal"},{"name":"vite:import-analysis","result":"import {\n  require_mock\n} from \"/node_modules/.vite/deps/chunk-3JTTX4QD.js?v=b1656508\";\nimport {\n  __toESM\n} from \"/node_modules/.vite/deps/chunk-TWLJ45QX.js?v=b1656508\";\n\n// node_modules/.pnpm/vite-plugin-mock@2.9.6_mockjs@1.1.0+vite@3.1.0/node_modules/vite-plugin-mock/es/createProdMockServer.js\nvar import_mockjs = __toESM(require_mock());\n\n// node_modules/.pnpm/path-to-regexp@6.2.1/node_modules/path-to-regexp/dist.es2015/index.js\nfunction lexer(str) {\n  var tokens = [];\n  var i = 0;\n  while (i < str.length) {\n    var char = str[i];\n    if (char === \"*\" || char === \"+\" || char === \"?\") {\n      tokens.push({ type: \"MODIFIER\", index: i, value: str[i++] });\n      continue;\n    }\n    if (char === \"\\\\\") {\n      tokens.push({ type: \"ESCAPED_CHAR\", index: i++, value: str[i++] });\n      continue;\n    }\n    if (char === \"{\") {\n      tokens.push({ type: \"OPEN\", index: i, value: str[i++] });\n      continue;\n    }\n    if (char === \"}\") {\n      tokens.push({ type: \"CLOSE\", index: i, value: str[i++] });\n      continue;\n    }\n    if (char === \":\") {\n      var name = \"\";\n      var j = i + 1;\n      while (j < str.length) {\n        var code = str.charCodeAt(j);\n        if (code >= 48 && code <= 57 || code >= 65 && code <= 90 || code >= 97 && code <= 122 || code === 95) {\n          name += str[j++];\n          continue;\n        }\n        break;\n      }\n      if (!name)\n        throw new TypeError(\"Missing parameter name at \".concat(i));\n      tokens.push({ type: \"NAME\", index: i, value: name });\n      i = j;\n      continue;\n    }\n    if (char === \"(\") {\n      var count = 1;\n      var pattern = \"\";\n      var j = i + 1;\n      if (str[j] === \"?\") {\n        throw new TypeError('Pattern cannot start with \"?\" at '.concat(j));\n      }\n      while (j < str.length) {\n        if (str[j] === \"\\\\\") {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n        if (str[j] === \")\") {\n          count--;\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === \"(\") {\n          count++;\n          if (str[j + 1] !== \"?\") {\n            throw new TypeError(\"Capturing groups are not allowed at \".concat(j));\n          }\n        }\n        pattern += str[j++];\n      }\n      if (count)\n        throw new TypeError(\"Unbalanced pattern at \".concat(i));\n      if (!pattern)\n        throw new TypeError(\"Missing pattern at \".concat(i));\n      tokens.push({ type: \"PATTERN\", index: i, value: pattern });\n      i = j;\n      continue;\n    }\n    tokens.push({ type: \"CHAR\", index: i, value: str[i++] });\n  }\n  tokens.push({ type: \"END\", index: i, value: \"\" });\n  return tokens;\n}\nfunction parse(str, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var tokens = lexer(str);\n  var _a = options.prefixes, prefixes = _a === void 0 ? \"./\" : _a;\n  var defaultPattern = \"[^\".concat(escapeString(options.delimiter || \"/#?\"), \"]+?\");\n  var result = [];\n  var key = 0;\n  var i = 0;\n  var path = \"\";\n  var tryConsume = function(type) {\n    if (i < tokens.length && tokens[i].type === type)\n      return tokens[i++].value;\n  };\n  var mustConsume = function(type) {\n    var value2 = tryConsume(type);\n    if (value2 !== void 0)\n      return value2;\n    var _a2 = tokens[i], nextType = _a2.type, index = _a2.index;\n    throw new TypeError(\"Unexpected \".concat(nextType, \" at \").concat(index, \", expected \").concat(type));\n  };\n  var consumeText = function() {\n    var result2 = \"\";\n    var value2;\n    while (value2 = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\")) {\n      result2 += value2;\n    }\n    return result2;\n  };\n  while (i < tokens.length) {\n    var char = tryConsume(\"CHAR\");\n    var name = tryConsume(\"NAME\");\n    var pattern = tryConsume(\"PATTERN\");\n    if (name || pattern) {\n      var prefix = char || \"\";\n      if (prefixes.indexOf(prefix) === -1) {\n        path += prefix;\n        prefix = \"\";\n      }\n      if (path) {\n        result.push(path);\n        path = \"\";\n      }\n      result.push({\n        name: name || key++,\n        prefix,\n        suffix: \"\",\n        pattern: pattern || defaultPattern,\n        modifier: tryConsume(\"MODIFIER\") || \"\"\n      });\n      continue;\n    }\n    var value = char || tryConsume(\"ESCAPED_CHAR\");\n    if (value) {\n      path += value;\n      continue;\n    }\n    if (path) {\n      result.push(path);\n      path = \"\";\n    }\n    var open = tryConsume(\"OPEN\");\n    if (open) {\n      var prefix = consumeText();\n      var name_1 = tryConsume(\"NAME\") || \"\";\n      var pattern_1 = tryConsume(\"PATTERN\") || \"\";\n      var suffix = consumeText();\n      mustConsume(\"CLOSE\");\n      result.push({\n        name: name_1 || (pattern_1 ? key++ : \"\"),\n        pattern: name_1 && !pattern_1 ? defaultPattern : pattern_1,\n        prefix,\n        suffix,\n        modifier: tryConsume(\"MODIFIER\") || \"\"\n      });\n      continue;\n    }\n    mustConsume(\"END\");\n  }\n  return result;\n}\nfunction escapeString(str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\nfunction flags(options) {\n  return options && options.sensitive ? \"\" : \"i\";\n}\nfunction regexpToRegexp(path, keys) {\n  if (!keys)\n    return path;\n  var groupsRegex = /\\((?:\\?<(.*?)>)?(?!\\?)/g;\n  var index = 0;\n  var execResult = groupsRegex.exec(path.source);\n  while (execResult) {\n    keys.push({\n      name: execResult[1] || index++,\n      prefix: \"\",\n      suffix: \"\",\n      modifier: \"\",\n      pattern: \"\"\n    });\n    execResult = groupsRegex.exec(path.source);\n  }\n  return path;\n}\nfunction arrayToRegexp(paths, keys, options) {\n  var parts = paths.map(function(path) {\n    return pathToRegexp(path, keys, options).source;\n  });\n  return new RegExp(\"(?:\".concat(parts.join(\"|\"), \")\"), flags(options));\n}\nfunction stringToRegexp(path, keys, options) {\n  return tokensToRegexp(parse(path, options), keys, options);\n}\nfunction tokensToRegexp(tokens, keys, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _a = options.strict, strict = _a === void 0 ? false : _a, _b = options.start, start = _b === void 0 ? true : _b, _c = options.end, end = _c === void 0 ? true : _c, _d = options.encode, encode = _d === void 0 ? function(x) {\n    return x;\n  } : _d, _e = options.delimiter, delimiter = _e === void 0 ? \"/#?\" : _e, _f = options.endsWith, endsWith = _f === void 0 ? \"\" : _f;\n  var endsWithRe = \"[\".concat(escapeString(endsWith), \"]|$\");\n  var delimiterRe = \"[\".concat(escapeString(delimiter), \"]\");\n  var route = start ? \"^\" : \"\";\n  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n    var token = tokens_1[_i];\n    if (typeof token === \"string\") {\n      route += escapeString(encode(token));\n    } else {\n      var prefix = escapeString(encode(token.prefix));\n      var suffix = escapeString(encode(token.suffix));\n      if (token.pattern) {\n        if (keys)\n          keys.push(token);\n        if (prefix || suffix) {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            var mod = token.modifier === \"*\" ? \"?\" : \"\";\n            route += \"(?:\".concat(prefix, \"((?:\").concat(token.pattern, \")(?:\").concat(suffix).concat(prefix, \"(?:\").concat(token.pattern, \"))*)\").concat(suffix, \")\").concat(mod);\n          } else {\n            route += \"(?:\".concat(prefix, \"(\").concat(token.pattern, \")\").concat(suffix, \")\").concat(token.modifier);\n          }\n        } else {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            route += \"((?:\".concat(token.pattern, \")\").concat(token.modifier, \")\");\n          } else {\n            route += \"(\".concat(token.pattern, \")\").concat(token.modifier);\n          }\n        }\n      } else {\n        route += \"(?:\".concat(prefix).concat(suffix, \")\").concat(token.modifier);\n      }\n    }\n  }\n  if (end) {\n    if (!strict)\n      route += \"\".concat(delimiterRe, \"?\");\n    route += !options.endsWith ? \"$\" : \"(?=\".concat(endsWithRe, \")\");\n  } else {\n    var endToken = tokens[tokens.length - 1];\n    var isEndDelimited = typeof endToken === \"string\" ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1 : endToken === void 0;\n    if (!strict) {\n      route += \"(?:\".concat(delimiterRe, \"(?=\").concat(endsWithRe, \"))?\");\n    }\n    if (!isEndDelimited) {\n      route += \"(?=\".concat(delimiterRe, \"|\").concat(endsWithRe, \")\");\n    }\n  }\n  return new RegExp(route, flags(options));\n}\nfunction pathToRegexp(path, keys, options) {\n  if (path instanceof RegExp)\n    return regexpToRegexp(path, keys);\n  if (Array.isArray(path))\n    return arrayToRegexp(path, keys, options);\n  return stringToRegexp(path, keys, options);\n}\n\n// node_modules/.pnpm/vite-plugin-mock@2.9.6_mockjs@1.1.0+vite@3.1.0/node_modules/vite-plugin-mock/es/createProdMockServer.js\nvar Mock = import_mockjs.default;\nfunction createProdMockServer(mockList) {\n  Mock.XHR.prototype.__send = Mock.XHR.prototype.send;\n  Mock.XHR.prototype.send = function() {\n    if (this.custom.xhr) {\n      this.custom.xhr.withCredentials = this.withCredentials || false;\n      if (this.responseType) {\n        this.custom.xhr.responseType = this.responseType;\n      }\n    }\n    if (this.custom.requestHeaders) {\n      const headers = {};\n      for (let k in this.custom.requestHeaders) {\n        headers[k.toString().toLowerCase()] = this.custom.requestHeaders[k];\n      }\n      this.custom.options = Object.assign({}, this.custom.options, { headers });\n    }\n    this.__send.apply(this, arguments);\n  };\n  Mock.XHR.prototype.proxy_open = Mock.XHR.prototype.open;\n  Mock.XHR.prototype.open = function() {\n    let responseType = this.responseType;\n    this.proxy_open(...arguments);\n    if (this.custom.xhr) {\n      if (responseType) {\n        this.custom.xhr.responseType = responseType;\n      }\n    }\n  };\n  for (const { url, method, response, timeout } of mockList) {\n    __setupMock__(timeout);\n    Mock.mock(pathToRegexp(url, void 0, { end: false }), method || \"get\", __XHR2ExpressReqWrapper__(response));\n  }\n}\nfunction __param2Obj__(url) {\n  const search = url.split(\"?\")[1];\n  if (!search) {\n    return {};\n  }\n  return JSON.parse('{\"' + decodeURIComponent(search).replace(/\"/g, '\\\\\"').replace(/&/g, '\",\"').replace(/=/g, '\":\"').replace(/\\+/g, \" \") + '\"}');\n}\nfunction __XHR2ExpressReqWrapper__(handle) {\n  return function(options) {\n    let result = null;\n    if (typeof handle === \"function\") {\n      const { body, type, url, headers } = options;\n      let b = body;\n      try {\n        b = JSON.parse(body);\n      } catch {\n      }\n      result = handle({\n        method: type,\n        body: b,\n        query: __param2Obj__(url),\n        headers\n      });\n    } else {\n      result = handle;\n    }\n    return Mock.mock(result);\n  };\n}\nfunction __setupMock__(timeout = 0) {\n  timeout && Mock.setup({\n    timeout\n  });\n}\nexport {\n  createProdMockServer\n};\n//# sourceMappingURL=vite-plugin-mock_es_createProdMockServer.js.map\n","start":1663662532171,"end":1663662532171,"order":"normal"}]}
