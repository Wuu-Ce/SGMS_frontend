{"resolvedId":"/@windicss/devtools","transforms":[{"name":"vite-plugin-windicss:devtools","result":"// src/client.ts\nfunction post(data) {\n  return fetch(\"/@windicss-devtools-update\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  });\n}\nfunction include(set, v) {\n  for (const i of v)\n    set.add(i);\n}\nconsole.log(\"%c[windicss] devtools support enabled %c\\nread more at https://windicss.org\", \"background:#0ea5e9; color:white; padding: 1px 4px; border-radius: 3px;\", \"\");\nvar visitedClasses = /* @__PURE__ */ new Set();\nvar pendingClasses = /* @__PURE__ */ new Set();\nvar _timer;\nfunction schedule() {\n  if (_timer != null)\n    clearTimeout(_timer);\n  _timer = setTimeout(() => {\n    if (pendingClasses.size) {\n      post({ type: \"add-classes\", data: Array.from(pendingClasses) });\n      include(visitedClasses, pendingClasses);\n      pendingClasses.clear();\n    }\n  }, 10);\n}\nvar mutationObserver = new MutationObserver((mutations) => {\n  mutations.forEach((mutation) => {\n    if (mutation.attributeName === \"class\" && mutation.target) {\n      Array.from(mutation.target.classList || []).forEach((i) => {\n        if (!visitedClasses.has(i))\n          pendingClasses.add(i);\n      });\n      schedule();\n    }\n  });\n});\nmutationObserver.observe(document.documentElement || document.body, {\n  childList: true,\n  subtree: true,\n  attributes: true\n});\n\nimport('virtual:windi-mock-classes')","start":1663662531452,"end":1663662531473},{"name":"vite-plugin-use-modules","result":"// src/client.ts\nfunction post(data) {\n  return fetch(\"/@windicss-devtools-update\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  });\n}\nfunction include(set, v) {\n  for (const i of v)\n    set.add(i);\n}\nconsole.log(\"%c[windicss] devtools support enabled %c\\nread more at https://windicss.org\", \"background:#0ea5e9; color:white; padding: 1px 4px; border-radius: 3px;\", \"\");\nvar visitedClasses = /* @__PURE__ */ new Set();\nvar pendingClasses = /* @__PURE__ */ new Set();\nvar _timer;\nfunction schedule() {\n  if (_timer != null)\n    clearTimeout(_timer);\n  _timer = setTimeout(() => {\n    if (pendingClasses.size) {\n      post({ type: \"add-classes\", data: Array.from(pendingClasses) });\n      include(visitedClasses, pendingClasses);\n      pendingClasses.clear();\n    }\n  }, 10);\n}\nvar mutationObserver = new MutationObserver((mutations) => {\n  mutations.forEach((mutation) => {\n    if (mutation.attributeName === \"class\" && mutation.target) {\n      Array.from(mutation.target.classList || []).forEach((i) => {\n        if (!visitedClasses.has(i))\n          pendingClasses.add(i);\n      });\n      schedule();\n    }\n  });\n});\nmutationObserver.observe(document.documentElement || document.body, {\n  childList: true,\n  subtree: true,\n  attributes: true\n});\n\nimport('virtual:windi-mock-classes')","start":1663662531474,"end":1663662531474,"order":"normal"},{"name":"vite:import-analysis","result":"// src/client.ts\nfunction post(data) {\n  return fetch(\"/@windicss-devtools-update\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  });\n}\nfunction include(set, v) {\n  for (const i of v)\n    set.add(i);\n}\nconsole.log(\"%c[windicss] devtools support enabled %c\\nread more at https://windicss.org\", \"background:#0ea5e9; color:white; padding: 1px 4px; border-radius: 3px;\", \"\");\nvar visitedClasses = /* @__PURE__ */ new Set();\nvar pendingClasses = /* @__PURE__ */ new Set();\nvar _timer;\nfunction schedule() {\n  if (_timer != null)\n    clearTimeout(_timer);\n  _timer = setTimeout(() => {\n    if (pendingClasses.size) {\n      post({ type: \"add-classes\", data: Array.from(pendingClasses) });\n      include(visitedClasses, pendingClasses);\n      pendingClasses.clear();\n    }\n  }, 10);\n}\nvar mutationObserver = new MutationObserver((mutations) => {\n  mutations.forEach((mutation) => {\n    if (mutation.attributeName === \"class\" && mutation.target) {\n      Array.from(mutation.target.classList || []).forEach((i) => {\n        if (!visitedClasses.has(i))\n          pendingClasses.add(i);\n      });\n      schedule();\n    }\n  });\n});\nmutationObserver.observe(document.documentElement || document.body, {\n  childList: true,\n  subtree: true,\n  attributes: true\n});\n\nimport(\"/@windicss/mock-classes\")","start":1663662531474,"end":1663662531476,"order":"normal"}]}
