{"resolvedId":"D:/Web/gms_forntend/presets/shared/mock.ts","transforms":[{"name":"__load__","result":"// @ts-nocheck\r\n/**\r\n * issue: https://github.com/vbenjs/vite-plugin-mock/issues/47\r\n * fix: https://github.com/vbenjs/vite-plugin-mock/issues/47#issuecomment-982724613\r\n */\r\nimport Mock from 'mockjs'\r\n\r\nexport function createFetchSever(mockList: any[]) {\r\n\tif (!window['originFetch']) {\r\n\t\twindow['originFetch'] = window.fetch\r\n\t\twindow.fetch = function (fetchUrl: string, init: any) {\r\n\t\t\tconst currentMock = mockList.find((mi) => fetchUrl.includes(mi.url))\r\n\t\t\tif (currentMock) {\r\n\t\t\t\tconst result = createFetchReturn(currentMock, init)\r\n\t\t\t\treturn result\r\n\t\t\t} else {\r\n\t\t\t\treturn window['originFetch'](fetchUrl, init)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction __param2Obj__(url: string) {\r\n\tconst search = url.split('?')[1]\r\n\tif (!search) {\r\n\t\treturn {}\r\n\t}\r\n\treturn JSON.parse(\r\n\t\t'{\"' +\r\n\t\t\tdecodeURIComponent(search)\r\n\t\t\t\t.replace(/\"/g, '\\\\\"')\r\n\t\t\t\t.replace(/&/g, '\",\"')\r\n\t\t\t\t.replace(/=/g, '\":\"')\r\n\t\t\t\t.replace(/\\+/g, ' ') +\r\n\t\t\t'\"}'\r\n\t)\r\n}\r\n\r\nfunction __Fetch2ExpressReqWrapper__(handle: () => any) {\r\n\treturn function (options: any) {\r\n\t\tlet result = null\r\n\t\tif (typeof handle === 'function') {\r\n\t\t\tconst { body, method, url, headers } = options\r\n\r\n\t\t\tlet b = body\r\n\t\t\tb = JSON.parse(body)\r\n\t\t\tresult = handle({\r\n\t\t\t\tmethod,\r\n\t\t\t\tbody: b,\r\n\t\t\t\tquery: __param2Obj__(url),\r\n\t\t\t\theaders,\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\tresult = handle\r\n\t\t}\r\n\r\n\t\treturn Mock.mock(result)\r\n\t}\r\n}\r\n\r\nconst sleep = (delay = 0) => {\r\n\tif (delay) {\r\n\t\treturn new Promise((resolve) => {\r\n\t\t\tsetTimeout(resolve, delay)\r\n\t\t})\r\n\t}\r\n\treturn null\r\n}\r\n\r\nasync function createFetchReturn(mock: any, init) {\r\n\tconst { timeout, response } = mock\r\n\tconst mockFn = __Fetch2ExpressReqWrapper__(response)\r\n\tconst data = mockFn(init)\r\n\tawait sleep(timeout)\r\n\tconst result = {\r\n\t\tok: true,\r\n\t\tstatus: 200,\r\n\t\tclone() {\r\n\t\t\treturn result\r\n\t\t},\r\n\t\ttext() {\r\n\t\t\treturn Promise.resolve(data)\r\n\t\t},\r\n\t\tjson() {\r\n\t\t\treturn Promise.resolve(data)\r\n\t\t},\r\n\t}\r\n\treturn result\r\n}\r\n","start":1663662531720,"end":1663662531720},{"name":"vite:esbuild","result":"import Mock from \"mockjs\";\nexport function createFetchSever(mockList) {\n  if (!window[\"originFetch\"]) {\n    window[\"originFetch\"] = window.fetch;\n    window.fetch = function(fetchUrl, init) {\n      const currentMock = mockList.find((mi) => fetchUrl.includes(mi.url));\n      if (currentMock) {\n        const result = createFetchReturn(currentMock, init);\n        return result;\n      } else {\n        return window[\"originFetch\"](fetchUrl, init);\n      }\n    };\n  }\n}\nfunction __param2Obj__(url) {\n  const search = url.split(\"?\")[1];\n  if (!search) {\n    return {};\n  }\n  return JSON.parse(\n    '{\"' + decodeURIComponent(search).replace(/\"/g, '\\\\\"').replace(/&/g, '\",\"').replace(/=/g, '\":\"').replace(/\\+/g, \" \") + '\"}'\n  );\n}\nfunction __Fetch2ExpressReqWrapper__(handle) {\n  return function(options) {\n    let result = null;\n    if (typeof handle === \"function\") {\n      const { body, method, url, headers } = options;\n      let b = body;\n      b = JSON.parse(body);\n      result = handle({\n        method,\n        body: b,\n        query: __param2Obj__(url),\n        headers\n      });\n    } else {\n      result = handle;\n    }\n    return Mock.mock(result);\n  };\n}\nconst sleep = (delay = 0) => {\n  if (delay) {\n    return new Promise((resolve) => {\n      setTimeout(resolve, delay);\n    });\n  }\n  return null;\n};\nasync function createFetchReturn(mock, init) {\n  const { timeout, response } = mock;\n  const mockFn = __Fetch2ExpressReqWrapper__(response);\n  const data = mockFn(init);\n  await sleep(timeout);\n  const result = {\n    ok: true,\n    status: 200,\n    clone() {\n      return result;\n    },\n    text() {\n      return Promise.resolve(data);\n    },\n    json() {\n      return Promise.resolve(data);\n    }\n  };\n  return result;\n}\n","start":1663662531720,"end":1663662531728,"order":"normal"},{"name":"vite-plugin-use-modules","result":"import Mock from \"mockjs\";\nexport function createFetchSever(mockList) {\n  if (!window[\"originFetch\"]) {\n    window[\"originFetch\"] = window.fetch;\n    window.fetch = function(fetchUrl, init) {\n      const currentMock = mockList.find((mi) => fetchUrl.includes(mi.url));\n      if (currentMock) {\n        const result = createFetchReturn(currentMock, init);\n        return result;\n      } else {\n        return window[\"originFetch\"](fetchUrl, init);\n      }\n    };\n  }\n}\nfunction __param2Obj__(url) {\n  const search = url.split(\"?\")[1];\n  if (!search) {\n    return {};\n  }\n  return JSON.parse(\n    '{\"' + decodeURIComponent(search).replace(/\"/g, '\\\\\"').replace(/&/g, '\",\"').replace(/=/g, '\":\"').replace(/\\+/g, \" \") + '\"}'\n  );\n}\nfunction __Fetch2ExpressReqWrapper__(handle) {\n  return function(options) {\n    let result = null;\n    if (typeof handle === \"function\") {\n      const { body, method, url, headers } = options;\n      let b = body;\n      b = JSON.parse(body);\n      result = handle({\n        method,\n        body: b,\n        query: __param2Obj__(url),\n        headers\n      });\n    } else {\n      result = handle;\n    }\n    return Mock.mock(result);\n  };\n}\nconst sleep = (delay = 0) => {\n  if (delay) {\n    return new Promise((resolve) => {\n      setTimeout(resolve, delay);\n    });\n  }\n  return null;\n};\nasync function createFetchReturn(mock, init) {\n  const { timeout, response } = mock;\n  const mockFn = __Fetch2ExpressReqWrapper__(response);\n  const data = mockFn(init);\n  await sleep(timeout);\n  const result = {\n    ok: true,\n    status: 200,\n    clone() {\n      return result;\n    },\n    text() {\n      return Promise.resolve(data);\n    },\n    json() {\n      return Promise.resolve(data);\n    }\n  };\n  return result;\n}\n","start":1663662531733,"end":1663662531733,"order":"normal"},{"name":"vite:import-analysis","result":"import __vite__cjsImport0_mockjs from \"/node_modules/.vite/deps/mockjs.js?v=ec8d21eb\"; const Mock = __vite__cjsImport0_mockjs.__esModule ? __vite__cjsImport0_mockjs.default : __vite__cjsImport0_mockjs;\nexport function createFetchSever(mockList) {\n  if (!window[\"originFetch\"]) {\n    window[\"originFetch\"] = window.fetch;\n    window.fetch = function(fetchUrl, init) {\n      const currentMock = mockList.find((mi) => fetchUrl.includes(mi.url));\n      if (currentMock) {\n        const result = createFetchReturn(currentMock, init);\n        return result;\n      } else {\n        return window[\"originFetch\"](fetchUrl, init);\n      }\n    };\n  }\n}\nfunction __param2Obj__(url) {\n  const search = url.split(\"?\")[1];\n  if (!search) {\n    return {};\n  }\n  return JSON.parse(\n    '{\"' + decodeURIComponent(search).replace(/\"/g, '\\\\\"').replace(/&/g, '\",\"').replace(/=/g, '\":\"').replace(/\\+/g, \" \") + '\"}'\n  );\n}\nfunction __Fetch2ExpressReqWrapper__(handle) {\n  return function(options) {\n    let result = null;\n    if (typeof handle === \"function\") {\n      const { body, method, url, headers } = options;\n      let b = body;\n      b = JSON.parse(body);\n      result = handle({\n        method,\n        body: b,\n        query: __param2Obj__(url),\n        headers\n      });\n    } else {\n      result = handle;\n    }\n    return Mock.mock(result);\n  };\n}\nconst sleep = (delay = 0) => {\n  if (delay) {\n    return new Promise((resolve) => {\n      setTimeout(resolve, delay);\n    });\n  }\n  return null;\n};\nasync function createFetchReturn(mock, init) {\n  const { timeout, response } = mock;\n  const mockFn = __Fetch2ExpressReqWrapper__(response);\n  const data = mockFn(init);\n  await sleep(timeout);\n  const result = {\n    ok: true,\n    status: 200,\n    clone() {\n      return result;\n    },\n    text() {\n      return Promise.resolve(data);\n    },\n    json() {\n      return Promise.resolve(data);\n    }\n  };\n  return result;\n}\n","start":1663662531735,"end":1663662531742,"order":"normal"}]}
